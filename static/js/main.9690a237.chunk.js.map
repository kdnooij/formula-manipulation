{"version":3,"sources":["stores/tree/actions.ts","stores/tree/actionCreators.ts","stores/tree/selectors.ts","stores/console/actions.ts","components/top/TopbarButton.tsx","components/top/Controls.tsx","components/top/Topbar.tsx","stores/console/actionCreators.ts","stores/console/selectors.ts","parsing/nodes/node.ts","components/console/ConsoleInput.tsx","components/console/HeaderButton.tsx","components/console/Controls.tsx","components/console/LogView.tsx","components/console/ConsoleView.tsx","engine/printing.ts","components/tree/TreeView.tsx","stores/console/reducer.ts","stores/tree/reducer.ts","cache/consoleCache.ts","engine/assocative.ts","parsing/nodes/productNode.ts","parsing/nodes/summationNode.ts","engine/brackets.ts","parsing/nodes/numberNode.ts","engine/identity.ts","parsing/nodes/powerNode.ts","engine/likeTerms.ts","engine/numerical.ts","engine/ordering.ts","engine/hashing.ts","engine/power.ts","engine/equality.ts","engine/power2.ts","engine/simplification.ts","engine/smartSimplify.ts","parsing/nodes/nullNode.ts","engine/undefined.ts","parsing/errorListener.ts","parsing/generated/ExpressionLexer.ts","parsing/generated/ExpressionParser.ts","parsing/nodes/expressionNode.ts","parsing/nodes/symbolNode.ts","parsing/nodes/variableNode.ts","parsing/visitor.ts","parsing/parser.ts","inputHandling/inputHandler.ts","stores/console/sagas.ts","cache/treeCache.ts","stores/tree/sagas.ts","stores/store.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["ActionTypeNames","updateTree","tree","ruleNames","type","UpdateTree","setHistory","state","history","SetHistory","saveHistory","SaveHistory","canUndo","index","canRedo","length","getTree","undefined","TopbarButton","this","props","name","id","icon","onClickButton","rest","NavItem","Button","replace","onClick","UncontrolledTooltip","target","React","Controls","Form","inline","onSubmit","e","preventDefault","color","className","disabled","undo","redo","connect","dispatch","Redo","Undo","Topbar","Navbar","light","NavbarBrand","href","Nav","navbar","addToLog","line","AddToLog","clearHistory","ClearHistory","ASTType","getLines","console","lines","getInputHistory","inputHistory","canClear","ConsoleInput","cycle","key","cycleIndex","setState","input","tempInput","execute","executeInput","handleInputChange","event","value","Input","onChange","onKeyDown","d","$","scrollTop","prop","ExecuteInput","HeaderButton","size","clear","LogView","map","isInput","isError","ConsoleView","Container","ASTNode","hash","printNode","node","null","variable","number","toString","expression","children","c","join","symbol","power","checkNodeType","summation","product","TreeView","svg","width","data","root","hierarchy","dx","dy","height","d3","nodeSize","chart","x0","Infinity","x1","each","x","attr","g","append","selectAll","links","y","descendants","style","text","clone","lower","fluid","ref","element","select","remove","initialState","localStorage","setItem","JSON","stringify","loadHistory","getItem","parse","applyAssociative","child","_","flatten","ASTProductNode","ASTSummationNode","removeBrackets","i","newChildren","productBrackets","ASTNumberNode","removeIdentities","compact","removeIdentitiesSummation","_i","removeIdentitiesProduct","base","exp","removeIdentitiesPower","ASTPowerNode","likeTerms","likeProduct","likeSum","applyNumerical","applyNumericalSummation","applyNumericalProduct","applyNumericalPower","sum","push","unshift","Math","pow","orderNode","sort","a","b","sortNode","computeHash","sortNumerical","localeCompare","sortLexi","sortOnFirst","res","sortPowers","Error","sortSubTrees","powerSimplify","powerNode","transformPower","base1","base2","transformPowerBase","equals","equClasses","arr","R","classes","Map","assigned","cls","set","values","powerSimplify2","transformPower2","exps","p","transformPowerBase2","simplifyInput","simplifyVariable","sI","operator","simplifyExpression","smartSimplify","sNode","s","smartSimplifySummation","smartSimplifyProduct","smartSimplifyPower","ASTNullNode","isUndefined","undefinedProduct","child0","child1","exponent","undefinedPower","undefinedSum","ParseErrorLevel","ErrorListener","errors","error","_recognizer","offendingSymbol","charPositionInLine","msg","_e","end","level","ERROR","message","start","ExpressionLexer","_interp","LexerATNSimulator","_ATN","VOCABULARY","_serializedATN","channelNames","modeNames","__ATN","ATNDeserializer","deserialize","Utils","Lexer","VARIABLE","SCIENTIFIC_NUMBER","LPAREN","RPAREN","PLUS","MINUS","TIMES","DIV","GT","LT","EQ","POINT","POW","WS","_LITERAL_NAMES","_SYMBOLIC_NAMES","VocabularyImpl","ExpressionParser","ParserATNSimulator","_localctx","FileContext","_ctx","enterRule","RULE_file","enterOuterAlt","match","EOF","re","RecognitionException","exception","_errHandler","reportError","recover","exitRule","_p","_la","_parentctx","_parentState","ExpressionContext","enterRecursionRule","RULE_expression","_alt","sync","_input","LA","atom","NoViableAltException","_stop","tryLT","interpreter","adaptivePredict","ATN","INVALID_ALT_NUMBER","_parseListeners","triggerExitRuleEvent","pushNewRecursionContext","precpred","FailedPredicateException","recoverInline","Token","matchedEOF","reportMatch","consume","unrollRecursionContexts","AtomContext","RULE_atom","scientific","ScientificContext","RULE_scientific","VariableContext","RULE_variable","RelopContext","RULE_relop","ruleIndex","predIndex","expression_sempred","Parser","ASTOperator","parent","invokingState","getRuleContext","getToken","listener","enterFile","exitFile","visitor","visitFile","visitChildren","ParserRuleContext","getRuleContexts","tryGetToken","tryGetRuleContext","enterExpression","exitExpression","visitExpression","enterAtom","exitAtom","visitAtom","enterScientific","exitScientific","visitScientific","enterVariable","exitVariable","visitVariable","enterRelop","exitRelop","visitRelop","ASTExpressionNode","ASTSymbolNode","ASTVariableNode","ASTVisitor","aggregate","nextResult","context","parseFloat","AbstractParseTreeVisitor","str","_tree","_parser","_lexer","_errorListener","inputStream","ANTLRInputStream","tokenStream","CommonTokenStream","addErrorListener","file","toStringTree","visit","tokens","split","store","clearConsoleHistory","parser","slice","getRuleNames","output","err","newTree","cloneDeep","getState","check","watchExecuteInput","watchLoadHistory","watchClearHistory","watchSaveHistory","takeEvery","action","all","putResolve","AddToInputHistory","call","inputHandler","put","saveHistoryAction","LoadHistory","consoleCache","watchUpdateTree","AddToHistory","treeCache","treeState","rootSaga","watchSagas","consoleSagas","treeSagas","reducers","rootReducer","combineReducers","fork","loadConsoleHistory","loadTreeHistory","saga","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","run","App","info","stack","componentStack","Fragment","Component","Boolean","window","location","hostname","library","add","faArrowRight","faRedo","faTrashAlt","faUndo","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9690a237.chunk.js","sourcesContent":["import { Action } from 'redux';\r\nimport { FileContext } from '../../parsing/generated/ExpressionParser';\r\nimport { ASTNode } from '../../parsing/nodes/node';\r\nimport State from './state';\r\n\r\nexport enum ActionTypeNames {\r\n    UpdateTree = 'Tree/UpdateTree',\r\n    AddToHistory = 'Tree/AddToHistory',\r\n    Undo = 'Tree/Undo',\r\n    Redo = 'Tree/Redo',\r\n    ClearHistory = 'Tree/ClearHistory',\r\n    LoadHistory = 'Tree/LoadHistory',\r\n    SetHistory = 'Tree/SetHistory',\r\n    SaveHistory = 'Tree/SaveHistory',\r\n}\r\n\r\nexport type UpdateTreeAction = Action<ActionTypeNames.UpdateTree> & {\r\n    tree: ASTNode[];\r\n    ruleNames: string[];\r\n};\r\n\r\nexport type AddToHistoryAction = Action<ActionTypeNames.AddToHistory> & {\r\n    tree: ASTNode[];\r\n    ruleNames: string[];\r\n};\r\n\r\nexport type UndoAction = Action<ActionTypeNames.Undo>;\r\nexport type RedoAction = Action<ActionTypeNames.Redo>;\r\n\r\nexport type ClearHistoryAction = Action<ActionTypeNames.ClearHistory>;\r\nexport type LoadHistoryAction = Action<ActionTypeNames.LoadHistory>;\r\nexport type SetHistoryAction = Action<ActionTypeNames.SetHistory> & {\r\n    history: State\r\n};\r\nexport type SaveHistoryAction = Action<ActionTypeNames.SaveHistory>;\r\n","import { ASTNode } from '../../parsing/nodes/node';\r\nimport {\r\n    ActionTypeNames,\r\n    AddToHistoryAction, ClearHistoryAction,\r\n    LoadHistoryAction, RedoAction, SaveHistoryAction, SetHistoryAction, UndoAction, UpdateTreeAction\r\n} from './actions';\r\nimport State from './state';\r\n\r\nexport function updateTree(tree: ASTNode[], ruleNames: string[]): UpdateTreeAction {\r\n    return {\r\n        ruleNames,\r\n        tree,\r\n        type: ActionTypeNames.UpdateTree,\r\n    };\r\n}\r\n\r\nexport function addToHistory(tree: ASTNode[], ruleNames: string[]): AddToHistoryAction {\r\n    return {\r\n        ruleNames,\r\n        tree,\r\n        type: ActionTypeNames.AddToHistory,\r\n    };\r\n}\r\n\r\nexport function undo(): UndoAction {\r\n    return {\r\n        type: ActionTypeNames.Undo,\r\n    };\r\n}\r\n\r\nexport function redo(): RedoAction {\r\n    return {\r\n        type: ActionTypeNames.Redo,\r\n    };\r\n}\r\n\r\nexport function clearHistory(): ClearHistoryAction {\r\n    return {\r\n        type: ActionTypeNames.ClearHistory\r\n    };\r\n}\r\n\r\nexport function loadHistory(): LoadHistoryAction {\r\n    return {\r\n        type: ActionTypeNames.LoadHistory\r\n    };\r\n}\r\n\r\nexport function setHistory(state: State): SetHistoryAction {\r\n    return {\r\n        history: state,\r\n        type: ActionTypeNames.SetHistory\r\n    };\r\n}\r\n\r\nexport function saveHistory(): SaveHistoryAction {\r\n    return {\r\n        type: ActionTypeNames.SaveHistory\r\n    };\r\n}","import { RootState } from '../store';\r\n\r\nexport const canUndo = (state: RootState) => state.tree.index > 0;\r\nexport const canRedo = (state: RootState) => (state.tree.index < state.tree.history.length - 1);\r\n\r\nexport const getTree = (state: RootState) => (state.tree.index >= 0 ? \r\n    state.tree.history[state.tree.index] : undefined);\r\n","import { Action } from 'redux';\r\nimport State, { LogLine } from './state';\r\n\r\nexport enum ActionTypeNames {\r\n    AddToLog = 'Console/Log',\r\n    ExecuteInput = 'Console/ExecuteInput',\r\n    AddToInputHistory = 'Console/AddToInputHistory',\r\n    ClearHistory = 'Console/ClearHistory',\r\n    LoadHistory = 'Console/LoadHistory',\r\n    SetHistory = 'Console/SetHistory',\r\n    SaveHistory = 'Console/SaveHistory'\r\n}\r\n\r\nexport type AddToLogAction = Action<ActionTypeNames.AddToLog> & {\r\n    line: LogLine\r\n};\r\n\r\nexport type ExecuteInputAction = Action<ActionTypeNames.ExecuteInput> & {\r\n    input: string\r\n};\r\n\r\nexport type AddToInputHistoryAction = Action<ActionTypeNames.AddToInputHistory> & {\r\n    input: string\r\n};\r\n\r\nexport type ClearHistoryAction = Action<ActionTypeNames.ClearHistory>;\r\nexport type LoadHistoryAction = Action<ActionTypeNames.LoadHistory>;\r\nexport type SetHistoryAction = Action<ActionTypeNames.SetHistory> & {\r\n    history: State\r\n};\r\nexport type SaveHistoryAction = Action<ActionTypeNames.SaveHistory>;\r\n","import { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { Button, ButtonProps, NavItem, UncontrolledTooltip } from 'reactstrap';\r\n\r\ninterface Props extends ButtonProps {\r\n    name: string;\r\n    icon: IconProp;\r\n    id?: string;\r\n    onClickButton?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;\r\n}\r\n\r\nclass TopbarButton extends React.Component<Props> {\r\n\r\n    public render() {\r\n        const { name, id, icon, onClickButton, ...rest} = this.props;\r\n\r\n        return (\r\n            <NavItem>\r\n                <Button\r\n                    {...rest}\r\n                    id={id ? id : `${name.replace(' ', '')}Button`}\r\n                    onClick={onClickButton}\r\n                >\r\n                    <FontAwesomeIcon icon={icon} />\r\n                    <UncontrolledTooltip target={id ? id : `${name.replace(' ', '')}Button`}>\r\n                        {name}\r\n                    </UncontrolledTooltip>\r\n                </Button>\r\n            </NavItem>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TopbarButton;","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Form } from 'reactstrap';\r\nimport { Dispatch } from 'redux';\r\nimport { RootState } from '../../stores/store';\r\nimport { redo, undo } from '../../stores/tree/actionCreators';\r\nimport { canRedo, canUndo } from '../../stores/tree/selectors';\r\nimport TopbarButton from './TopbarButton';\r\n\r\ninterface Props {\r\n    canUndo: boolean;\r\n    canRedo: boolean;\r\n\r\n    undo: () => void;\r\n    redo: () => void;\r\n}\r\n\r\nclass Controls extends React.Component<Props> {\r\n    public render() {\r\n        return (\r\n            <Form inline={true} onSubmit={(e) => e.preventDefault()}>\r\n                <TopbarButton\r\n                    id=\"Undo\"\r\n                    name=\"Undo last action\"\r\n                    icon=\"undo\"\r\n                    color=\"primary\"\r\n                    className=\"mr-sm-2\"\r\n                    disabled={!this.props.canUndo}\r\n                    onClickButton={this.props.undo}\r\n                />\r\n                <TopbarButton\r\n                    id=\"Redo\"\r\n                    name=\"Redo\"\r\n                    icon=\"redo\"\r\n                    color=\"primary\"\r\n                    className=\"mr-sm-2\"\r\n                    disabled={!this.props.canRedo}\r\n                    onClickButton={this.props.redo}\r\n                />\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    canRedo: canRedo(state),\r\n    canUndo: canUndo(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    redo: () => dispatch(redo()),\r\n    undo: () => dispatch(undo()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Controls);","import * as React from 'react';\r\nimport { Nav, Navbar, NavbarBrand } from 'reactstrap';\r\nimport Controls from './Controls';\r\n\r\nclass Topbar extends React.Component {\r\n    public render() {\r\n        return (\r\n            <Navbar color=\"light\" light={true} >\r\n                <NavbarBrand href=\"/\">\r\n                    Formula Handling - Group 8\r\n                </NavbarBrand>\r\n                <Nav navbar={true}>\r\n                    <Controls />\r\n                </Nav>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Topbar;","import {\r\n    ActionTypeNames, AddToInputHistoryAction, AddToLogAction, \r\n    ClearHistoryAction, ExecuteInputAction, LoadHistoryAction,\r\n    SaveHistoryAction, SetHistoryAction\r\n} from './actions';\r\nimport State, { LogLine } from './state';\r\n\r\nexport function addToLog(line: LogLine): AddToLogAction {\r\n    return {\r\n        line,\r\n        type: ActionTypeNames.AddToLog,\r\n    };\r\n}\r\n\r\nexport function executeInput(input: string): ExecuteInputAction {\r\n    return {\r\n        input,\r\n        type: ActionTypeNames.ExecuteInput\r\n    };\r\n}\r\n\r\nexport function addToInputHistory(input: string): AddToInputHistoryAction {\r\n    return {\r\n        input,\r\n        type: ActionTypeNames.AddToInputHistory\r\n    };\r\n}\r\n\r\nexport function clearHistory(): ClearHistoryAction {\r\n    return {\r\n        type: ActionTypeNames.ClearHistory\r\n    };\r\n}\r\n\r\nexport function loadHistory(): LoadHistoryAction {\r\n    return {\r\n        type: ActionTypeNames.LoadHistory\r\n    };\r\n}\r\n\r\nexport function setHistory(state: State): SetHistoryAction {\r\n    return {\r\n        history: state,\r\n        type: ActionTypeNames.SetHistory\r\n    };\r\n}\r\n\r\nexport function saveHistory(): SaveHistoryAction {\r\n    return {\r\n        type: ActionTypeNames.SaveHistory\r\n    };\r\n}","import { RootState } from '../store';\r\n\r\nexport const getLines = (state: RootState) => state.console.lines;\r\nexport const getInputHistory = (state: RootState) => state.console.inputHistory;\r\nexport const canClear = (state: RootState) => state.console.lines.length > 0;","export enum ASTType {\r\n    null = 'null',\r\n    expression = 'expression',\r\n    number = 'number',\r\n    variable = 'variable',\r\n    symbol = 'symbol',\r\n    summation = 'summation',\r\n    product = 'product',\r\n    power = 'power',\r\n}\r\n\r\nexport abstract class ASTNode {\r\n    public name: string;\r\n    public hash?: string;\r\n\r\n    constructor(type: string) {\r\n        this.name = type;\r\n        this.hash = undefined;\r\n    }\r\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport $ from 'jquery';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Form, Input } from 'reactstrap';\r\nimport { Dispatch } from 'redux';\r\nimport { executeInput } from '../../stores/console/actionCreators';\r\nimport { getInputHistory } from '../../stores/console/selectors';\r\nimport { RootState } from '../../stores/store';\r\n\r\ninterface Props {\r\n    inputHistory: string[];\r\n\r\n    executeInput: typeof executeInput;\r\n}\r\n\r\ninterface State {\r\n    input: string;\r\n    cycleIndex: number;\r\n    tempInput?: string;\r\n}\r\n\r\nclass ConsoleInput extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            cycleIndex: -1,\r\n            input: '',\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <Form inline={true} onSubmit={(e) => { e.preventDefault(); this.execute(); }}>\r\n                <Input value={this.state.input} onChange={this.handleInputChange} onKeyDown={this.cycle} />\r\n                <Button onClick={this.execute}>\r\n                    <FontAwesomeIcon icon=\"arrow-right\" />\r\n                </Button>\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    public componentDidUpdate() {\r\n        // Scroll to bottom\r\n        const d = $('.LogView');\r\n        d.scrollTop(d.prop('scrollHeight'));\r\n    }\r\n\r\n    public componentDidMount() {\r\n        // Scroll to bottom\r\n        const d = $('.LogView');\r\n        d.scrollTop(d.prop('scrollHeight'));\r\n    }\r\n\r\n    private cycle = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'ArrowUp') {\r\n            if (this.state.cycleIndex === -1) {\r\n                const index = this.props.inputHistory.length - 1;\r\n                if (index > -1) {\r\n                    this.setState({\r\n                        cycleIndex: index,\r\n                        input: this.props.inputHistory[index],\r\n                        tempInput: this.state.input,\r\n                    });\r\n                }\r\n            } else if (this.state.cycleIndex === 0) {\r\n                const index = this.props.inputHistory.length - 1;\r\n                this.setState({\r\n                    cycleIndex: -1,\r\n                    input: this.state.tempInput || '',\r\n                });\r\n            } else {\r\n                const index = this.state.cycleIndex - 1;\r\n                this.setState({\r\n                    cycleIndex: index,\r\n                    input: this.props.inputHistory[index],\r\n                });\r\n            }\r\n        } else if (e.key === 'ArrowDown') {\r\n            if (this.state.cycleIndex === -1) {\r\n                const index = 0;\r\n                if (this.props.inputHistory.length > 0) {\r\n                    this.setState({\r\n                        cycleIndex: index,\r\n                        input: this.props.inputHistory[index],\r\n                        tempInput: this.state.input,\r\n                    });\r\n                }\r\n            } else if (this.state.cycleIndex === this.props.inputHistory.length - 1) {\r\n                this.setState({\r\n                    cycleIndex: -1,\r\n                    input: this.state.tempInput || '',\r\n                });\r\n            } else {\r\n                const index = this.state.cycleIndex + 1;\r\n                this.setState({\r\n                    cycleIndex: index,\r\n                    input: this.props.inputHistory[index],\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private execute = () => {\r\n        this.props.executeInput(this.state.input);\r\n        this.setState({ input: '' });\r\n    }\r\n\r\n    private handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            cycleIndex: -1,\r\n            input: event.target.value,\r\n            tempInput: undefined,\r\n        });\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    inputHistory: getInputHistory(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    executeInput: (input: string) => dispatch(executeInput(input)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConsoleInput);\r\n","import { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { Button, ButtonProps, UncontrolledTooltip } from 'reactstrap';\r\n\r\ninterface Props extends ButtonProps {\r\n    name: string;\r\n    icon: IconProp;\r\n    id?: string;\r\n    onClickButton?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;\r\n}\r\n\r\nclass HeaderButton extends React.Component<Props> {\r\n\r\n    public render() {\r\n        const { name, id, icon, onClickButton, ...rest } = this.props;\r\n\r\n        return (\r\n            <Button\r\n                size={'sm'}\r\n                {...rest}\r\n                id={id ? id : `${name.replace(' ', '')}Button`}\r\n                onClick={onClickButton}\r\n            >\r\n                <FontAwesomeIcon icon={icon} />\r\n                <UncontrolledTooltip target={id ? id : `${name.replace(' ', '')}Button`}>\r\n                    {name}\r\n                </UncontrolledTooltip>\r\n            </Button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HeaderButton;","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { clearHistory } from '../../stores/console/actionCreators';\r\nimport { canClear } from '../../stores/console/selectors';\r\nimport { RootState } from '../../stores/store';\r\nimport HeaderButton from './HeaderButton';\r\n\r\ninterface Props {\r\n    canClear: boolean;\r\n\r\n    clear: () => void;\r\n}\r\n\r\nclass Controls extends React.Component<Props> {\r\n    public render() {\r\n        return (\r\n            <HeaderButton\r\n                id=\"Clear\"\r\n                name=\"Clear\"\r\n                icon=\"trash-alt\"\r\n                color=\"danger\"\r\n                disabled={!this.props.canClear}\r\n                onClickButton={this.props.clear}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    canClear: canClear(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    clear: () => dispatch(clearHistory())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Controls);","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getLines } from '../../stores/console/selectors';\r\nimport { LogLine } from '../../stores/console/state';\r\nimport { RootState } from '../../stores/store';\r\n\r\ninterface Props {\r\n    lines: LogLine[];\r\n}\r\n\r\nclass LogView extends React.Component<Props> {\r\n    public render() {\r\n        return (\r\n            <div className=\"LogView\">\r\n                {this.props.lines.map((line, index) => {\r\n                    if (line.isInput) {\r\n                        return (\r\n                            <p key={index}>\r\n                                <code className=\"input\">\r\n                                    {'> ' + line.line}\r\n                                </code>\r\n                            </p>\r\n                        );\r\n                    } else {\r\n                        if (line.isError) {\r\n                            return (\r\n                                <p key={index}><code className=\"error\">{line.line}</code></p>\r\n                            );\r\n                        } else {\r\n                            return (\r\n                                <p key={index}><code className=\"output\">{line.line}</code></p>\r\n                            );\r\n                        }\r\n                    }\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    lines: getLines(state)\r\n});\r\n\r\nexport default connect(mapStateToProps)(LogView);\r\n","import * as React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport ConsoleInput from './ConsoleInput';\r\nimport './ConsoleView.scss';\r\nimport Controls from './Controls';\r\nimport LogView from './LogView';\r\n\r\nclass ConsoleView extends React.Component {\r\n    public render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"HeaderWrapper\">\r\n                    <Container className=\"ConsoleHeader\">\r\n                        <p className=\"h6\">Console</p>\r\n                        <Controls />\r\n                    </Container>\r\n                </div>\r\n                <Container className=\"ConsoleView\">\r\n\r\n                    <LogView />\r\n                    <ConsoleInput />\r\n                </Container>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConsoleView;\r\n","import { ASTType } from '../parsing/nodes/node';\r\nimport { ASTNumberNode } from '../parsing/nodes/numberNode';\r\nimport { NodeType } from './simplification';\r\n\r\nexport function printNode(node?: NodeType): string {\r\n    if (node) {\r\n        switch (node.type) {\r\n            case ASTType.null:\r\n                return '';\r\n            case ASTType.variable:\r\n                return node.variable;\r\n            case ASTType.number:\r\n                return node.value.toString();\r\n            case ASTType.expression:\r\n                if (node.children) {\r\n                    return '?(' + node.children.map((c) => printNode(c as NodeType)).join(' ') + ')';\r\n                } else {\r\n                    return node.name;\r\n                }\r\n            case ASTType.symbol:\r\n                return node.symbol;\r\n            case ASTType.power:\r\n                if (node.children) {\r\n                    if (checkNodeType(node.children[0] as NodeType)) {\r\n                        if (checkNodeType(node.children[1] as NodeType)) {\r\n                            return printNode(node.children[0] as NodeType) + '^' +\r\n                            printNode(node.children[1] as NodeType);\r\n                        } else {\r\n                            return printNode(node.children[0] as NodeType) + '^(' +\r\n                            printNode(node.children[1] as NodeType) + ')';\r\n                        }\r\n                    } else {\r\n                        if (checkNodeType(node.children[1] as NodeType)) {\r\n                            return '(' + printNode(node.children[0] as NodeType) + ')^' +\r\n                            printNode(node.children[1] as NodeType);\r\n                        } else {\r\n                            return '(' + printNode(node.children[0] as NodeType) + ')^(' +\r\n                            printNode(node.children[1] as NodeType) + ')';\r\n                        }\r\n                    }\r\n                } else {\r\n                    return node.name;\r\n                }\r\n            case ASTType.summation:\r\n                    if (node.children) {\r\n                        return node.children.map((c) => {\r\n                            if ((c as NodeType).type === ASTType.number && (c as ASTNumberNode).value < 0) {\r\n                                return '(' + printNode(c as NodeType) + ')';\r\n                            } else {\r\n                                return printNode(c as NodeType);\r\n                            }\r\n                        }).join(' + ');\r\n                    } else {\r\n                        return node.name;\r\n                    }\r\n            case ASTType.product:\r\n                if (node.children) {\r\n                    return node.children.map((c) => {\r\n                        if ((c as NodeType).type === ASTType.summation) {\r\n                            return '(' + printNode(c as NodeType) + ')';\r\n                        } else {\r\n                            return printNode(c as NodeType);\r\n                        }\r\n                    }).join('*');\r\n                } else {\r\n                    return node.name;\r\n                }\r\n            default:\r\n                return '';\r\n        }\r\n    } else {\r\n        return 'null';\r\n    }\r\n}\r\n\r\nexport function checkNodeType(node: NodeType) {\r\n    if (node.type === ASTType.variable ||\r\n        node.type === ASTType.symbol ||\r\n        (node.type === ASTType.number && node.value >= 0)) {\r\n            return true;\r\n        }\r\n    return false;\r\n}","import * as d3 from 'd3';\r\nimport { hierarchy } from 'd3-hierarchy';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Container } from 'reactstrap';\r\nimport { printNode } from '../../engine/printing';\r\nimport { NodeType } from '../../engine/simplification';\r\nimport { FileContext } from '../../parsing/generated/ExpressionParser';\r\nimport { ASTNode } from '../../parsing/nodes/node';\r\nimport { RootState } from '../../stores/store';\r\nimport { getTree } from '../../stores/tree/selectors';\r\nimport './TreeView.scss';\r\n\r\ninterface Props {\r\n    tree?: { tree: ASTNode[], ruleNames: string[] };\r\n}\r\n\r\nclass TreeView extends React.Component<Props> {\r\n\r\n    /* private tree = (data: ASTNode) => {\r\n        const root = hierarchy(data);\r\n        \r\n        const treeLayout = d3.tree();\r\n        treeLayout.size([400, 200]);\r\n        treeLayout(root);\r\n    } */\r\n\r\n    private svg?: d3.Selection<SVGSVGElement | null, unknown, null, undefined>;\r\n    private width = 1100;\r\n    public render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Container fluid={true} className=\"TreeView\">\r\n                    <svg\r\n                        ref={(element) => this.svg = d3.select(element)}\r\n                        width={'100%'}\r\n                    />\r\n                    {this.props.tree ? (\r\n                        <span className=\"StringView\">\r\n                            {printNode(this.props.tree.tree[0] as NodeType)}\r\n                        </span>\r\n                    ) : null}\r\n                </Container>\r\n\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    public componentDidUpdate() {\r\n        if (this.props.tree) {\r\n            this.svg!.select('g').remove();\r\n            this.chart(this.props.tree.tree[0]);\r\n        } else {\r\n            this.svg!.select('g').remove();\r\n        }\r\n    }\r\n\r\n    public componentDidMount() {\r\n        if (this.props.tree) {\r\n            this.svg!.select('g').remove();\r\n            this.chart(this.props.tree.tree[0]);\r\n        } else {\r\n            this.svg!.select('g').remove();\r\n        }\r\n    }\r\n\r\n    private tree = (data: ASTNode & { dx?: number, dy?: number }) => {\r\n        const root = hierarchy(data);\r\n        root.data.dx = 30;\r\n        root.data.dy = this.width / (root.height + 1);\r\n        return d3.tree<ASTNode & { dx?: number, dy?: number }>()\r\n            .nodeSize([root.data.dx, root.data.dy])(root);\r\n    }\r\n\r\n    private chart = (data: ASTNode) => {\r\n        const root = this.tree(data);\r\n\r\n        let x0 = Infinity;\r\n        let x1 = -x0;\r\n        root.each((d) => {\r\n            if (d.x > x1) { x1 = d.x; }\r\n            if (d.x < x0) { x0 = d.x; }\r\n        });\r\n\r\n        this.svg!\r\n            // tslint:disable-next-line:no-any\r\n            .attr('viewBox', [0, 0, this.width, x1 - x0 + root.data.dx! * 2] as any);\r\n\r\n        const g = this.svg!.append('g')\r\n            .attr('font-family', 'sans-serif')\r\n            .attr('font-size', 20)\r\n            .attr('transform', `translate(${root.data.dy! / 3},${root.data.dx! - x0})`);\r\n\r\n        const link = g.append('g')\r\n            .attr('fill', 'none')\r\n            .attr('stroke', '#555')\r\n            .attr('stroke-opacity', 0.4)\r\n            .attr('stroke-width', 1.5)\r\n            .selectAll('path')\r\n            .data(root.links())\r\n            .join('path')\r\n            .attr(\r\n                'd',\r\n                d3.linkHorizontal()\r\n                    // tslint:disable-next-line:no-any\r\n                    .x((d) => (d as any).y)\r\n                    // tslint:disable-next-line:no-any\r\n                    .y((d) => (d as any).x) as any\r\n            );\r\n\r\n        const node = g.append('g')\r\n            .attr('stroke-linejoin', 'round')\r\n            .attr('stroke-width', 1)\r\n            .selectAll('g')\r\n            .data(root.descendants())\r\n            .join('g')\r\n            .attr('transform', (d) => `translate(${d.y},${d.x})`);\r\n\r\n        node.append('rect')\r\n            .attr('fill', (d) => d.children ? '#fff' : '#eee')\r\n            .attr('stroke', '#333')\r\n            .attr('x', -20)\r\n            .attr('y', -15)\r\n            .attr('width', 40)\r\n            .attr('height', 30);\r\n\r\n        node.append('text')\r\n            .style('font-size', '1em')\r\n            .attr('dy', '0.31em')\r\n            .text((d) => d.data.name)\r\n            .attr('text-anchor', 'middle')\r\n            .clone(true).lower()\r\n            .attr('stroke', 'white')\r\n            ;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    tree: getTree(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(TreeView);\r\n","import * as actionCreators from './actionCreators';\r\nimport { ActionTypeNames } from './actions';\r\nimport State from './state';\r\n\r\nconst initialState: State = {\r\n    inputHistory: [],\r\n    lines: [],\r\n};\r\n\r\ntype Actions = ReturnType<typeof actionCreators[keyof typeof actionCreators]>;\r\n\r\nexport default function reducer(state: State = initialState, action: Actions): State {\r\n    switch (action.type) {\r\n        case ActionTypeNames.AddToInputHistory:\r\n            return {\r\n                ...state,\r\n                inputHistory: [...state.inputHistory, action.input]\r\n            };\r\n        case ActionTypeNames.AddToLog:\r\n            return {\r\n                ...state,\r\n                lines: [...state.lines, action.line]\r\n            };\r\n        case ActionTypeNames.SetHistory:\r\n            return {\r\n                ...action.history\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as actionCreators from './actionCreators';\r\nimport { ActionTypeNames } from './actions';\r\nimport State from './state';\r\n\r\nconst initialState: State = {\r\n    history: [],\r\n    index: -1,\r\n};\r\n\r\ntype Actions = ReturnType<typeof actionCreators[keyof typeof actionCreators]>;\r\n\r\nexport default function reducer(state: State = initialState, action: Actions): State {\r\n    switch (action.type) {\r\n        case ActionTypeNames.AddToHistory:\r\n            return {\r\n                history: [...(state.history || []), { tree: action.tree, ruleNames: action.ruleNames }],\r\n                index: state.history.length,\r\n            };\r\n        case ActionTypeNames.SetHistory:\r\n            return {\r\n                ...action.history\r\n            };\r\n        case ActionTypeNames.Undo:\r\n            return {\r\n                ...state,\r\n                index: state.index - 1\r\n            };\r\n        case ActionTypeNames.Redo:\r\n            return {\r\n                ...state,\r\n                index: state.index + 1\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import State from '../stores/console/state';\r\n\r\nexport function saveHistory(history: State) {\r\n    localStorage.setItem('consoleCache', JSON.stringify(history));\r\n}\r\n\r\nexport function loadHistory() {\r\n    const history = localStorage.getItem('consoleCache');\r\n    if (history) {\r\n        return JSON.parse(history);\r\n    } else {\r\n        return { lines: [], inputHistory: [] };\r\n    }\r\n}","import _ from 'lodash';\r\nimport { ASTType } from '../parsing/nodes/node';\r\nimport { NodeType } from './simplification';\r\n\r\nexport function applyAssociative(node: NodeType) {\r\n    if (node.type === ASTType.summation || node.type === ASTType.product) {\r\n        // Apply associative rule to all children\r\n        node.children = node.children.map((child) =>\r\n            applyAssociative(child as NodeType));\r\n\r\n        // Flatten this node and its children\r\n        node.children = _.flatten(node.children.map((child) => {\r\n            if ((child as NodeType).type === node.type) {\r\n                return (child as typeof node).children;\r\n            } else {\r\n                return [child];\r\n            }\r\n        }));\r\n    }\r\n\r\n    return node;\r\n}","import { ASTNode, ASTType } from './node';\r\n\r\nexport class ASTProductNode extends ASTNode {\r\n    public type: ASTType.product = ASTType.product;\r\n    public children: ASTNode[];\r\n\r\n    public constructor(children: ASTNode[]) {\r\n        super(ASTType.product);\r\n        this.children = children;\r\n        this.name = '*';\r\n    }\r\n\r\n}","import { ASTNode, ASTType } from './node';\r\n\r\nexport class ASTSummationNode extends ASTNode {\r\n    public type: ASTType.summation = ASTType.summation;\r\n    public children: ASTNode[];\r\n\r\n    public constructor(children: ASTNode[]) {\r\n        super(ASTType.summation);\r\n        this.children = children;\r\n        this.name = '+';\r\n    }\r\n\r\n}","import { ASTType } from '../parsing/nodes/node';\r\nimport { ASTProductNode } from '../parsing/nodes/productNode';\r\nimport { ASTSummationNode } from '../parsing/nodes/summationNode';\r\nimport { NodeType } from './simplification';\r\n\r\nexport function removeBrackets(node: NodeType): NodeType {\r\n    if (node.type === ASTType.summation || node.type === ASTType.product || node.type === ASTType.power) {\r\n        node.children = node.children.map((child) => removeBrackets(child as NodeType));\r\n    } \r\n    switch (node.type) {\r\n        case ASTType.product:\r\n            return productBrackets(node);\r\n        default:\r\n            return node;\r\n    }\r\n}\r\n\r\nexport function productBrackets(node: ASTProductNode): NodeType {\r\n    const children = node.children;\r\n    for (let i = 0; i < children.length; i++) {\r\n        if ((children[i] as NodeType).type === ASTType.summation) {\r\n            if (i === 0) {\r\n                const newChildren = (children[i] as ASTSummationNode).children.map((child) => {\r\n                    return new ASTProductNode([child, children[i + 1]]);\r\n                });\r\n                return new ASTSummationNode(newChildren);\r\n            } else {\r\n                const newChildren = (children[i] as ASTSummationNode).children.map((child) => {\r\n                    return new ASTProductNode([child, children[i - 1]]);\r\n                });\r\n                return new ASTSummationNode(newChildren);\r\n            }\r\n        }\r\n    }\r\n    return node;\r\n}","import { ASTNode, ASTType } from './node';\r\n\r\nexport class ASTNumberNode extends ASTNode {\r\n    public value: number;\r\n    public type: ASTType.number = ASTType.number;\r\n    \r\n    constructor(value: number) {\r\n        super(ASTType.variable);\r\n        this.value = value;\r\n        this.name = value.toString();\r\n    }\r\n}","import _ from 'lodash';\r\nimport { ASTType } from '../parsing/nodes/node';\r\nimport { ASTNumberNode } from '../parsing/nodes/numberNode';\r\nimport { ASTPowerNode } from '../parsing/nodes/powerNode';\r\nimport { ASTProductNode } from '../parsing/nodes/productNode';\r\nimport { ASTSummationNode } from '../parsing/nodes/summationNode';\r\nimport { NodeType } from './simplification';\r\n\r\nexport function removeIdentities(node: NodeType): NodeType {\r\n    if (node.type === ASTType.summation || node.type === ASTType.product || node.type === ASTType.power) {\r\n        // Remove identities from children\r\n        node.children = node.children.map((child) => removeIdentities(child as NodeType));\r\n    }\r\n\r\n    // Case of summation\r\n    if (node.type === ASTType.summation) {\r\n        return removeIdentitiesSummation(node);\r\n    }\r\n\r\n    // Case of product\r\n\r\n    if (node.type === ASTType.product) {\r\n        return removeIdentitiesProduct(node);\r\n    }\r\n\r\n    // Case of power\r\n\r\n    if (node.type === ASTType.power) {\r\n        return removeIdentitiesPower(node);\r\n    }\r\n\r\n    // Otherwise\r\n\r\n    return node;\r\n}\r\n\r\nfunction removeIdentitiesSummation(node: ASTSummationNode) {\r\n    node.children = _.compact(node.children.map((child) => {\r\n        // Remove a child if it is a zero value\r\n        if ((child as NodeType).type === ASTType.number\r\n            && (child as ASTNumberNode).value === 0) {\r\n            return undefined;\r\n        } else {\r\n            return child;\r\n        }\r\n    }));\r\n\r\n    if (node.children.length === 0) {\r\n        return new ASTNumberNode(0);\r\n    } else if (node.children.length === 1) {\r\n        return node.children[0] as NodeType;\r\n    }\r\n    return node;\r\n}\r\n\r\nfunction removeIdentitiesProduct(node: ASTProductNode) {\r\n    node.children = _.compact(node.children.map((child) => {\r\n        // Remove a child if it is has value 1\r\n        if ((child as NodeType).type === ASTType.number\r\n            && (child as ASTNumberNode).value === 1) {\r\n            return undefined;\r\n        } else {\r\n            return child;\r\n        }\r\n    }));\r\n\r\n    const children = node.children;\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let _i = 0; _i < children.length; _i++) {\r\n        if ((children[_i] as NodeType).type === ASTType.number && (children[_i] as ASTNumberNode).value === 0) {\r\n            return new ASTNumberNode(0);\r\n        }\r\n    }\r\n    if (node.children.length === 0) {\r\n        return new ASTNumberNode(1);\r\n    } else if (node.children.length === 1) {\r\n        return node.children[0] as NodeType;\r\n    }\r\n    return node;\r\n}\r\n\r\nfunction removeIdentitiesPower(node: ASTPowerNode) {\r\n    const base = node.children[0] as NodeType;\r\n    const exp = node.children[1] as NodeType;\r\n\r\n    if (base.type === ASTType.number && exp.type === ASTType.number) {\r\n        if (exp.value === 0) {\r\n            return new ASTNumberNode(1);\r\n        } else if (exp.value === 1) {\r\n            return base;\r\n        }\r\n\r\n        if (base.value === 1 || base.value === 0) {\r\n            return base;\r\n        }\r\n    }\r\n    \r\n    return node;\r\n}","import { ASTNode, ASTType } from './node';\r\n\r\nexport class ASTPowerNode extends ASTNode {\r\n    public type: ASTType.power = ASTType.power;\r\n    public children: ASTNode[];\r\n\r\n    public constructor(children: ASTNode[]) {\r\n        super(ASTType.power);\r\n        this.children = children;\r\n        this.name = '^';\r\n    }\r\n\r\n}","import _ from 'lodash';\r\nimport { ASTType } from '../parsing/nodes/node';\r\nimport { ASTNumberNode } from '../parsing/nodes/numberNode';\r\nimport { ASTPowerNode } from '../parsing/nodes/powerNode';\r\nimport { ASTProductNode } from '../parsing/nodes/productNode';\r\nimport { ASTSummationNode } from '../parsing/nodes/summationNode';\r\nimport { ASTVariableNode } from '../parsing/nodes/variableNode';\r\nimport { NodeType } from './simplification';\r\n\r\nexport function likeTerms(node: NodeType): NodeType {\r\n    if (node.type === ASTType.summation || node.type === ASTType.product || node.type === ASTType.power) {\r\n        node.children = node.children.map((child) => likeTerms(child as NodeType));\r\n    } \r\n    if (node.type === ASTType.product) {\r\n        return likeProduct(node);\r\n    }\r\n    if (node.type === ASTType.summation) {\r\n        return likeSum(node);\r\n    }\r\n    return node;\r\n}\r\n\r\nexport function likeProduct(node: ASTProductNode): NodeType {\r\n    const children = node.children;\r\n    for (let i = 1; i < children.length; i++) {\r\n        if ((children[i - 1] as NodeType).type === ASTType.variable &&\r\n        (children[i] as NodeType).type === ASTType.variable &&\r\n        (children[i - 1] as ASTVariableNode).variable === (children[i] as ASTVariableNode).variable) {\r\n            const newChildren = _.compact(node.children.map((child, index) => {\r\n                if (index === i - 1) {\r\n                    return new ASTPowerNode([child, new ASTNumberNode(2)]);\r\n                } else if (index === i) {\r\n                    return undefined;\r\n                } else {\r\n                    return child;\r\n                }\r\n            }));\r\n            return new ASTProductNode(newChildren);\r\n        }\r\n        if ((children[i - 1] as NodeType).type === ASTType.variable &&\r\n        (children[i] as NodeType).type === ASTType.power &&\r\n        (children[i - 1] as ASTVariableNode).variable === \r\n        ((children[i] as ASTPowerNode).children[0] as ASTVariableNode).variable) {\r\n            const newChildren = _.compact(node.children.map((child, index) => {\r\n                if (index === i - 1) {\r\n                    return new ASTPowerNode([child, new ASTSummationNode([new ASTNumberNode(1),\r\n                        (children[i] as ASTPowerNode).children[1]])]);\r\n                } else if (index === i) {\r\n                    return undefined;\r\n                } else {\r\n                    return child;\r\n                }\r\n            }));\r\n            return new ASTProductNode(newChildren);\r\n        }\r\n        if ((children[i] as NodeType).type === ASTType.variable &&\r\n        (children[i - 1] as NodeType).type === ASTType.power &&\r\n        (children[i] as ASTVariableNode).variable === \r\n        ((children[i - 1] as ASTPowerNode).children[0] as ASTVariableNode).variable) {\r\n            const newChildren = _.compact(node.children.map((child, index) => {\r\n                if (index === i) {\r\n                    return new ASTPowerNode([child, new ASTSummationNode([new ASTNumberNode(1),\r\n                        (children[i - 1] as ASTPowerNode).children[1]])]);\r\n                } else if (index === i - 1) {\r\n                    return undefined;\r\n                } else {\r\n                    return child;\r\n                }\r\n            }));\r\n            return new ASTProductNode(newChildren);\r\n        }\r\n    }\r\n    return node;\r\n}\r\n\r\nexport function likeSum(node: ASTSummationNode): NodeType {\r\n    const children = node.children;\r\n    for (let i = 1; i < children.length; i++) {\r\n        if ((children[i - 1] as NodeType).type === ASTType.variable &&\r\n        (children[i] as NodeType).type === ASTType.variable &&\r\n        (children[i - 1] as ASTVariableNode).variable === (children[i] as ASTVariableNode).variable) {\r\n            const newChildren = _.compact(node.children.map((child, index) => {\r\n                if (index === i - 1) {\r\n                    return new ASTProductNode([child, new ASTNumberNode(2)]);\r\n                } else if (index === i) {\r\n                    return undefined;\r\n                } else {\r\n                    return child;\r\n                }\r\n            }));\r\n            return new ASTSummationNode(newChildren);\r\n        }\r\n        if ((children[i - 1] as NodeType).type === ASTType.variable &&\r\n        (children[i] as NodeType).type === ASTType.product &&\r\n        (children[i - 1] as ASTVariableNode).variable === \r\n        ((children[i] as ASTProductNode).children[0] as ASTVariableNode).variable) {\r\n            const newChildren = _.compact(node.children.map((child, index) => {\r\n                if (index === i - 1) {\r\n                    return new ASTProductNode([child, new ASTSummationNode([new ASTNumberNode(1),\r\n                        (children[i] as ASTProductNode).children[1]])]);\r\n                } else if (index === i) {\r\n                    return undefined;\r\n                } else {\r\n                    return child;\r\n                }\r\n            }));\r\n            return new ASTSummationNode(newChildren);\r\n        }\r\n        if ((children[i] as NodeType).type === ASTType.variable &&\r\n        (children[i - 1] as NodeType).type === ASTType.product &&\r\n        (children[i] as ASTVariableNode).variable === \r\n        ((children[i - 1] as ASTProductNode).children[0] as ASTVariableNode).variable) {\r\n            const newChildren = _.compact(node.children.map((child, index) => {\r\n                if (index === i) {\r\n                    return new ASTProductNode([child, new ASTSummationNode([new ASTNumberNode(1),\r\n                        (children[i - 1] as ASTProductNode).children[1]])]);\r\n                } else if (index === i - 1) {\r\n                    return undefined;\r\n                } else {\r\n                    return child;\r\n                }\r\n            }));\r\n            return new ASTSummationNode(newChildren);\r\n        }\r\n    }\r\n    return node;\r\n}","import _ from 'lodash';\r\nimport { ASTType } from '../parsing/nodes/node';\r\nimport { ASTNumberNode } from '../parsing/nodes/numberNode';\r\nimport { ASTPowerNode } from '../parsing/nodes/powerNode';\r\nimport { ASTProductNode } from '../parsing/nodes/productNode';\r\nimport { ASTSummationNode } from '../parsing/nodes/summationNode';\r\nimport { NodeType } from './simplification';\r\n\r\nexport function applyNumerical(node: NodeType): NodeType {\r\n    if (node.type === ASTType.summation || node.type === ASTType.product || node.type === ASTType.power) {\r\n        // Apply numerical rule to all children\r\n        node.children = node.children.map((child) => applyNumerical(child as NodeType));\r\n    }\r\n\r\n    if (node.type === ASTType.summation) {\r\n        return applyNumericalSummation(node);\r\n    }\r\n\r\n    if (node.type === ASTType.product) {\r\n        return applyNumericalProduct(node);\r\n    }\r\n\r\n    if (node.type === ASTType.power) {\r\n        return applyNumericalPower(node);\r\n    }\r\n\r\n    return node;\r\n}\r\n\r\nexport function applyNumericalSummation(node: ASTSummationNode) {\r\n    let sum = 0;\r\n    for (const child of node.children) {\r\n        if ((child as NodeType).type === ASTType.number) {\r\n            sum += (child as ASTNumberNode).value;\r\n        }\r\n    }\r\n\r\n    // Remove all number nodes\r\n    node.children = _.compact(node.children.map((child) => {\r\n        if ((child as NodeType).type !== ASTType.number) {\r\n            return child;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }));\r\n\r\n    if (node.children.length === 0) {\r\n        return new ASTNumberNode(sum);\r\n    } else if (sum !== 0) {\r\n        // Add constant to end of sum\r\n        node.children.push(new ASTNumberNode(sum));\r\n    }\r\n\r\n    return node;\r\n}\r\n\r\nexport function applyNumericalProduct(node: ASTProductNode) {\r\n    let product = 1;\r\n    for (const child of node.children) {\r\n        if ((child as NodeType).type === ASTType.number) {\r\n            product *= (child as ASTNumberNode).value;\r\n        }\r\n    }\r\n\r\n    // Remove all number nodes\r\n    node.children = _.compact(node.children.map((child) => {\r\n        if ((child as NodeType).type !== ASTType.number) {\r\n            return child;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }));\r\n\r\n    if (node.children.length === 0) {\r\n        return new ASTNumberNode(product);\r\n    } else if (product !== 1) {\r\n        // Add constant to start of product\r\n        node.children.unshift(new ASTNumberNode(product));\r\n    }\r\n    return node;\r\n}\r\n\r\nexport function applyNumericalPower(node: ASTPowerNode) {\r\n    if ((node.children[0] as NodeType).type === ASTType.number &&\r\n        (node.children[1] as NodeType).type === ASTType.number) {\r\n        return new ASTNumberNode(Math.pow(\r\n            (node.children[0] as ASTNumberNode).value,\r\n            (node.children[1] as ASTNumberNode).value\r\n        ));\r\n    }\r\n    return node;\r\n}","import { ASTType } from '../parsing/nodes/node';\r\nimport { ASTNumberNode } from '../parsing/nodes/numberNode';\r\nimport { ASTPowerNode } from '../parsing/nodes/powerNode';\r\nimport { ASTProductNode } from '../parsing/nodes/productNode';\r\nimport { ASTSummationNode } from '../parsing/nodes/summationNode';\r\nimport { ASTVariableNode } from '../parsing/nodes/variableNode';\r\nimport { computeHash } from './hashing';\r\nimport { NodeType } from './simplification';\r\n\r\nexport function orderNode(node: NodeType): NodeType {\r\n    if (node.type === ASTType.summation || node.type === ASTType.product || node.type === ASTType.power) {\r\n        // Sort children\r\n        node.children = node.children.map((child) => orderNode(child as NodeType));\r\n\r\n        node.children = (node.children as NodeType[]).sort((a, b) => sortNode(a, b));\r\n    }\r\n    \r\n    node.hash = undefined;\r\n    node.hash = computeHash(node as NodeType);\r\n    return node;\r\n}\r\n\r\nfunction sortNode(a: NodeType, b: NodeType) {\r\n    if (a.type === ASTType.number && b.type === ASTType.number) {\r\n        return sortNumerical(a, b);\r\n    }\r\n    if (a.type === ASTType.variable && b.type === ASTType.variable) {\r\n        return sortLexi(a, b);\r\n    }\r\n    if (a.type === ASTType.number) {\r\n        return 1;\r\n    }\r\n    if (b.type === ASTType.number) {\r\n        return -1;\r\n    }\r\n    if (a.type === ASTType.variable) {\r\n        return 1;\r\n    }\r\n    if (b.type === ASTType.variable) {\r\n        return -1;\r\n    }\r\n\r\n    return sortSubTrees(a, b);\r\n}\r\n\r\n// Sort numbers on inverse numerical ordering\r\nfunction sortNumerical(a: ASTNumberNode, b: ASTNumberNode): number {\r\n    return a.value > b.value ? -1 : a.value < b.value ? 1 : 0;\r\n}\r\n\r\n// Sort variables lexicographically\r\nfunction sortLexi(a: ASTVariableNode, b: ASTVariableNode): number {\r\n    return a.variable.localeCompare(b.variable);\r\n}\r\n\r\n// Sort subtree on: power < product < sum\r\nfunction sortSubTrees(a: NodeType, b: NodeType): number {\r\n    if (a.type === ASTType.summation && b.type === ASTType.summation ||\r\n        a.type === ASTType.product && b.type === ASTType.product) {\r\n        return sortOnFirst(a, b);\r\n    }\r\n    if (a.type === ASTType.power && b.type === ASTType.power) {\r\n        return sortPowers(a, b);\r\n    }\r\n    if (a.type === ASTType.summation) {\r\n        return 1;\r\n    }\r\n    if (b.type === ASTType.summation) {\r\n        return -1;\r\n    }\r\n    if (a.type === ASTType.product) {\r\n        return 1;\r\n    }\r\n    if (b.type === ASTType.product) {\r\n        return -1;\r\n    }\r\n    throw new Error('Fault in sorting algorithm');\r\n}\r\n\r\nfunction sortOnFirst(a: ASTSummationNode | ASTProductNode, b: ASTSummationNode | ASTProductNode): number {\r\n    return sortNode(a.children[0] as NodeType, b.children[0] as NodeType);\r\n}\r\n\r\nfunction sortPowers(a: ASTPowerNode, b: ASTPowerNode): number {\r\n    const res = sortNode(a.children[0] as NodeType, b.children[0] as NodeType);\r\n    if (res === 0) {\r\n        return sortNode(a.children[1] as NodeType, b.children[1] as NodeType);\r\n    } else {\r\n        return res;\r\n    }\r\n}","import { ASTType } from '../parsing/nodes/node';\r\nimport { NodeType } from './simplification';\r\n\r\nexport function computeHash(node?: NodeType): string | undefined {\r\n    if (node) {\r\n        if (node.hash) {\r\n            return node.hash;\r\n        }\r\n        \r\n        switch (node.type) {\r\n            case ASTType.null:\r\n                return '';\r\n            case ASTType.variable:\r\n                return node.variable;\r\n            case ASTType.number:\r\n                return node.value.toString();\r\n            case ASTType.expression:\r\n                if (node.children) {\r\n                    return '?(' + node.children.map((c) => computeHash(c as NodeType)).join(' ') + ')';\r\n                } else {\r\n                    return node.name;\r\n                }\r\n            case ASTType.symbol:\r\n                return node.symbol;\r\n            case ASTType.power:\r\n                if (node.children) {\r\n                    return '(' + computeHash(node.children[0] as NodeType) + '^' +\r\n                        computeHash(node.children[1] as NodeType) + ')';\r\n                } else {\r\n                    return node.name;\r\n                }\r\n            case ASTType.summation:\r\n                if (node.children) {\r\n                    return '(' + node.children.map((c) => computeHash(c as NodeType)).join(' + ') + ')';\r\n                } else {\r\n                    return node.name;\r\n                }\r\n            case ASTType.product:\r\n                if (node.children) {\r\n                    return '(' + node.children.map((c) => computeHash(c as NodeType)).join(' * ') + ')';\r\n                } else {\r\n                    return node.name;\r\n                }\r\n            default:\r\n                return '';\r\n        }\r\n    } else {\r\n        return undefined;\r\n    }\r\n}","import _ from 'lodash';\r\nimport { ASTNode, ASTType } from '../parsing/nodes/node';\r\nimport { ASTNumberNode } from '../parsing/nodes/numberNode';\r\nimport { ASTPowerNode } from '../parsing/nodes/powerNode';\r\nimport { ASTProductNode } from '../parsing/nodes/productNode';\r\nimport { ASTSummationNode } from '../parsing/nodes/summationNode';\r\nimport { ASTVariableNode } from '../parsing/nodes/variableNode';\r\nimport { NodeType } from './simplification';\r\n\r\nexport function powerSimplify(node: NodeType): NodeType {\r\n    if (node.type === ASTType.power) {\r\n        node.children = node.children.map((child) => powerSimplify(child as NodeType));\r\n        return transformPower(node as ASTPowerNode);\r\n    }\r\n\r\n    if (node.type === ASTType.product) {\r\n        node.children = node.children.map((child) => powerSimplify(child as NodeType));\r\n        return transformPowerBase(node as ASTProductNode);\r\n    }\r\n\r\n    if (node.type === ASTType.summation) {\r\n        node.children = node.children.map((child) => powerSimplify(child as NodeType));\r\n    }\r\n\r\n    return node;\r\n}\r\nexport function transformPower(node: ASTPowerNode) {\r\n    const children = node.children;\r\n    if ((children[0] as NodeType).type === ASTType.power) {\r\n        const powerNode = children[0] as ASTPowerNode;\r\n        children[0] = powerNode.children[0];\r\n        children[1] = new ASTProductNode([powerNode.children[1], children[1]]);\r\n    }\r\n\r\n    if ((children[0] as NodeType).type === ASTType.product) {\r\n        return new ASTProductNode([new ASTPowerNode([(children[0] as ASTProductNode).children[0], children[1]]),\r\n        new ASTPowerNode([(children[0] as ASTProductNode).children[1], children[1]])]);\r\n    }\r\n\r\n    return node;\r\n}\r\n\r\nexport function transformPowerBase(node: ASTProductNode): ASTProductNode | ASTPowerNode {\r\n    const children = node.children;\r\n    for (let i = 1; i < children.length; i++) {\r\n        if ((children[(i - 1)] as NodeType).type === ASTType.power &&\r\n            (children[i] as NodeType).type === ASTType.power) {\r\n            const base1 = (children[i - 1] as ASTPowerNode).children;\r\n            const base2 = (children[i] as ASTPowerNode).children;\r\n            if ((base1[0] as NodeType).type === ASTType.number &&\r\n                (base2[0] as NodeType).type === ASTType.number &&\r\n                (base1[0] as ASTNumberNode).value === (base2[0] as ASTNumberNode).value) {\r\n                if (children.length === 2) {\r\n                    return new ASTPowerNode([base1[0], new ASTSummationNode([base1[1], base2[1]])]);\r\n                } else {\r\n                    node.children = _.compact(node.children.map((child, index) => {\r\n                        // Remove a child if it is a zero value\r\n                        if (index === i) {\r\n                            return new ASTPowerNode([base1[0], new ASTSummationNode([base1[1], base2[1]])]);\r\n                        } else if (index === i - 1) {\r\n                            return undefined;\r\n                        } else {\r\n                            return child;\r\n                        }\r\n                    }));\r\n                    return node;\r\n                }\r\n            } else if ((base1[0] as NodeType).type === ASTType.variable &&\r\n                (base2[0] as NodeType).type === ASTType.variable &&\r\n                (base1[0] as ASTVariableNode).variable === (base2[0] as ASTVariableNode).variable) {\r\n                if (children.length === 2) {\r\n                    return new ASTPowerNode([base1[0], new ASTSummationNode([base1[1], base2[1]])]);\r\n                } else {\r\n                    node.children = _.compact(node.children.map((child, index) => {\r\n                        // Remove a child if it is a zero value\r\n                        if (index === i) {\r\n                            return new ASTPowerNode([base1[0], new ASTSummationNode([base1[1], base2[1]])]);\r\n                        } else if (index === i - 1) {\r\n                            return undefined;\r\n                        } else {\r\n                            return child;\r\n                        }\r\n                    }));\r\n                    return node;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return node;\r\n}","import { NodeType } from './simplification';\r\n\r\n/**\r\n * Compares node A and B based on their hashes. Returns true/false if equality\r\n * can be checked. Returns undefined if one of the hashes of A or B is undefined.\r\n * This function does not standardize the nodes before checking equality!\r\n * @param a Node A\r\n * @param b Node B\r\n */\r\nexport function equals(a: NodeType, b: NodeType): boolean | undefined {\r\n    if (a.hash === undefined || b.hash === undefined) {\r\n        return undefined;\r\n    }\r\n\r\n    return a.hash === b.hash;\r\n}\r\n\r\n/**\r\n * Divides given array into array of equivalence classes based on a given\r\n * equivalence relation.\r\n * @param arr array to divide in equivalence classes\r\n * @param R equivalence relation\r\n */\r\nexport function equClasses(arr: NodeType[], R: (a: NodeType, b: NodeType) => boolean | undefined): NodeType[][] {\r\n    const classes = new Map<NodeType, NodeType[]>();\r\n\r\n    for (const x of arr) {\r\n        let assigned = false;\r\n        for (const [y, cls] of classes) {\r\n            if (R(x, y)) {\r\n                cls.push(x);\r\n                assigned = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!assigned) {\r\n            classes.set(x, [x]);\r\n        }\r\n    }\r\n\r\n    const res: NodeType[][] = [];\r\n    for (const cls of classes.values()) {\r\n        res.push(cls);\r\n    }\r\n\r\n    return res;\r\n}","import _ from 'lodash';\r\nimport { ASTNode, ASTType } from '../parsing/nodes/node';\r\nimport { ASTPowerNode } from '../parsing/nodes/powerNode';\r\nimport { ASTProductNode } from '../parsing/nodes/productNode';\r\nimport { ASTSummationNode } from '../parsing/nodes/summationNode';\r\nimport { equals, equClasses } from './equality';\r\nimport { NodeType } from './simplification';\r\n\r\nexport function powerSimplify2(node: NodeType): NodeType {\r\n    if (node.type === ASTType.power) {\r\n        node.children = node.children.map((child) => powerSimplify2(child as NodeType));\r\n        return transformPower2(node as ASTPowerNode);\r\n    }\r\n\r\n    if (node.type === ASTType.product) {\r\n        node.children = node.children.map((child) => powerSimplify2(child as NodeType));\r\n        return transformPowerBase2(node as ASTProductNode);\r\n    }\r\n\r\n    if (node.type === ASTType.summation) {\r\n        node.children = node.children.map((child) => powerSimplify2(child as NodeType));\r\n    }\r\n\r\n    return node;\r\n}\r\nexport function transformPower2(node: ASTPowerNode) {\r\n    const children = node.children;\r\n    if ((children[0] as NodeType).type === ASTType.power) {\r\n        const powerNode = children[0] as ASTPowerNode;\r\n        children[0] = powerNode.children[0];\r\n        children[1] = new ASTProductNode([powerNode.children[1], children[1]]);\r\n    }\r\n\r\n    if ((children[0] as NodeType).type === ASTType.product) {\r\n        return new ASTProductNode([new ASTPowerNode([(children[0] as ASTProductNode).children[0], children[1]]),\r\n        new ASTPowerNode([(children[0] as ASTProductNode).children[1], children[1]])]);\r\n    }\r\n\r\n    return node;\r\n}\r\n\r\nexport function transformPowerBase2(node: ASTProductNode): ASTProductNode | ASTPowerNode {\r\n    const classes = equClasses(node.children as NodeType[], (a, b) => {\r\n        if (a.type === ASTType.power && b.type === ASTType.power) {\r\n            return equals(a.children[0] as NodeType, b.children[0] as NodeType);\r\n        }\r\n    });\r\n\r\n    return new ASTProductNode(classes.map((cls) => {\r\n        if (cls.length === 1) {\r\n            return cls[0];\r\n        } else {\r\n            const base = (cls[0] as ASTPowerNode).children[0];\r\n            const exps = (cls as ASTPowerNode[]).map((p) => p.children[1]);\r\n            return new ASTPowerNode([base, new ASTSummationNode(exps)]);\r\n        }\r\n    }));\r\n}","import _ from 'lodash';\r\nimport { ASTExpressionNode } from '../parsing/nodes/expressionNode';\r\nimport { ASTType } from '../parsing/nodes/node';\r\nimport { ASTNullNode } from '../parsing/nodes/nullNode';\r\nimport { ASTNumberNode } from '../parsing/nodes/numberNode';\r\nimport { ASTPowerNode } from '../parsing/nodes/powerNode';\r\nimport { ASTProductNode } from '../parsing/nodes/productNode';\r\nimport { ASTSummationNode } from '../parsing/nodes/summationNode';\r\nimport { ASTSymbolNode } from '../parsing/nodes/symbolNode';\r\nimport { ASTVariableNode } from '../parsing/nodes/variableNode';\r\n\r\nexport type NodeType = ASTNullNode | ASTNumberNode | ASTVariableNode | ASTSymbolNode |\r\n    ASTExpressionNode | ASTSummationNode | ASTProductNode | ASTPowerNode ;\r\n\r\nexport function simplifyInput(node: NodeType): NodeType | undefined {\r\n    switch (node.type) {\r\n        case ASTType.null:\r\n            return simplifyNull(node);\r\n        case ASTType.number:\r\n            return simplifyNumber(node);\r\n        case ASTType.variable:\r\n            return simplifyVariable(node);\r\n        case ASTType.symbol:\r\n            return simplifySymbol(node);\r\n        case ASTType.expression:\r\n            return simplifyExpression(node);\r\n        default:\r\n            return node;\r\n    }\r\n}\r\n\r\nfunction simplifyNull(node: ASTNullNode): NodeType | undefined {\r\n    return undefined;\r\n}\r\n\r\nfunction simplifyNumber(node: ASTNumberNode): NodeType | undefined {\r\n    return node;\r\n}\r\n\r\nfunction simplifyVariable(node: ASTVariableNode): NodeType | undefined {\r\n    return node;\r\n}\r\n\r\nfunction simplifySymbol(node: ASTSymbolNode): NodeType | undefined {\r\n    return undefined;\r\n}\r\n\r\nfunction simplifyExpression(node: ASTExpressionNode): NodeType | undefined {\r\n    const sI = simplifyInput;\r\n\r\n    if (node.children) {\r\n        if (node.children.length === 1) {\r\n            const child: NodeType = node.children[0] as NodeType;\r\n            // Check if expression only contains a variable\r\n            if (child.type === ASTType.variable) {\r\n                return simplifyInput(child);\r\n            }\r\n            // Check if expression only contains a number\r\n            if (child.type === ASTType.number) {\r\n                return simplifyInput(child);\r\n            }\r\n        }\r\n\r\n        if (node.children.length === 2) {\r\n            const children = node.children as NodeType[];\r\n            // Unary Rule\r\n            node.children = _.compact([\r\n                sI(new ASTNumberNode(0)),\r\n                children[0],\r\n                sI(children[1])\r\n            ]);\r\n            return sI(node);\r\n        }\r\n\r\n        if (node.children.length === 3) {\r\n            const children = node.children as NodeType[];\r\n            // Remove brackets\r\n            if (children[0].type === ASTType.symbol) {\r\n                return simplifyInput(children[1]);\r\n            }\r\n\r\n            const operator = children[1];\r\n            if (operator.type === ASTType.symbol) {\r\n                switch (operator.symbol) {\r\n                    case '+':\r\n                        return sI(new ASTSummationNode(_.compact([\r\n                            sI(children[0]),\r\n                            sI(children[2]),\r\n                        ])));\r\n                    case '-': // Difference rule\r\n                        return sI(new ASTSummationNode(_.compact([\r\n                            sI(node.children[0] as NodeType),\r\n                            sI(new ASTProductNode(_.compact([\r\n                                sI(new ASTNumberNode(-1)),\r\n                                sI(node.children[2] as NodeType)\r\n                            ]))),\r\n                        ])));\r\n                    case '*':\r\n                        return simplifyInput(new ASTProductNode(_.compact([\r\n                            simplifyInput(children[0]),\r\n                            simplifyInput(children[2]),\r\n                        ])));\r\n                    case '/': // Quotient rule\r\n                        return sI(new ASTProductNode(_.compact([\r\n                            sI(node.children[0] as NodeType),\r\n                            sI(new ASTPowerNode(_.compact([\r\n                                sI(node.children[2] as NodeType),\r\n                                sI(new ASTNumberNode(-1))\r\n                            ]))),\r\n                        ])));\r\n                    case '^':\r\n                        return sI(new ASTPowerNode(_.compact([\r\n                            sI(node.children[0] as NodeType),\r\n                            sI(node.children[2] as NodeType),\r\n                        ])));\r\n                    default:\r\n                        return node;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Simplify children\r\n    if (node.children) {\r\n        node.children = _.compact(node.children.map((child) => {\r\n            return simplifyInput(child as NodeType);\r\n            // tslint:disable-next-line:no-any\r\n        }));\r\n    }\r\n    return node;\r\n}","import _ from 'lodash';\r\nimport { ASTType } from '../parsing/nodes/node';\r\nimport { ASTNumberNode } from '../parsing/nodes/numberNode';\r\nimport { ASTPowerNode } from '../parsing/nodes/powerNode';\r\nimport { ASTProductNode } from '../parsing/nodes/productNode';\r\nimport { ASTSummationNode } from '../parsing/nodes/summationNode';\r\nimport { equals, equClasses } from './equality';\r\nimport { applyNumericalPower, applyNumericalProduct, applyNumericalSummation } from './numerical';\r\nimport { orderNode } from './ordering';\r\nimport { NodeType } from './simplification';\r\n\r\nexport function smartSimplify(node: NodeType): NodeType {\r\n    node = orderNode(node);\r\n    if (node.type === ASTType.summation || node.type === ASTType.product || node.type === ASTType.power) {\r\n        // Apply numerical rule to all children\r\n        node.children = node.children.map((child) => smartSimplify(child as NodeType));\r\n    }\r\n\r\n    if (node.type === ASTType.summation) {\r\n        return smartSimplifySummation(node);\r\n    }\r\n\r\n    if (node.type === ASTType.product) {\r\n        return smartSimplifyProduct(node);\r\n    }\r\n\r\n    if (node.type === ASTType.power) {\r\n        return smartSimplifyPower(node);\r\n    }\r\n\r\n    return node;\r\n}\r\n\r\nexport function smartSimplifySummation(node: ASTSummationNode) {\r\n    const sNode = applyNumericalSummation(node);\r\n    if (sNode.type === ASTType.number) {\r\n        return sNode;\r\n    }\r\n\r\n    const sum: NodeType[][] = equClasses(node.children as NodeType[], (a, b) => {\r\n        return equals(a, b);\r\n    });\r\n    \r\n    // Remove all number nodes\r\n    sNode.children = sum.map((s) => {\r\n        if (s.length === 1) {\r\n            return s[0];\r\n        } else {\r\n            return new ASTProductNode([new ASTNumberNode(s.length), s[0] as NodeType]);\r\n        }\r\n    });\r\n    return sNode;\r\n}\r\n\r\nexport function smartSimplifyProduct(node: ASTProductNode) {\r\n    const sNode = applyNumericalProduct(node);\r\n    if (sNode.type === ASTType.number) {\r\n        return sNode;\r\n    }\r\n\r\n    const product: NodeType[][] = equClasses(node.children as NodeType[], (a, b) => {\r\n        return equals(a, b);\r\n    });\r\n    \r\n    // Remove all number nodes\r\n    sNode.children = product.map((s) => {\r\n        if (s.length === 1) {\r\n            return s[0];\r\n        } else {\r\n            return new ASTPowerNode([ s[0] as NodeType, new ASTNumberNode(s.length)]);\r\n        }\r\n    });\r\n    return sNode;\r\n}\r\n\r\nexport function smartSimplifyPower(node: ASTPowerNode) {\r\n    return applyNumericalPower(node);\r\n}","import { ASTNode, ASTType } from './node';\r\n\r\nexport class ASTNullNode extends ASTNode {\r\n    public type: ASTType.null = ASTType.null;\r\n\r\n    constructor() {\r\n        super(ASTType.null);\r\n\r\n    }\r\n}","import { ASTNode, ASTType } from '../parsing/nodes/node';\r\nimport { ASTNullNode } from '../parsing/nodes/nullNode';\r\nimport { ASTNumberNode } from '../parsing/nodes/numberNode';\r\nimport { ASTPowerNode } from '../parsing/nodes/powerNode';\r\nimport { ASTProductNode } from '../parsing/nodes/productNode';\r\nimport { ASTSummationNode } from '../parsing/nodes/summationNode';\r\nimport { applyNumerical } from './numerical';\r\nimport { NodeType } from './simplification';\r\n\r\nexport function isUndefined(node: NodeType): NodeType {\r\n    if (node.type === ASTType.summation || node.type === ASTType.product || node.type === ASTType.power) {\r\n        node.children = node.children.map((child) => isUndefined(child as NodeType));\r\n    }\r\n\r\n    if ((node as NodeType).type === ASTType.product) {\r\n        return undefinedProduct(node as ASTProductNode);\r\n    }\r\n    if ((node as NodeType).type === ASTType.power) {\r\n        return undefinedPower(node as ASTPowerNode);\r\n    }\r\n\r\n    if ((node as NodeType).type === ASTType.summation) {\r\n        return undefinedSum(node as ASTSummationNode);\r\n    }\r\n    \r\n    return node;\r\n}\r\n\r\nexport function undefinedProduct(node: ASTProductNode) {\r\n    for (let i = 0; i < (node.children.length); i++) {\r\n        if ((node.children[i] as NodeType).type === ASTType.null) {\r\n            return new ASTNullNode();\r\n        }\r\n    } \r\n    return node;\r\n}\r\n\r\nexport function undefinedSum(node: ASTSummationNode) {\r\n    for (let i = 0; i < (node.children.length); i++) {\r\n        if ((node.children[i] as NodeType).type === ASTType.null) {\r\n            return new ASTNullNode();\r\n        }\r\n    } \r\n    return node;\r\n}\r\n\r\nexport function undefinedPower(node: ASTPowerNode) {\r\n    const child0 = node.children[0];\r\n    const child1 = node.children[1];\r\n    const base = applyNumerical(child0 as NodeType);\r\n    const exponent = applyNumerical(child1 as NodeType);\r\n    if ((base as NodeType).type === ASTType.number && \r\n    (exponent as NodeType).type === ASTType.number) {\r\n        if (((base as ASTNumberNode).value === 0) &&\r\n        ((exponent as ASTNumberNode).value < 0)) {\r\n            return new ASTNullNode();\r\n        } else if (((base as ASTNumberNode).value < 0) &&\r\n        ((1 / (exponent as ASTNumberNode).value) % 2 === 0)) {\r\n            return new ASTNullNode();\r\n        }\r\n    }\r\n    for (let i = 0; i < (node.children.length); i++) {\r\n        if ((node.children[i] as NodeType).type === ASTType.null) {\r\n            return new ASTNullNode();\r\n        }\r\n    } \r\n    return node;\r\n} ","/**\r\n * @license\r\n *\r\n * Copyright (c) 2018, IBM.\r\n *\r\n * This source code is licensed under the Apache License, Version 2.0 found in\r\n * the LICENSE.txt file in the root directory of this source tree.\r\n */\r\n\r\nimport { ANTLRErrorListener, CommonToken, RecognitionException, Recognizer, Token } from 'antlr4ts';\r\n// tslint:disable-next-line:no-submodule-imports\r\nimport { Override } from 'antlr4ts/Decorators';\r\n\r\nexport interface ParserResult {\r\n    // tslint:disable-next-line:no-any\r\n    ast: any;\r\n    errors: ParserError[];\r\n}\r\n\r\nexport interface ParserError {\r\n    line: number;\r\n    start: number;\r\n    end: number;\r\n    message: string;\r\n    level: ParseErrorLevel;\r\n}\r\n\r\nexport enum ParseErrorLevel {\r\n    ERROR,\r\n    WARNING\r\n}\r\n\r\nexport class ErrorListener implements ANTLRErrorListener<CommonToken> {\r\n    public errors: ParserError[] = [];\r\n\r\n    public addError(error: ParserError) {\r\n        this.errors.push(error);\r\n    }\r\n\r\n    public syntaxError<T extends Token>(\r\n        // tslint:disable-next-line:no-any\r\n        _recognizer: Recognizer<T, any>,\r\n        offendingSymbol: T | undefined,\r\n        line: number,\r\n        charPositionInLine: number,\r\n        msg: string,\r\n        _e: RecognitionException | undefined\r\n    ): void {\r\n        // _e contains the first token of the rule that failed\r\n        if (offendingSymbol && offendingSymbol.text) {\r\n            if (offendingSymbol.text === ')') {\r\n                this.errors.push({\r\n                    end: charPositionInLine + offendingSymbol.text.length,\r\n                    level: ParseErrorLevel.ERROR,\r\n                    line: line - 1,\r\n                    message: 'Expecting arguments before symbol )',\r\n                    start: charPositionInLine,\r\n                });\r\n            } else {\r\n                this.errors.push({\r\n                    end: charPositionInLine + offendingSymbol.text.length,\r\n                    level: ParseErrorLevel.ERROR,\r\n                    line: line - 1,\r\n                    message: msg,\r\n                    start: charPositionInLine,\r\n                });\r\n            }\r\n        }\r\n    }\r\n}","// Generated from src/parsing/grammars/Expression.g4 by ANTLR 4.7.3-SNAPSHOT\r\n\r\n\r\nimport { ATN } from \"antlr4ts/atn/ATN\";\r\nimport { ATNDeserializer } from \"antlr4ts/atn/ATNDeserializer\";\r\nimport { CharStream } from \"antlr4ts/CharStream\";\r\nimport { Lexer } from \"antlr4ts/Lexer\";\r\nimport { LexerATNSimulator } from \"antlr4ts/atn/LexerATNSimulator\";\r\nimport { NotNull } from \"antlr4ts/Decorators\";\r\nimport { Override } from \"antlr4ts/Decorators\";\r\nimport { RuleContext } from \"antlr4ts/RuleContext\";\r\nimport { Vocabulary } from \"antlr4ts/Vocabulary\";\r\nimport { VocabularyImpl } from \"antlr4ts/VocabularyImpl\";\r\n\r\nimport * as Utils from \"antlr4ts/misc/Utils\";\r\n\r\n\r\nexport class ExpressionLexer extends Lexer {\r\n\tpublic static readonly VARIABLE = 1;\r\n\tpublic static readonly SCIENTIFIC_NUMBER = 2;\r\n\tpublic static readonly LPAREN = 3;\r\n\tpublic static readonly RPAREN = 4;\r\n\tpublic static readonly PLUS = 5;\r\n\tpublic static readonly MINUS = 6;\r\n\tpublic static readonly TIMES = 7;\r\n\tpublic static readonly DIV = 8;\r\n\tpublic static readonly GT = 9;\r\n\tpublic static readonly LT = 10;\r\n\tpublic static readonly EQ = 11;\r\n\tpublic static readonly POINT = 12;\r\n\tpublic static readonly POW = 13;\r\n\tpublic static readonly WS = 14;\r\n\r\n\t// tslint:disable:no-trailing-whitespace\r\n\tpublic static readonly channelNames: string[] = [\r\n\t\t\"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\",\r\n\t];\r\n\r\n\t// tslint:disable:no-trailing-whitespace\r\n\tpublic static readonly modeNames: string[] = [\r\n\t\t\"DEFAULT_MODE\",\r\n\t];\r\n\r\n\tpublic static readonly ruleNames: string[] = [\r\n\t\t\"VARIABLE\", \"VALID_ID_START\", \"VALID_ID_CHAR\", \"SCIENTIFIC_NUMBER\", \"NUMBER\", \r\n\t\t\"UNSIGNED_INTEGER\", \"E\", \"SIGN\", \"LPAREN\", \"RPAREN\", \"PLUS\", \"MINUS\", \r\n\t\t\"TIMES\", \"DIV\", \"GT\", \"LT\", \"EQ\", \"POINT\", \"POW\", \"WS\",\r\n\t];\r\n\r\n\tprivate static readonly _LITERAL_NAMES: Array<string | undefined> = [\r\n\t\tundefined, undefined, undefined, \"'('\", \"')'\", \"'+'\", \"'-'\", \"'*'\", \"'/'\", \r\n\t\t\"'>'\", \"'<'\", \"'='\", \"'.'\", \"'^'\",\r\n\t];\r\n\tprivate static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [\r\n\t\tundefined, \"VARIABLE\", \"SCIENTIFIC_NUMBER\", \"LPAREN\", \"RPAREN\", \"PLUS\", \r\n\t\t\"MINUS\", \"TIMES\", \"DIV\", \"GT\", \"LT\", \"EQ\", \"POINT\", \"POW\", \"WS\",\r\n\t];\r\n\tpublic static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ExpressionLexer._LITERAL_NAMES, ExpressionLexer._SYMBOLIC_NAMES, []);\r\n\r\n\t// @Override\r\n\t// @NotNull\r\n\tpublic get vocabulary(): Vocabulary {\r\n\t\treturn ExpressionLexer.VOCABULARY;\r\n\t}\r\n\t// tslint:enable:no-trailing-whitespace\r\n\r\n\r\n\tconstructor(input: CharStream) {\r\n\t\tsuper(input);\r\n\t\tthis._interp = new LexerATNSimulator(ExpressionLexer._ATN, this);\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic get grammarFileName(): string { return \"Expression.g4\"; }\r\n\r\n\t// @Override\r\n\tpublic get ruleNames(): string[] { return ExpressionLexer.ruleNames; }\r\n\r\n\t// @Override\r\n\tpublic get serializedATN(): string { return ExpressionLexer._serializedATN; }\r\n\r\n\t// @Override\r\n\tpublic get channelNames(): string[] { return ExpressionLexer.channelNames; }\r\n\r\n\t// @Override\r\n\tpublic get modeNames(): string[] { return ExpressionLexer.modeNames; }\r\n\r\n\tpublic static readonly _serializedATN: string =\r\n\t\t\"\\x03\\uC91D\\uCABA\\u058D\\uAFBA\\u4F53\\u0607\\uEA8B\\uC241\\x02\\x10u\\b\\x01\\x04\" +\r\n\t\t\"\\x02\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\" +\r\n\t\t\"\\x07\\t\\x07\\x04\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\v\\t\\v\\x04\\f\\t\\f\\x04\\r\\t\\r\" +\r\n\t\t\"\\x04\\x0E\\t\\x0E\\x04\\x0F\\t\\x0F\\x04\\x10\\t\\x10\\x04\\x11\\t\\x11\\x04\\x12\\t\\x12\" +\r\n\t\t\"\\x04\\x13\\t\\x13\\x04\\x14\\t\\x14\\x04\\x15\\t\\x15\\x03\\x02\\x03\\x02\\x07\\x02.\\n\" +\r\n\t\t\"\\x02\\f\\x02\\x0E\\x021\\v\\x02\\x03\\x03\\x05\\x034\\n\\x03\\x03\\x04\\x03\\x04\\x05\\x04\" +\r\n\t\t\"8\\n\\x04\\x03\\x05\\x03\\x05\\x03\\x05\\x05\\x05=\\n\\x05\\x03\\x05\\x03\\x05\\x05\\x05\" +\r\n\t\t\"A\\n\\x05\\x03\\x06\\x06\\x06D\\n\\x06\\r\\x06\\x0E\\x06E\\x03\\x06\\x03\\x06\\x06\\x06\" +\r\n\t\t\"J\\n\\x06\\r\\x06\\x0E\\x06K\\x05\\x06N\\n\\x06\\x03\\x07\\x06\\x07Q\\n\\x07\\r\\x07\\x0E\" +\r\n\t\t\"\\x07R\\x03\\b\\x03\\b\\x03\\t\\x03\\t\\x03\\n\\x03\\n\\x03\\v\\x03\\v\\x03\\f\\x03\\f\\x03\" +\r\n\t\t\"\\r\\x03\\r\\x03\\x0E\\x03\\x0E\\x03\\x0F\\x03\\x0F\\x03\\x10\\x03\\x10\\x03\\x11\\x03\\x11\" +\r\n\t\t\"\\x03\\x12\\x03\\x12\\x03\\x13\\x03\\x13\\x03\\x14\\x03\\x14\\x03\\x15\\x06\\x15p\\n\\x15\" +\r\n\t\t\"\\r\\x15\\x0E\\x15q\\x03\\x15\\x03\\x15\\x02\\x02\\x02\\x16\\x03\\x02\\x03\\x05\\x02\\x02\" +\r\n\t\t\"\\x07\\x02\\x02\\t\\x02\\x04\\v\\x02\\x02\\r\\x02\\x02\\x0F\\x02\\x02\\x11\\x02\\x02\\x13\" +\r\n\t\t\"\\x02\\x05\\x15\\x02\\x06\\x17\\x02\\x07\\x19\\x02\\b\\x1B\\x02\\t\\x1D\\x02\\n\\x1F\\x02\" +\r\n\t\t\"\\v!\\x02\\f#\\x02\\r%\\x02\\x0E\\'\\x02\\x0F)\\x02\\x10\\x03\\x02\\x06\\x05\\x02C\\\\aa\" +\r\n\t\t\"c|\\x04\\x02GGgg\\x04\\x02--//\\x05\\x02\\v\\f\\x0F\\x0F\\\"\\\"\\x02w\\x02\\x03\\x03\\x02\" +\r\n\t\t\"\\x02\\x02\\x02\\t\\x03\\x02\\x02\\x02\\x02\\x13\\x03\\x02\\x02\\x02\\x02\\x15\\x03\\x02\" +\r\n\t\t\"\\x02\\x02\\x02\\x17\\x03\\x02\\x02\\x02\\x02\\x19\\x03\\x02\\x02\\x02\\x02\\x1B\\x03\\x02\" +\r\n\t\t\"\\x02\\x02\\x02\\x1D\\x03\\x02\\x02\\x02\\x02\\x1F\\x03\\x02\\x02\\x02\\x02!\\x03\\x02\" +\r\n\t\t\"\\x02\\x02\\x02#\\x03\\x02\\x02\\x02\\x02%\\x03\\x02\\x02\\x02\\x02\\'\\x03\\x02\\x02\\x02\" +\r\n\t\t\"\\x02)\\x03\\x02\\x02\\x02\\x03+\\x03\\x02\\x02\\x02\\x053\\x03\\x02\\x02\\x02\\x077\\x03\" +\r\n\t\t\"\\x02\\x02\\x02\\t9\\x03\\x02\\x02\\x02\\vC\\x03\\x02\\x02\\x02\\rP\\x03\\x02\\x02\\x02\" +\r\n\t\t\"\\x0FT\\x03\\x02\\x02\\x02\\x11V\\x03\\x02\\x02\\x02\\x13X\\x03\\x02\\x02\\x02\\x15Z\\x03\" +\r\n\t\t\"\\x02\\x02\\x02\\x17\\\\\\x03\\x02\\x02\\x02\\x19^\\x03\\x02\\x02\\x02\\x1B`\\x03\\x02\\x02\" +\r\n\t\t\"\\x02\\x1Db\\x03\\x02\\x02\\x02\\x1Fd\\x03\\x02\\x02\\x02!f\\x03\\x02\\x02\\x02#h\\x03\" +\r\n\t\t\"\\x02\\x02\\x02%j\\x03\\x02\\x02\\x02\\'l\\x03\\x02\\x02\\x02)o\\x03\\x02\\x02\\x02+/\" +\r\n\t\t\"\\x05\\x05\\x03\\x02,.\\x05\\x07\\x04\\x02-,\\x03\\x02\\x02\\x02.1\\x03\\x02\\x02\\x02\" +\r\n\t\t\"/-\\x03\\x02\\x02\\x02/0\\x03\\x02\\x02\\x020\\x04\\x03\\x02\\x02\\x021/\\x03\\x02\\x02\" +\r\n\t\t\"\\x0224\\t\\x02\\x02\\x0232\\x03\\x02\\x02\\x024\\x06\\x03\\x02\\x02\\x0258\\x05\\x05\" +\r\n\t\t\"\\x03\\x0268\\x042;\\x0275\\x03\\x02\\x02\\x0276\\x03\\x02\\x02\\x028\\b\\x03\\x02\\x02\" +\r\n\t\t\"\\x029@\\x05\\v\\x06\\x02:<\\x05\\x0F\\b\\x02;=\\x05\\x11\\t\\x02<;\\x03\\x02\\x02\\x02\" +\r\n\t\t\"<=\\x03\\x02\\x02\\x02=>\\x03\\x02\\x02\\x02>?\\x05\\r\\x07\\x02?A\\x03\\x02\\x02\\x02\" +\r\n\t\t\"@:\\x03\\x02\\x02\\x02@A\\x03\\x02\\x02\\x02A\\n\\x03\\x02\\x02\\x02BD\\x042;\\x02CB\" +\r\n\t\t\"\\x03\\x02\\x02\\x02DE\\x03\\x02\\x02\\x02EC\\x03\\x02\\x02\\x02EF\\x03\\x02\\x02\\x02\" +\r\n\t\t\"FM\\x03\\x02\\x02\\x02GI\\x070\\x02\\x02HJ\\x042;\\x02IH\\x03\\x02\\x02\\x02JK\\x03\" +\r\n\t\t\"\\x02\\x02\\x02KI\\x03\\x02\\x02\\x02KL\\x03\\x02\\x02\\x02LN\\x03\\x02\\x02\\x02MG\\x03\" +\r\n\t\t\"\\x02\\x02\\x02MN\\x03\\x02\\x02\\x02N\\f\\x03\\x02\\x02\\x02OQ\\x042;\\x02PO\\x03\\x02\" +\r\n\t\t\"\\x02\\x02QR\\x03\\x02\\x02\\x02RP\\x03\\x02\\x02\\x02RS\\x03\\x02\\x02\\x02S\\x0E\\x03\" +\r\n\t\t\"\\x02\\x02\\x02TU\\t\\x03\\x02\\x02U\\x10\\x03\\x02\\x02\\x02VW\\t\\x04\\x02\\x02W\\x12\" +\r\n\t\t\"\\x03\\x02\\x02\\x02XY\\x07*\\x02\\x02Y\\x14\\x03\\x02\\x02\\x02Z[\\x07+\\x02\\x02[\\x16\" +\r\n\t\t\"\\x03\\x02\\x02\\x02\\\\]\\x07-\\x02\\x02]\\x18\\x03\\x02\\x02\\x02^_\\x07/\\x02\\x02_\" +\r\n\t\t\"\\x1A\\x03\\x02\\x02\\x02`a\\x07,\\x02\\x02a\\x1C\\x03\\x02\\x02\\x02bc\\x071\\x02\\x02\" +\r\n\t\t\"c\\x1E\\x03\\x02\\x02\\x02de\\x07@\\x02\\x02e \\x03\\x02\\x02\\x02fg\\x07>\\x02\\x02\" +\r\n\t\t\"g\\\"\\x03\\x02\\x02\\x02hi\\x07?\\x02\\x02i$\\x03\\x02\\x02\\x02jk\\x070\\x02\\x02k&\" +\r\n\t\t\"\\x03\\x02\\x02\\x02lm\\x07`\\x02\\x02m(\\x03\\x02\\x02\\x02np\\t\\x05\\x02\\x02on\\x03\" +\r\n\t\t\"\\x02\\x02\\x02pq\\x03\\x02\\x02\\x02qo\\x03\\x02\\x02\\x02qr\\x03\\x02\\x02\\x02rs\\x03\" +\r\n\t\t\"\\x02\\x02\\x02st\\b\\x15\\x02\\x02t*\\x03\\x02\\x02\\x02\\r\\x02/37<@EKMRq\\x03\\b\\x02\" +\r\n\t\t\"\\x02\";\r\n\tpublic static __ATN: ATN;\r\n\tpublic static get _ATN(): ATN {\r\n\t\tif (!ExpressionLexer.__ATN) {\r\n\t\t\tExpressionLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ExpressionLexer._serializedATN));\r\n\t\t}\r\n\r\n\t\treturn ExpressionLexer.__ATN;\r\n\t}\r\n\r\n}\r\n\r\n","// Generated from src/parsing/grammars/Expression.g4 by ANTLR 4.7.3-SNAPSHOT\r\n\r\n\r\nimport { ATN } from \"antlr4ts/atn/ATN\";\r\nimport { ATNDeserializer } from \"antlr4ts/atn/ATNDeserializer\";\r\nimport { FailedPredicateException } from \"antlr4ts/FailedPredicateException\";\r\nimport { NotNull } from \"antlr4ts/Decorators\";\r\nimport { NoViableAltException } from \"antlr4ts/NoViableAltException\";\r\nimport { Override } from \"antlr4ts/Decorators\";\r\nimport { Parser } from \"antlr4ts/Parser\";\r\nimport { ParserRuleContext } from \"antlr4ts/ParserRuleContext\";\r\nimport { ParserATNSimulator } from \"antlr4ts/atn/ParserATNSimulator\";\r\nimport { ParseTreeListener } from \"antlr4ts/tree/ParseTreeListener\";\r\nimport { ParseTreeVisitor } from \"antlr4ts/tree/ParseTreeVisitor\";\r\nimport { RecognitionException } from \"antlr4ts/RecognitionException\";\r\nimport { RuleContext } from \"antlr4ts/RuleContext\";\r\n//import { RuleVersion } from \"antlr4ts/RuleVersion\";\r\nimport { TerminalNode } from \"antlr4ts/tree/TerminalNode\";\r\nimport { Token } from \"antlr4ts/Token\";\r\nimport { TokenStream } from \"antlr4ts/TokenStream\";\r\nimport { Vocabulary } from \"antlr4ts/Vocabulary\";\r\nimport { VocabularyImpl } from \"antlr4ts/VocabularyImpl\";\r\n\r\nimport * as Utils from \"antlr4ts/misc/Utils\";\r\n\r\nimport { ExpressionListener } from \"./ExpressionListener\";\r\nimport { ExpressionVisitor } from \"./ExpressionVisitor\";\r\n\r\n\r\nexport class ExpressionParser extends Parser {\r\n\tpublic static readonly VARIABLE = 1;\r\n\tpublic static readonly SCIENTIFIC_NUMBER = 2;\r\n\tpublic static readonly LPAREN = 3;\r\n\tpublic static readonly RPAREN = 4;\r\n\tpublic static readonly PLUS = 5;\r\n\tpublic static readonly MINUS = 6;\r\n\tpublic static readonly TIMES = 7;\r\n\tpublic static readonly DIV = 8;\r\n\tpublic static readonly GT = 9;\r\n\tpublic static readonly LT = 10;\r\n\tpublic static readonly EQ = 11;\r\n\tpublic static readonly POINT = 12;\r\n\tpublic static readonly POW = 13;\r\n\tpublic static readonly WS = 14;\r\n\tpublic static readonly RULE_file = 0;\r\n\tpublic static readonly RULE_expression = 1;\r\n\tpublic static readonly RULE_atom = 2;\r\n\tpublic static readonly RULE_scientific = 3;\r\n\tpublic static readonly RULE_variable = 4;\r\n\tpublic static readonly RULE_relop = 5;\r\n\t// tslint:disable:no-trailing-whitespace\r\n\tpublic static readonly ruleNames: string[] = [\r\n\t\t\"file\", \"expression\", \"atom\", \"scientific\", \"variable\", \"relop\",\r\n\t];\r\n\r\n\tprivate static readonly _LITERAL_NAMES: Array<string | undefined> = [\r\n\t\tundefined, undefined, undefined, \"'('\", \"')'\", \"'+'\", \"'-'\", \"'*'\", \"'/'\", \r\n\t\t\"'>'\", \"'<'\", \"'='\", \"'.'\", \"'^'\",\r\n\t];\r\n\tprivate static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [\r\n\t\tundefined, \"VARIABLE\", \"SCIENTIFIC_NUMBER\", \"LPAREN\", \"RPAREN\", \"PLUS\", \r\n\t\t\"MINUS\", \"TIMES\", \"DIV\", \"GT\", \"LT\", \"EQ\", \"POINT\", \"POW\", \"WS\",\r\n\t];\r\n\tpublic static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ExpressionParser._LITERAL_NAMES, ExpressionParser._SYMBOLIC_NAMES, []);\r\n\r\n\t// @Override\r\n\t// @NotNull\r\n\tpublic get vocabulary(): Vocabulary {\r\n\t\treturn ExpressionParser.VOCABULARY;\r\n\t}\r\n\t// tslint:enable:no-trailing-whitespace\r\n\r\n\t// @Override\r\n\tpublic get grammarFileName(): string { return \"Expression.g4\"; }\r\n\r\n\t// @Override\r\n\tpublic get ruleNames(): string[] { return ExpressionParser.ruleNames; }\r\n\r\n\t// @Override\r\n\tpublic get serializedATN(): string { return ExpressionParser._serializedATN; }\r\n\r\n\tconstructor(input: TokenStream) {\r\n\t\tsuper(input);\r\n\t\tthis._interp = new ParserATNSimulator(ExpressionParser._ATN, this);\r\n\t}\r\n\t// @RuleVersion(0)\r\n\tpublic file(): FileContext {\r\n\t\tlet _localctx: FileContext = new FileContext(this._ctx, this.state);\r\n\t\tthis.enterRule(_localctx, 0, ExpressionParser.RULE_file);\r\n\t\ttry {\r\n\t\t\tthis.enterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tthis.state = 12;\r\n\t\t\tthis.expression(0);\r\n\t\t\tthis.state = 13;\r\n\t\t\tthis.match(ExpressionParser.EOF);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (re) {\r\n\t\t\tif (re instanceof RecognitionException) {\r\n\t\t\t\t_localctx.exception = re;\r\n\t\t\t\tthis._errHandler.reportError(this, re);\r\n\t\t\t\tthis._errHandler.recover(this, re);\r\n\t\t\t} else {\r\n\t\t\t\tthrow re;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tthis.exitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic expression(): ExpressionContext;\r\n\tpublic expression(_p: number): ExpressionContext;\r\n\t// @RuleVersion(0)\r\n\tpublic expression(_p?: number): ExpressionContext {\r\n\t\tif (_p === undefined) {\r\n\t\t\t_p = 0;\r\n\t\t}\r\n\r\n\t\tlet _parentctx: ParserRuleContext = this._ctx;\r\n\t\tlet _parentState: number = this.state;\r\n\t\tlet _localctx: ExpressionContext = new ExpressionContext(this._ctx, _parentState);\r\n\t\tlet _prevctx: ExpressionContext = _localctx;\r\n\t\tlet _startState: number = 2;\r\n\t\tthis.enterRecursionRule(_localctx, 2, ExpressionParser.RULE_expression, _p);\r\n\t\tlet _la: number;\r\n\t\ttry {\r\n\t\t\tlet _alt: number;\r\n\t\t\tthis.enterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tthis.state = 24;\r\n\t\t\tthis._errHandler.sync(this);\r\n\t\t\tswitch (this._input.LA(1)) {\r\n\t\t\tcase ExpressionParser.LPAREN:\r\n\t\t\t\t{\r\n\t\t\t\tthis.state = 16;\r\n\t\t\t\tthis.match(ExpressionParser.LPAREN);\r\n\t\t\t\tthis.state = 17;\r\n\t\t\t\tthis.expression(0);\r\n\t\t\t\tthis.state = 18;\r\n\t\t\t\tthis.match(ExpressionParser.RPAREN);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase ExpressionParser.PLUS:\r\n\t\t\t\t{\r\n\t\t\t\tthis.state = 20;\r\n\t\t\t\tthis.match(ExpressionParser.PLUS);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase ExpressionParser.MINUS:\r\n\t\t\t\t{\r\n\t\t\t\tthis.state = 21;\r\n\t\t\t\tthis.match(ExpressionParser.MINUS);\r\n\t\t\t\tthis.state = 22;\r\n\t\t\t\tthis.atom();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase ExpressionParser.VARIABLE:\r\n\t\t\tcase ExpressionParser.SCIENTIFIC_NUMBER:\r\n\t\t\t\t{\r\n\t\t\t\tthis.state = 23;\r\n\t\t\t\tthis.atom();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new NoViableAltException(this);\r\n\t\t\t}\r\n\t\t\tthis._ctx._stop = this._input.tryLT(-1);\r\n\t\t\tthis.state = 37;\r\n\t\t\tthis._errHandler.sync(this);\r\n\t\t\t_alt = this.interpreter.adaptivePredict(this._input, 2, this._ctx);\r\n\t\t\twhile (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {\r\n\t\t\t\tif (_alt === 1) {\r\n\t\t\t\t\tif (this._parseListeners != null) {\r\n\t\t\t\t\t\tthis.triggerExitRuleEvent();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t_prevctx = _localctx;\r\n\t\t\t\t\t{\r\n\t\t\t\t\tthis.state = 35;\r\n\t\t\t\t\tthis._errHandler.sync(this);\r\n\t\t\t\t\tswitch ( this.interpreter.adaptivePredict(this._input, 1, this._ctx) ) {\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t_localctx = new ExpressionContext(_parentctx, _parentState);\r\n\t\t\t\t\t\tthis.pushNewRecursionContext(_localctx, _startState, ExpressionParser.RULE_expression);\r\n\t\t\t\t\t\tthis.state = 26;\r\n\t\t\t\t\t\tif (!(this.precpred(this._ctx, 7))) {\r\n\t\t\t\t\t\t\tthrow new FailedPredicateException(this, \"this.precpred(this._ctx, 7)\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.state = 27;\r\n\t\t\t\t\t\tthis.match(ExpressionParser.POW);\r\n\t\t\t\t\t\tthis.state = 28;\r\n\t\t\t\t\t\tthis.expression(8);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t_localctx = new ExpressionContext(_parentctx, _parentState);\r\n\t\t\t\t\t\tthis.pushNewRecursionContext(_localctx, _startState, ExpressionParser.RULE_expression);\r\n\t\t\t\t\t\tthis.state = 29;\r\n\t\t\t\t\t\tif (!(this.precpred(this._ctx, 6))) {\r\n\t\t\t\t\t\t\tthrow new FailedPredicateException(this, \"this.precpred(this._ctx, 6)\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.state = 30;\r\n\t\t\t\t\t\t_la = this._input.LA(1);\r\n\t\t\t\t\t\tif (!(_la === ExpressionParser.TIMES || _la === ExpressionParser.DIV)) {\r\n\t\t\t\t\t\tthis._errHandler.recoverInline(this);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif (this._input.LA(1) === Token.EOF) {\r\n\t\t\t\t\t\t\t\tthis.matchedEOF = true;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tthis._errHandler.reportMatch(this);\r\n\t\t\t\t\t\t\tthis.consume();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.state = 31;\r\n\t\t\t\t\t\tthis.expression(7);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t_localctx = new ExpressionContext(_parentctx, _parentState);\r\n\t\t\t\t\t\tthis.pushNewRecursionContext(_localctx, _startState, ExpressionParser.RULE_expression);\r\n\t\t\t\t\t\tthis.state = 32;\r\n\t\t\t\t\t\tif (!(this.precpred(this._ctx, 5))) {\r\n\t\t\t\t\t\t\tthrow new FailedPredicateException(this, \"this.precpred(this._ctx, 5)\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.state = 33;\r\n\t\t\t\t\t\t_la = this._input.LA(1);\r\n\t\t\t\t\t\tif (!(_la === ExpressionParser.PLUS || _la === ExpressionParser.MINUS)) {\r\n\t\t\t\t\t\tthis._errHandler.recoverInline(this);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif (this._input.LA(1) === Token.EOF) {\r\n\t\t\t\t\t\t\t\tthis.matchedEOF = true;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tthis._errHandler.reportMatch(this);\r\n\t\t\t\t\t\t\tthis.consume();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.state = 34;\r\n\t\t\t\t\t\tthis.expression(6);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.state = 39;\r\n\t\t\t\tthis._errHandler.sync(this);\r\n\t\t\t\t_alt = this.interpreter.adaptivePredict(this._input, 2, this._ctx);\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (re) {\r\n\t\t\tif (re instanceof RecognitionException) {\r\n\t\t\t\t_localctx.exception = re;\r\n\t\t\t\tthis._errHandler.reportError(this, re);\r\n\t\t\t\tthis._errHandler.recover(this, re);\r\n\t\t\t} else {\r\n\t\t\t\tthrow re;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tthis.unrollRecursionContexts(_parentctx);\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\t// @RuleVersion(0)\r\n\tpublic atom(): AtomContext {\r\n\t\tlet _localctx: AtomContext = new AtomContext(this._ctx, this.state);\r\n\t\tthis.enterRule(_localctx, 4, ExpressionParser.RULE_atom);\r\n\t\ttry {\r\n\t\t\tthis.state = 42;\r\n\t\t\tthis._errHandler.sync(this);\r\n\t\t\tswitch (this._input.LA(1)) {\r\n\t\t\tcase ExpressionParser.SCIENTIFIC_NUMBER:\r\n\t\t\t\tthis.enterOuterAlt(_localctx, 1);\r\n\t\t\t\t{\r\n\t\t\t\tthis.state = 40;\r\n\t\t\t\tthis.scientific();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase ExpressionParser.VARIABLE:\r\n\t\t\t\tthis.enterOuterAlt(_localctx, 2);\r\n\t\t\t\t{\r\n\t\t\t\tthis.state = 41;\r\n\t\t\t\tthis.variable();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new NoViableAltException(this);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (re) {\r\n\t\t\tif (re instanceof RecognitionException) {\r\n\t\t\t\t_localctx.exception = re;\r\n\t\t\t\tthis._errHandler.reportError(this, re);\r\n\t\t\t\tthis._errHandler.recover(this, re);\r\n\t\t\t} else {\r\n\t\t\t\tthrow re;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tthis.exitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\t// @RuleVersion(0)\r\n\tpublic scientific(): ScientificContext {\r\n\t\tlet _localctx: ScientificContext = new ScientificContext(this._ctx, this.state);\r\n\t\tthis.enterRule(_localctx, 6, ExpressionParser.RULE_scientific);\r\n\t\ttry {\r\n\t\t\tthis.enterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tthis.state = 44;\r\n\t\t\tthis.match(ExpressionParser.SCIENTIFIC_NUMBER);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (re) {\r\n\t\t\tif (re instanceof RecognitionException) {\r\n\t\t\t\t_localctx.exception = re;\r\n\t\t\t\tthis._errHandler.reportError(this, re);\r\n\t\t\t\tthis._errHandler.recover(this, re);\r\n\t\t\t} else {\r\n\t\t\t\tthrow re;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tthis.exitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\t// @RuleVersion(0)\r\n\tpublic variable(): VariableContext {\r\n\t\tlet _localctx: VariableContext = new VariableContext(this._ctx, this.state);\r\n\t\tthis.enterRule(_localctx, 8, ExpressionParser.RULE_variable);\r\n\t\ttry {\r\n\t\t\tthis.enterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tthis.state = 46;\r\n\t\t\tthis.match(ExpressionParser.VARIABLE);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (re) {\r\n\t\t\tif (re instanceof RecognitionException) {\r\n\t\t\t\t_localctx.exception = re;\r\n\t\t\t\tthis._errHandler.reportError(this, re);\r\n\t\t\t\tthis._errHandler.recover(this, re);\r\n\t\t\t} else {\r\n\t\t\t\tthrow re;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tthis.exitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\t// @RuleVersion(0)\r\n\tpublic relop(): RelopContext {\r\n\t\tlet _localctx: RelopContext = new RelopContext(this._ctx, this.state);\r\n\t\tthis.enterRule(_localctx, 10, ExpressionParser.RULE_relop);\r\n\t\tlet _la: number;\r\n\t\ttry {\r\n\t\t\tthis.enterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tthis.state = 48;\r\n\t\t\t_la = this._input.LA(1);\r\n\t\t\tif (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ExpressionParser.GT) | (1 << ExpressionParser.LT) | (1 << ExpressionParser.EQ))) !== 0))) {\r\n\t\t\tthis._errHandler.recoverInline(this);\r\n\t\t\t} else {\r\n\t\t\t\tif (this._input.LA(1) === Token.EOF) {\r\n\t\t\t\t\tthis.matchedEOF = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._errHandler.reportMatch(this);\r\n\t\t\t\tthis.consume();\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (re) {\r\n\t\t\tif (re instanceof RecognitionException) {\r\n\t\t\t\t_localctx.exception = re;\r\n\t\t\t\tthis._errHandler.reportError(this, re);\r\n\t\t\t\tthis._errHandler.recover(this, re);\r\n\t\t\t} else {\r\n\t\t\t\tthrow re;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tthis.exitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {\r\n\t\tswitch (ruleIndex) {\r\n\t\tcase 1:\r\n\t\t\treturn this.expression_sempred(_localctx as ExpressionContext, predIndex);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tprivate expression_sempred(_localctx: ExpressionContext, predIndex: number): boolean {\r\n\t\tswitch (predIndex) {\r\n\t\tcase 0:\r\n\t\t\treturn this.precpred(this._ctx, 7);\r\n\r\n\t\tcase 1:\r\n\t\t\treturn this.precpred(this._ctx, 6);\r\n\r\n\t\tcase 2:\r\n\t\t\treturn this.precpred(this._ctx, 5);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tpublic static readonly _serializedATN: string =\r\n\t\t\"\\x03\\uC91D\\uCABA\\u058D\\uAFBA\\u4F53\\u0607\\uEA8B\\uC241\\x03\\x105\\x04\\x02\" +\r\n\t\t\"\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\\x07\" +\r\n\t\t\"\\t\\x07\\x03\\x02\\x03\\x02\\x03\\x02\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\" +\r\n\t\t\"\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x05\\x03\\x1B\\n\\x03\\x03\\x03\\x03\\x03\\x03\" +\r\n\t\t\"\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x07\\x03&\\n\\x03\\f\" +\r\n\t\t\"\\x03\\x0E\\x03)\\v\\x03\\x03\\x04\\x03\\x04\\x05\\x04-\\n\\x04\\x03\\x05\\x03\\x05\\x03\" +\r\n\t\t\"\\x06\\x03\\x06\\x03\\x07\\x03\\x07\\x03\\x07\\x02\\x02\\x03\\x04\\b\\x02\\x02\\x04\\x02\" +\r\n\t\t\"\\x06\\x02\\b\\x02\\n\\x02\\f\\x02\\x02\\x05\\x03\\x02\\t\\n\\x03\\x02\\x07\\b\\x03\\x02\\v\" +\r\n\t\t\"\\r\\x025\\x02\\x0E\\x03\\x02\\x02\\x02\\x04\\x1A\\x03\\x02\\x02\\x02\\x06,\\x03\\x02\\x02\" +\r\n\t\t\"\\x02\\b.\\x03\\x02\\x02\\x02\\n0\\x03\\x02\\x02\\x02\\f2\\x03\\x02\\x02\\x02\\x0E\\x0F\" +\r\n\t\t\"\\x05\\x04\\x03\\x02\\x0F\\x10\\x07\\x02\\x02\\x03\\x10\\x03\\x03\\x02\\x02\\x02\\x11\\x12\" +\r\n\t\t\"\\b\\x03\\x01\\x02\\x12\\x13\\x07\\x05\\x02\\x02\\x13\\x14\\x05\\x04\\x03\\x02\\x14\\x15\" +\r\n\t\t\"\\x07\\x06\\x02\\x02\\x15\\x1B\\x03\\x02\\x02\\x02\\x16\\x1B\\x07\\x07\\x02\\x02\\x17\\x18\" +\r\n\t\t\"\\x07\\b\\x02\\x02\\x18\\x1B\\x05\\x06\\x04\\x02\\x19\\x1B\\x05\\x06\\x04\\x02\\x1A\\x11\" +\r\n\t\t\"\\x03\\x02\\x02\\x02\\x1A\\x16\\x03\\x02\\x02\\x02\\x1A\\x17\\x03\\x02\\x02\\x02\\x1A\\x19\" +\r\n\t\t\"\\x03\\x02\\x02\\x02\\x1B\\'\\x03\\x02\\x02\\x02\\x1C\\x1D\\f\\t\\x02\\x02\\x1D\\x1E\\x07\" +\r\n\t\t\"\\x0F\\x02\\x02\\x1E&\\x05\\x04\\x03\\n\\x1F \\f\\b\\x02\\x02 !\\t\\x02\\x02\\x02!&\\x05\" +\r\n\t\t\"\\x04\\x03\\t\\\"#\\f\\x07\\x02\\x02#$\\t\\x03\\x02\\x02$&\\x05\\x04\\x03\\b%\\x1C\\x03\\x02\" +\r\n\t\t\"\\x02\\x02%\\x1F\\x03\\x02\\x02\\x02%\\\"\\x03\\x02\\x02\\x02&)\\x03\\x02\\x02\\x02\\'%\" +\r\n\t\t\"\\x03\\x02\\x02\\x02\\'(\\x03\\x02\\x02\\x02(\\x05\\x03\\x02\\x02\\x02)\\'\\x03\\x02\\x02\" +\r\n\t\t\"\\x02*-\\x05\\b\\x05\\x02+-\\x05\\n\\x06\\x02,*\\x03\\x02\\x02\\x02,+\\x03\\x02\\x02\\x02\" +\r\n\t\t\"-\\x07\\x03\\x02\\x02\\x02./\\x07\\x04\\x02\\x02/\\t\\x03\\x02\\x02\\x0201\\x07\\x03\\x02\" +\r\n\t\t\"\\x021\\v\\x03\\x02\\x02\\x0223\\t\\x04\\x02\\x023\\r\\x03\\x02\\x02\\x02\\x06\\x1A%\\'\" +\r\n\t\t\",\";\r\n\tpublic static __ATN: ATN;\r\n\tpublic static get _ATN(): ATN {\r\n\t\tif (!ExpressionParser.__ATN) {\r\n\t\t\tExpressionParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ExpressionParser._serializedATN));\r\n\t\t}\r\n\r\n\t\treturn ExpressionParser.__ATN;\r\n\t}\r\n\r\n}\r\n\r\nexport class FileContext extends ParserRuleContext {\r\n\tpublic expression(): ExpressionContext {\r\n\t\treturn this.getRuleContext(0, ExpressionContext);\r\n\t}\r\n\tpublic EOF(): TerminalNode { return this.getToken(ExpressionParser.EOF, 0); }\r\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\r\n\t\tsuper(parent, invokingState);\r\n\t}\r\n\t// @Override\r\n\tpublic get ruleIndex(): number { return ExpressionParser.RULE_file; }\r\n\t// @Override\r\n\tpublic enterRule(listener: ExpressionListener): void {\r\n\t\tif (listener.enterFile) {\r\n\t\t\tlistener.enterFile(this);\r\n\t\t}\r\n\t}\r\n\t// @Override\r\n\tpublic exitRule(listener: ExpressionListener): void {\r\n\t\tif (listener.exitFile) {\r\n\t\t\tlistener.exitFile(this);\r\n\t\t}\r\n\t}\r\n\t// @Override\r\n\tpublic accept<Result>(visitor: ExpressionVisitor<Result>): Result {\r\n\t\tif (visitor.visitFile) {\r\n\t\t\treturn visitor.visitFile(this);\r\n\t\t} else {\r\n\t\t\treturn visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nexport class ExpressionContext extends ParserRuleContext {\r\n\tpublic expression(): ExpressionContext[];\r\n\tpublic expression(i: number): ExpressionContext;\r\n\tpublic expression(i?: number): ExpressionContext | ExpressionContext[] {\r\n\t\tif (i === undefined) {\r\n\t\t\treturn this.getRuleContexts(ExpressionContext);\r\n\t\t} else {\r\n\t\t\treturn this.getRuleContext(i, ExpressionContext);\r\n\t\t}\r\n\t}\r\n\tpublic POW(): TerminalNode | undefined { return this.tryGetToken(ExpressionParser.POW, 0); }\r\n\tpublic TIMES(): TerminalNode | undefined { return this.tryGetToken(ExpressionParser.TIMES, 0); }\r\n\tpublic DIV(): TerminalNode | undefined { return this.tryGetToken(ExpressionParser.DIV, 0); }\r\n\tpublic PLUS(): TerminalNode | undefined { return this.tryGetToken(ExpressionParser.PLUS, 0); }\r\n\tpublic MINUS(): TerminalNode | undefined { return this.tryGetToken(ExpressionParser.MINUS, 0); }\r\n\tpublic LPAREN(): TerminalNode | undefined { return this.tryGetToken(ExpressionParser.LPAREN, 0); }\r\n\tpublic RPAREN(): TerminalNode | undefined { return this.tryGetToken(ExpressionParser.RPAREN, 0); }\r\n\tpublic atom(): AtomContext | undefined {\r\n\t\treturn this.tryGetRuleContext(0, AtomContext);\r\n\t}\r\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\r\n\t\tsuper(parent, invokingState);\r\n\t}\r\n\t// @Override\r\n\tpublic get ruleIndex(): number { return ExpressionParser.RULE_expression; }\r\n\t// @Override\r\n\tpublic enterRule(listener: ExpressionListener): void {\r\n\t\tif (listener.enterExpression) {\r\n\t\t\tlistener.enterExpression(this);\r\n\t\t}\r\n\t}\r\n\t// @Override\r\n\tpublic exitRule(listener: ExpressionListener): void {\r\n\t\tif (listener.exitExpression) {\r\n\t\t\tlistener.exitExpression(this);\r\n\t\t}\r\n\t}\r\n\t// @Override\r\n\tpublic accept<Result>(visitor: ExpressionVisitor<Result>): Result {\r\n\t\tif (visitor.visitExpression) {\r\n\t\t\treturn visitor.visitExpression(this);\r\n\t\t} else {\r\n\t\t\treturn visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nexport class AtomContext extends ParserRuleContext {\r\n\tpublic scientific(): ScientificContext | undefined {\r\n\t\treturn this.tryGetRuleContext(0, ScientificContext);\r\n\t}\r\n\tpublic variable(): VariableContext | undefined {\r\n\t\treturn this.tryGetRuleContext(0, VariableContext);\r\n\t}\r\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\r\n\t\tsuper(parent, invokingState);\r\n\t}\r\n\t// @Override\r\n\tpublic get ruleIndex(): number { return ExpressionParser.RULE_atom; }\r\n\t// @Override\r\n\tpublic enterRule(listener: ExpressionListener): void {\r\n\t\tif (listener.enterAtom) {\r\n\t\t\tlistener.enterAtom(this);\r\n\t\t}\r\n\t}\r\n\t// @Override\r\n\tpublic exitRule(listener: ExpressionListener): void {\r\n\t\tif (listener.exitAtom) {\r\n\t\t\tlistener.exitAtom(this);\r\n\t\t}\r\n\t}\r\n\t// @Override\r\n\tpublic accept<Result>(visitor: ExpressionVisitor<Result>): Result {\r\n\t\tif (visitor.visitAtom) {\r\n\t\t\treturn visitor.visitAtom(this);\r\n\t\t} else {\r\n\t\t\treturn visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nexport class ScientificContext extends ParserRuleContext {\r\n\tpublic SCIENTIFIC_NUMBER(): TerminalNode { return this.getToken(ExpressionParser.SCIENTIFIC_NUMBER, 0); }\r\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\r\n\t\tsuper(parent, invokingState);\r\n\t}\r\n\t// @Override\r\n\tpublic get ruleIndex(): number { return ExpressionParser.RULE_scientific; }\r\n\t// @Override\r\n\tpublic enterRule(listener: ExpressionListener): void {\r\n\t\tif (listener.enterScientific) {\r\n\t\t\tlistener.enterScientific(this);\r\n\t\t}\r\n\t}\r\n\t// @Override\r\n\tpublic exitRule(listener: ExpressionListener): void {\r\n\t\tif (listener.exitScientific) {\r\n\t\t\tlistener.exitScientific(this);\r\n\t\t}\r\n\t}\r\n\t// @Override\r\n\tpublic accept<Result>(visitor: ExpressionVisitor<Result>): Result {\r\n\t\tif (visitor.visitScientific) {\r\n\t\t\treturn visitor.visitScientific(this);\r\n\t\t} else {\r\n\t\t\treturn visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nexport class VariableContext extends ParserRuleContext {\r\n\tpublic VARIABLE(): TerminalNode { return this.getToken(ExpressionParser.VARIABLE, 0); }\r\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\r\n\t\tsuper(parent, invokingState);\r\n\t}\r\n\t// @Override\r\n\tpublic get ruleIndex(): number { return ExpressionParser.RULE_variable; }\r\n\t// @Override\r\n\tpublic enterRule(listener: ExpressionListener): void {\r\n\t\tif (listener.enterVariable) {\r\n\t\t\tlistener.enterVariable(this);\r\n\t\t}\r\n\t}\r\n\t// @Override\r\n\tpublic exitRule(listener: ExpressionListener): void {\r\n\t\tif (listener.exitVariable) {\r\n\t\t\tlistener.exitVariable(this);\r\n\t\t}\r\n\t}\r\n\t// @Override\r\n\tpublic accept<Result>(visitor: ExpressionVisitor<Result>): Result {\r\n\t\tif (visitor.visitVariable) {\r\n\t\t\treturn visitor.visitVariable(this);\r\n\t\t} else {\r\n\t\t\treturn visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nexport class RelopContext extends ParserRuleContext {\r\n\tpublic EQ(): TerminalNode | undefined { return this.tryGetToken(ExpressionParser.EQ, 0); }\r\n\tpublic GT(): TerminalNode | undefined { return this.tryGetToken(ExpressionParser.GT, 0); }\r\n\tpublic LT(): TerminalNode | undefined { return this.tryGetToken(ExpressionParser.LT, 0); }\r\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\r\n\t\tsuper(parent, invokingState);\r\n\t}\r\n\t// @Override\r\n\tpublic get ruleIndex(): number { return ExpressionParser.RULE_relop; }\r\n\t// @Override\r\n\tpublic enterRule(listener: ExpressionListener): void {\r\n\t\tif (listener.enterRelop) {\r\n\t\t\tlistener.enterRelop(this);\r\n\t\t}\r\n\t}\r\n\t// @Override\r\n\tpublic exitRule(listener: ExpressionListener): void {\r\n\t\tif (listener.exitRelop) {\r\n\t\t\tlistener.exitRelop(this);\r\n\t\t}\r\n\t}\r\n\t// @Override\r\n\tpublic accept<Result>(visitor: ExpressionVisitor<Result>): Result {\r\n\t\tif (visitor.visitRelop) {\r\n\t\t\treturn visitor.visitRelop(this);\r\n\t\t} else {\r\n\t\t\treturn visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n","import { ASTNode, ASTType } from './node';\r\n\r\nexport enum ASTOperator {\r\n    id = 'id',\r\n    plus = '+',\r\n    minus = '-',\r\n    mul = '*',\r\n    div = '/',\r\n    pow = '^'\r\n}\r\n\r\nexport class ASTExpressionNode extends ASTNode {\r\n    public operator: ASTOperator;\r\n    public type: ASTType.expression = ASTType.expression;\r\n    public children: ASTNode[];\r\n\r\n    public constructor(operator: ASTOperator, children: ASTNode[]) {\r\n        super(ASTType.expression);\r\n        this.children = children;\r\n        this.operator = operator;\r\n    }\r\n\r\n}","import { ASTNode, ASTType } from './node';\r\n\r\nexport class ASTSymbolNode extends ASTNode {\r\n    public symbol: string;\r\n    public type: ASTType.symbol = ASTType.symbol;\r\n\r\n    constructor(symbol: string) {\r\n        super(ASTType.symbol);\r\n        this.symbol = symbol;\r\n        this.name = symbol;\r\n    }\r\n}","import { ASTNode, ASTType } from './node';\r\n\r\nexport class ASTVariableNode extends ASTNode {\r\n    public variable: string;\r\n    public type: ASTType.variable = ASTType.variable;\r\n\r\n    constructor(variable: string) {\r\n        super(ASTType.variable);\r\n        this.variable = variable;\r\n        this.name = variable;\r\n    }\r\n}","// tslint:disable-next-line:no-submodule-imports\r\nimport { AbstractParseTreeVisitor } from 'antlr4ts/tree/AbstractParseTreeVisitor';\r\n// tslint:disable-next-line:no-submodule-imports\r\nimport { TerminalNode } from 'antlr4ts/tree/TerminalNode';\r\nimport {\r\n    AtomContext, ExpressionContext,\r\n    FileContext, RelopContext, ScientificContext, VariableContext\r\n} from './generated/ExpressionParser';\r\nimport { ExpressionVisitor } from './generated/ExpressionVisitor';\r\nimport { ASTExpressionNode, ASTOperator } from './nodes/expressionNode';\r\nimport { ASTNode, ASTType } from './nodes/node';\r\nimport { ASTNullNode } from './nodes/nullNode';\r\nimport { ASTNumberNode } from './nodes/numberNode';\r\nimport { ASTSymbolNode } from './nodes/symbolNode';\r\nimport { ASTVariableNode } from './nodes/variableNode';\r\n\r\nexport class ASTVisitor\r\n    extends AbstractParseTreeVisitor<ASTNode[]>\r\n    implements ExpressionVisitor<ASTNode[]> {\r\n\r\n    public defaultResult() {\r\n        return [];\r\n    }\r\n\r\n    public aggregateResult(aggregate: ASTNode[], nextResult: ASTNode[]) {\r\n        return [...aggregate, ...nextResult];\r\n    }\r\n\r\n    public visitVariable(context: VariableContext): ASTNode[] {\r\n        return [new ASTVariableNode(context.text)];\r\n    }\r\n\r\n    public visitScientific(context: ScientificContext): ASTNode[] {\r\n        return [new ASTNumberNode(parseFloat(context.text))];\r\n    }\r\n\r\n    public visitAtom(context: AtomContext): ASTNode[] {\r\n        return super.visitChildren(context);\r\n    }\r\n\r\n    public visitExpression(context: ExpressionContext): ASTNode[] {\r\n        const children = super.visitChildren(context);\r\n\r\n        /* if (context.children) {\r\n            if (children.length === 1 && context.children[0].text === '(') {\r\n                return children;\r\n            }\r\n        } */\r\n        // if (children.length === 1) {\r\n        return [new ASTExpressionNode(ASTOperator.id, children)];\r\n        // } else if (children.length === 2) {\r\n        //     if (children[0].type === ASTType.symbol) {\r\n        //         switch(children[0].type.)\r\n        //     }\r\n        // }\r\n    }\r\n    \r\n    public visitFile(context: FileContext): ASTNode[] {\r\n        return super.visitChildren(context);\r\n    }\r\n\r\n    public visitRelop(context: RelopContext): ASTNode[] {\r\n        return super.visitChildren(context);\r\n    }\r\n\r\n    public visitTerminal(node: TerminalNode) {\r\n        if (node.symbol.text) {\r\n            return [new ASTSymbolNode(node.symbol.text)];\r\n        }\r\n        return [];\r\n    }\r\n}","import { ANTLRInputStream, CommonToken, CommonTokenStream } from 'antlr4ts';\r\nimport { ErrorListener } from './errorListener';\r\nimport { ExpressionLexer } from './generated/ExpressionLexer';\r\nimport { ExpressionParser, FileContext } from './generated/ExpressionParser';\r\nimport { ASTVisitor } from './visitor';\r\n\r\nexport class Parser {\r\n\r\n    private _tree: FileContext;\r\n    private _parser: ExpressionParser;\r\n    private _lexer: ExpressionLexer;\r\n    private _errorListener: ErrorListener;\r\n\r\n    public constructor(str: string) {\r\n        this._errorListener = new ErrorListener();\r\n        // Create the lexer and parser\r\n        const inputStream = new ANTLRInputStream(str);\r\n        this._lexer = new ExpressionLexer(inputStream);\r\n        const tokenStream = new CommonTokenStream(this._lexer);\r\n        this._parser = new ExpressionParser(tokenStream);\r\n        this._parser.addErrorListener(this._errorListener);\r\n\r\n        // Parse the input, where `compilationUnit` is whatever entry point you defined\r\n        this._tree = this._parser.file();\r\n        if (this._errorListener.errors.length > 0) {\r\n            throw this._errorListener.errors;\r\n        }\r\n    }\r\n\r\n    public toString() {\r\n        return this._tree.toStringTree(this._parser.ruleNames);\r\n    }\r\n\r\n    public getTree() {\r\n        const visitor = new ASTVisitor();\r\n        return visitor.visit(this._tree);\r\n    }\r\n\r\n    public getRuleNames() {\r\n        return this._parser.ruleNames;\r\n    }\r\n}","import _ from 'lodash';\r\nimport { applyAssociative } from '../engine/assocative';\r\nimport { removeBrackets } from '../engine/brackets';\r\nimport { removeIdentities } from '../engine/identity';\r\nimport { likeTerms } from '../engine/likeTerms';\r\nimport { applyNumerical } from '../engine/numerical';\r\nimport { orderNode } from '../engine/ordering';\r\nimport { powerSimplify } from '../engine/power';\r\nimport { powerSimplify2 } from '../engine/power2';\r\nimport { printNode } from '../engine/printing';\r\nimport { NodeType, simplifyInput } from '../engine/simplification';\r\nimport { smartSimplify } from '../engine/smartSimplify';\r\nimport { isUndefined } from '../engine/undefined';\r\nimport { ParserError } from '../parsing/errorListener';\r\nimport { ASTType } from '../parsing/nodes/node';\r\nimport { Parser } from '../parsing/parser';\r\nimport { clearHistory as clearConsoleHistory } from '../stores/console/actionCreators';\r\nimport store from '../stores/store';\r\nimport { clearHistory as clearTreeHistory, updateTree } from '../stores/tree/actionCreators';\r\nimport { getTree } from '../stores/tree/selectors';\r\n\r\nexport function execute(input: string): { output: string, error?: string } | undefined {\r\n    const tokens = input.split(' ');\r\n    switch (tokens[0]) {\r\n        case '/clear':\r\n            store.dispatch(clearConsoleHistory());\r\n            store.dispatch(clearTreeHistory());\r\n            return;\r\n        case '/parse':\r\n            try {\r\n                const parser = new Parser(tokens.slice(1).join(' '));\r\n                store.dispatch(updateTree(parser.getTree(), parser.getRuleNames()));\r\n                return { output: 'parsed: ' + parser.toString() };\r\n            } catch (err) {\r\n                return { output: '', error: err.map((e: ParserError) => e.message).join('\\n') };\r\n            }\r\n        case '/p':\r\n            try {\r\n                const parser = new Parser(tokens.slice(1).join(' '));\r\n                const newTree = simplifyInput(parser.getTree()[0] as NodeType);\r\n                if (newTree) {\r\n                    store.dispatch(updateTree([newTree], parser.getRuleNames()));\r\n                }\r\n                return { output: 'parsed: ' + parser.toString() };\r\n            } catch (err) {\r\n                return { output: '', error: err.map((e: ParserError) => e.message).join('\\n') };\r\n            }\r\n            case '/p2':\r\n                try {\r\n                    const parser = new Parser(tokens.slice(1).join(' '));\r\n                    let newTree = simplifyInput(parser.getTree()[0] as NodeType);\r\n                    newTree = applyAssociative(newTree as NodeType);\r\n                    // newTree = applyNumerical(newTree as NodeType);\r\n                    newTree = orderNode(newTree as NodeType);\r\n                    if (newTree) {\r\n                        store.dispatch(updateTree([newTree], parser.getRuleNames()));\r\n                    }\r\n                    return { output: 'parsed: ' + parser.toString() };\r\n                } catch (err) {\r\n                    return { output: '', error: err.map((e: ParserError) => e.message).join('\\n') };\r\n                }\r\n        case '/simplify': {\r\n            const tree = _.cloneDeep(getTree(store.getState()));\r\n            if (tree) {\r\n                const newTree = simplifyInput(tree.tree[0] as NodeType);\r\n                if (newTree) {\r\n                    store.dispatch(updateTree([newTree], tree.ruleNames));\r\n                }\r\n                return { output: 'Simplified to: ' + printNode(newTree as NodeType) };\r\n            } else {\r\n                return { output: '', error: `Nothing to simplify` };\r\n            }\r\n        }\r\n        case '/associative': {\r\n            const tree = _.cloneDeep(getTree(store.getState()));\r\n            if (tree) {\r\n                const newTree = applyAssociative(tree.tree[0] as NodeType);\r\n                if (newTree) {\r\n                    store.dispatch(updateTree([newTree], tree.ruleNames));\r\n                }\r\n                return { output: 'Result: ' + printNode(newTree as NodeType) };\r\n            } else {\r\n                return { output: '', error: `Nothing to apply rule to` };\r\n            }\r\n        }\r\n        case '/identity': {\r\n            const tree = _.cloneDeep(getTree(store.getState()));\r\n            if (tree) {\r\n                const newTree = removeIdentities(tree.tree[0] as NodeType);\r\n                if (newTree) {\r\n                    store.dispatch(updateTree([newTree], tree.ruleNames));\r\n                }\r\n                return { output: 'Result: ' + printNode(newTree as NodeType) };\r\n            } else {\r\n                return { output: '', error: `Nothing to apply rule to` };\r\n            }\r\n        }\r\n        case '/power': {\r\n            const tree = _.cloneDeep(getTree(store.getState()));\r\n            if (tree) {\r\n                const newTree = powerSimplify(tree.tree[0] as NodeType);\r\n                if (newTree) {\r\n                    store.dispatch(updateTree([newTree], tree.ruleNames));\r\n                }\r\n                return { output: 'Result: ' + printNode(newTree as NodeType) };\r\n            } else {\r\n                return { output: '', error: `Nothing to apply rule to` };\r\n            }\r\n        }\r\n        case '/brackets': {\r\n            const tree = _.cloneDeep(getTree(store.getState()));\r\n            if (tree) {\r\n                const newTree = removeBrackets(tree.tree[0] as NodeType);\r\n                if (newTree) {\r\n                    store.dispatch(updateTree([newTree], tree.ruleNames));\r\n                }\r\n                return { output: 'Result: ' + printNode(newTree as NodeType) };\r\n            } else {\r\n                return { output: '', error: `Nothing to apply rule to` };\r\n            }\r\n        }\r\n        case '/defined': {\r\n            const tree = _.cloneDeep(getTree(store.getState()));\r\n            const check = _.cloneDeep(getTree(store.getState()));\r\n            if (tree && check) {\r\n                if ((isUndefined(check.tree[0] as NodeType) as NodeType).type === ASTType.null) {\r\n                    return { output: 'Result: the expression is undefined' };\r\n                }\r\n                return { output: 'Result: ' + printNode(tree.tree[0] as NodeType) };\r\n            } else {\r\n                return { output: '', error: `Nothing to apply rule to` };\r\n            }\r\n        }\r\n        case '/numerical': {\r\n            const tree = _.cloneDeep(getTree(store.getState()));\r\n            if (tree) {\r\n                const newTree = applyNumerical(tree.tree[0] as NodeType);\r\n                if (newTree) {\r\n                    store.dispatch(updateTree([newTree], tree.ruleNames));\r\n                }\r\n                return { output: 'Result: ' + printNode(newTree as NodeType) };\r\n            } else {\r\n                return { output: '', error: `Nothing to apply rule to` };\r\n            }\r\n        }\r\n        case '/order': {\r\n            const tree = _.cloneDeep(getTree(store.getState()));\r\n            if (tree) {\r\n                const newTree = orderNode(tree.tree[0] as NodeType);\r\n                if (newTree) {\r\n                    store.dispatch(updateTree([newTree], tree.ruleNames));\r\n                }\r\n                return { output: 'Result: ' + printNode(newTree as NodeType) };\r\n            } else {\r\n                return { output: '', error: `Nothing to apply rule to` };\r\n            }\r\n        }\r\n        case '/likeTerms': {\r\n            const tree = _.cloneDeep(getTree(store.getState()));\r\n            if (tree) {\r\n                const newTree = likeTerms(tree.tree[0] as NodeType);\r\n                if (newTree) {\r\n                    store.dispatch(updateTree([newTree], tree.ruleNames));\r\n                }\r\n                return { output: 'Result: ' + printNode(newTree as NodeType) };\r\n            } else {\r\n                return { output: '', error: `Nothing to apply rule to` };\r\n            }\r\n        }\r\n        case '/model1': {\r\n            try {\r\n                const parser = new Parser(tokens.slice(1).join(' '));\r\n                store.dispatch(updateTree(parser.getTree(), parser.getRuleNames()));\r\n                const tree = _.cloneDeep(store.dispatch(updateTree(parser.getTree(), parser.getRuleNames())));\r\n                if (tree) {\r\n                    const newTree = simplifyInput(tree.tree[0] as NodeType);\r\n                    if (newTree) {\r\n                        store.dispatch(updateTree([newTree], tree.ruleNames));\r\n                    }\r\n                    let root = _.cloneDeep(newTree);\r\n                    const check = _.cloneDeep(newTree);\r\n                    for (let i = 0; i < 100; i++) {\r\n                        if (check && (isUndefined(check) as NodeType).type === ASTType.null) {\r\n                            return { output: 'Result: the expression is undefined' };\r\n                        }\r\n                        if (root) {\r\n                            root = applyAssociative(root as NodeType);\r\n                            root = removeIdentities(root as NodeType);\r\n                            root = powerSimplify(root as NodeType);\r\n                            root = removeBrackets(root as NodeType);\r\n                            root = likeTerms(root as NodeType);\r\n                            root = applyNumerical(root as NodeType);\r\n                        }\r\n                    }\r\n                    return { output: 'Result: ' + printNode(root as NodeType) };\r\n                } else {\r\n                    return { output: '', error: `Nothing to apply rule to` };\r\n                }\r\n            } catch (err) {\r\n                return { output: '', error: err.map((e: ParserError) => e.message).join('\\n') };\r\n            }\r\n        }\r\n        case '/power2': {\r\n            const tree = _.cloneDeep(getTree(store.getState())); \r\n            if (tree) {\r\n                const newTree = powerSimplify2(tree.tree[0] as NodeType);\r\n                if (newTree) {\r\n                    store.dispatch(updateTree([newTree], tree.ruleNames));\r\n                }\r\n                return { output: 'Result: ' + printNode(newTree as NodeType) };\r\n            } else {\r\n                return { output: '', error: `Nothing to apply rule to` };\r\n            }\r\n        }\r\n        case '/smart': {\r\n            const tree = _.cloneDeep(getTree(store.getState())); \r\n            if (tree) {\r\n                const newTree = smartSimplify(tree.tree[0] as NodeType);\r\n                if (newTree) {\r\n                    store.dispatch(updateTree([newTree], tree.ruleNames));\r\n                }\r\n                return { output: 'Result: ' + printNode(newTree as NodeType) };\r\n            } else {\r\n                return { output: '', error: `Nothing to apply rule to` };\r\n            }\r\n        }\r\n        default:\r\n            return { output: '', error: `Command '${tokens[0]}' not recognized` };\r\n    }\r\n\r\n}","// tslint:disable-next-line:no-submodule-imports\r\nimport { all, call, put, putResolve, select, takeEvery } from 'redux-saga/effects';\r\nimport * as consoleCache from '../../cache/consoleCache';\r\nimport * as inputHandler from '../../inputHandling/inputHandler';\r\nimport { addToInputHistory, addToLog, saveHistory as saveHistoryAction, setHistory } from './actionCreators';\r\nimport { ActionTypeNames, ExecuteInputAction } from './actions';\r\nimport { getInputHistory, getLines } from './selectors';\r\n\r\nfunction* watchExecuteInput() {\r\n    yield takeEvery(ActionTypeNames.ExecuteInput, executeInput);\r\n}\r\n\r\nfunction* executeInput(action: ExecuteInputAction) {\r\n    yield all([\r\n        putResolve(addToLog({ isInput: true, line: action.input, isError: false })),\r\n        putResolve(addToInputHistory(action.input))\r\n    ]);\r\n\r\n    const res: { output: string, error?: string } | undefined = yield call(inputHandler.execute, action.input);\r\n\r\n    if (res) {\r\n        const { output, error } = res;\r\n        if (error) {\r\n            yield all(\r\n                error.split('\\n').map(\r\n                    (line) => putResolve(\r\n                        addToLog({ isInput: false, line, isError: true })\r\n                    )\r\n                )\r\n            );\r\n        } else {\r\n            yield all(\r\n                output.split('\\n').map(\r\n                    (line) => putResolve(\r\n                        addToLog({ isInput: false, line, isError: false })\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    yield put(saveHistoryAction());\r\n}\r\n\r\nfunction* watchLoadHistory() {\r\n    yield takeEvery(ActionTypeNames.LoadHistory, loadHistory);\r\n}\r\n\r\nexport function* loadHistory() {\r\n    const state = yield call(consoleCache.loadHistory);\r\n    yield putResolve(setHistory(state));\r\n}\r\n\r\nfunction* watchClearHistory() {\r\n    yield takeEvery(ActionTypeNames.ClearHistory, clearHistory);\r\n}\r\n\r\nfunction* clearHistory() {\r\n    yield putResolve(setHistory({ lines: [], inputHistory: [] }));\r\n    yield put(saveHistoryAction());\r\n}\r\n\r\nfunction* watchSaveHistory() {\r\n    yield takeEvery(ActionTypeNames.SaveHistory, saveHistory);\r\n}\r\n\r\nfunction* saveHistory() {\r\n    const lines = yield select(getLines);\r\n    const inputHistory = yield select(getInputHistory);\r\n\r\n    yield call(consoleCache.saveHistory, { lines, inputHistory });\r\n}\r\n\r\nexport default [watchExecuteInput, watchLoadHistory, watchSaveHistory, watchClearHistory];","import State from '../stores/tree/state';\r\n\r\nexport function saveHistory(history: State) {\r\n    localStorage.setItem('treeCache', JSON.stringify(history));\r\n}\r\n\r\nexport function loadHistory() {\r\n    const history = localStorage.getItem('treeCache');\r\n    if (history) {\r\n        return JSON.parse(history) as State;\r\n    } else {\r\n        return { history: [], index: -1 };\r\n    }\r\n}","// tslint:disable-next-line:no-submodule-imports\r\nimport { all, call, put, putResolve, select, takeEvery } from 'redux-saga/effects';\r\nimport * as treeCache from '../../cache/treeCache';\r\nimport * as inputHandler from '../../inputHandling/inputHandler';\r\nimport { addToHistory, saveHistory as saveHistoryAction, setHistory } from './actionCreators';\r\nimport { ActionTypeNames, UpdateTreeAction } from './actions';\r\n\r\nfunction* watchUpdateTree() {\r\n    yield takeEvery(ActionTypeNames.UpdateTree, updateTree);\r\n}\r\n\r\nfunction* updateTree(action: UpdateTreeAction) {\r\n    yield putResolve(addToHistory(action.tree, action.ruleNames));\r\n    yield put(saveHistoryAction());\r\n}\r\n\r\nfunction* watchLoadHistory() {\r\n    yield takeEvery(ActionTypeNames.LoadHistory, loadHistory);\r\n}\r\n\r\nexport function* loadHistory() {\r\n    const state = yield call(treeCache.loadHistory);\r\n    yield putResolve(setHistory(state));\r\n}\r\n\r\nfunction* watchClearHistory() {\r\n    yield takeEvery(ActionTypeNames.ClearHistory, clearHistory);\r\n}\r\n\r\nfunction* clearHistory() {\r\n    yield putResolve(setHistory({ history: [], index: -1 }));\r\n    yield put(saveHistoryAction());\r\n}\r\n\r\nfunction* watchSaveHistory() {\r\n    yield takeEvery(ActionTypeNames.SaveHistory, saveHistory);\r\n}\r\n\r\nfunction* saveHistory() {\r\n    const treeState = yield select((state) => state.tree);\r\n\r\n    yield call(treeCache.saveHistory, treeState);\r\n}\r\n\r\nexport default [watchUpdateTree, watchLoadHistory, watchSaveHistory, watchClearHistory];","import { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\n// tslint:disable-next-line:no-submodule-imports\r\nimport { all, fork } from 'redux-saga/effects';\r\n\r\nimport consoleReducer from './console/reducer';\r\nimport treeReducer from './tree/reducer';\r\n\r\nimport consoleSagas, { loadHistory as loadConsoleHistory } from './console/sagas';\r\nimport treeSagas, { loadHistory as loadTreeHistory } from './tree/sagas';\r\n\r\n// Import all watching sagas\r\nconst watchSagas = [...consoleSagas, ...treeSagas];\r\n\r\n// Set up root reducer\r\nconst reducers = {\r\n    console: consoleReducer,\r\n    tree: treeReducer,\r\n};\r\n\r\nconst rootReducer = combineReducers(reducers);\r\n\r\nexport type RootState = {\r\n    [P in keyof typeof reducers]: ReturnType<typeof reducers[P]>;\r\n};\r\n\r\nfunction* rootSaga() {\r\n    // initialize data\r\n    yield fork(loadConsoleHistory);\r\n    yield fork(loadTreeHistory);\r\n\r\n    yield all(watchSagas.map((saga) => saga()));\r\n}\r\n\r\n// Create store\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst store = createStore(\r\n    rootReducer, process.env.NODE_ENV === 'development' ?\r\n        composeWithDevTools(applyMiddleware(sagaMiddleware)) :\r\n        applyMiddleware(sagaMiddleware)\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport './App.scss';\r\nimport Topbar from './components/top/Topbar';\r\n\r\nimport ConsoleView from './components/console/ConsoleView';\r\nimport TreeView from './components/tree/TreeView';\r\nimport { addToLog } from './stores/console/actionCreators';\r\nimport store from './stores/store';\r\n\r\nexport default class App extends React.Component {\r\n    public componentDidCatch(error: Error, info: React.ErrorInfo) {\r\n        // tslint:disable-next-line:no-console\r\n        console.error(error, error.stack, info.componentStack);\r\n        store.dispatch(addToLog({\r\n            isError: true,\r\n            isInput: false,\r\n            line: error.message,\r\n        }));\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <Provider store={store}>\r\n                <React.Fragment>\r\n                    <Topbar><h3>Test</h3></Topbar>\r\n                    <TreeView />\r\n                    <ConsoleView />\r\n                </React.Fragment>\r\n            </Provider>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faArrowRight, faRedo, faTrashAlt, faUndo } from '@fortawesome/free-solid-svg-icons';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nlibrary.add({\r\n    faArrowRight,\r\n    faRedo,\r\n    faTrashAlt,\r\n    faUndo,\r\n});\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}