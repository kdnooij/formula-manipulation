{"version":3,"sources":["stores/tree/actions.ts","stores/tree/actionCreators.ts","stores/tree/selectors.ts","stores/console/actions.ts","components/top/TopbarButton.tsx","components/top/Controls.tsx","components/top/Topbar.tsx","stores/console/actionCreators.ts","stores/console/selectors.ts","parsing/nodes/node.ts","components/console/ConsoleInput.tsx","components/console/HeaderButton.tsx","components/console/Controls.tsx","components/console/LogView.tsx","components/console/ConsoleView.tsx","engine/printing.ts","components/tree/TreeView.tsx","stores/console/reducer.ts","stores/tree/reducer.ts","cache/consoleCache.ts","engine/assocative.ts","parsing/nodes/productNode.ts","parsing/nodes/summationNode.ts","engine/brackets.ts","parsing/nodes/numberNode.ts","parsing/nodes/powerNode.ts","engine/differentiate.ts","parsing/nodes/variableNode.ts","engine/finalPrint.ts","engine/hashing.ts","engine/identity.ts","engine/integrate.ts","engine/likeTerms.ts","engine/numerical.ts","engine/ordering.ts","engine/power.ts","engine/removeSingles.ts","engine/simplification.ts","engine/smartSimplify.ts","engine/toPolynomial.ts","engine/powerToProduct.ts","parsing/nodes/nullNode.ts","engine/undefined.ts","parsing/errorListener.ts","parsing/generated/ExpressionLexer.ts","parsing/generated/ExpressionParser.ts","parsing/nodes/expressionNode.ts","parsing/nodes/symbolNode.ts","parsing/visitor.ts","parsing/parser.ts","inputHandling/inputHandler.ts","inputHandling/testModels.ts","stores/console/sagas.ts","cache/treeCache.ts","stores/tree/sagas.ts","stores/store.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["ActionTypeNames","updateTree","tree","ruleNames","type","UpdateTree","setHistory","state","history","SetHistory","saveHistory","SaveHistory","canUndo","index","canRedo","length","getTree","undefined","TopbarButton","this","props","name","id","icon","onClickButton","rest","NavItem","Button","replace","onClick","UncontrolledTooltip","target","React","Controls","Form","inline","onSubmit","e","preventDefault","color","className","disabled","undo","redo","connect","dispatch","Redo","Undo","Topbar","Navbar","light","NavbarBrand","href","Nav","navbar","addToLog","line","AddToLog","clearHistory","ClearHistory","ASTType","getLines","console","lines","getInputHistory","inputHistory","canClear","ConsoleInput","cycle","key","cycleIndex","setState","input","tempInput","execute","executeInput","handleInputChange","event","value","Input","onChange","onKeyDown","d","$","scrollTop","prop","ExecuteInput","HeaderButton","size","clear","LogView","map","isInput","isError","ConsoleView","Container","ASTNode","hash","prettyPrintNode","node","null","variable","number","toString","expression","children","c","join","symbol","power","checkNodeType","summation","child","slice","str","_i","substring","product","TreeView","svg","width","data","root","hierarchy","dx","dy","height","d3","nodeSize","chart","x0","Infinity","x1","each","x","attr","g","append","selectAll","links","y","descendants","style","text","clone","lower","fluid","ref","element","select","remove","initialState","localStorage","setItem","JSON","stringify","loadHistory","getItem","parse","applyAssociative","_","flatten","ASTProductNode","ASTSummationNode","removeBrackets","i","newChildren","productBrackets","ASTNumberNode","ASTPowerNode","differentiate","differentiateSum","cloneDeep","differentiateProduct","differentiatePower","ASTVariableNode","endPrint","child1","child2","endPrintProduct","hashNode","forEach","generateHash","removeIdentities","compact","removeIdentitiesSummation","removeIdentitiesProduct","base","exp","removeIdentitiesPower","integrate","containX","integrateProduct","result","likeTerms","likeProduct","likeSum","applyNumerical","sum","push","applyNumericalSummation","unshift","applyNumericalProduct","Math","pow","applyNumericalPower","orderNode","sort","a","b","sortNode","sortNumerical","localeCompare","sortLexi","sortOnLast","res","sortPowers","Error","sortSubTrees","powerSimplify","powerNode","transformPower","base1","base2","transformPowerBase","removeSingles","removeSinglesProduct","simplifyInput","sI","operator","simplifyExpression","smartSimplify","ret","Map","n","has","val","get","mul","set","pair","smartSimplifySummation","smartSimplifyProduct","toPolynomial","childFlags","flag","powerToProduct2","Number","isInteger","newNode","some","term","constants","filter","terms","mergeTerms","sums","multiplySums","child0","distribute","every","ASTNullNode","isUndefined","undefinedProduct","exponent","undefinedPower","undefinedSum","ParseErrorLevel","ErrorListener","errors","error","_recognizer","offendingSymbol","charPositionInLine","msg","_e","end","level","ERROR","message","start","ExpressionLexer","_interp","LexerATNSimulator","_ATN","VOCABULARY","_serializedATN","channelNames","modeNames","__ATN","ATNDeserializer","deserialize","Utils","Lexer","VARIABLE","SCIENTIFIC_NUMBER","LPAREN","RPAREN","PLUS","MINUS","TIMES","DIV","GT","LT","EQ","POINT","POW","WS","_LITERAL_NAMES","_SYMBOLIC_NAMES","VocabularyImpl","ExpressionParser","ParserATNSimulator","_localctx","FileContext","_ctx","enterRule","RULE_file","enterOuterAlt","match","EOF","re","RecognitionException","exception","_errHandler","reportError","recover","exitRule","_p","_la","_parentctx","_parentState","ExpressionContext","enterRecursionRule","RULE_expression","_alt","sync","_input","LA","atom","NoViableAltException","_stop","tryLT","interpreter","adaptivePredict","ATN","INVALID_ALT_NUMBER","_parseListeners","triggerExitRuleEvent","pushNewRecursionContext","precpred","FailedPredicateException","recoverInline","Token","matchedEOF","reportMatch","consume","unrollRecursionContexts","AtomContext","RULE_atom","scientific","ScientificContext","RULE_scientific","VariableContext","RULE_variable","RelopContext","RULE_relop","ruleIndex","predIndex","expression_sempred","Parser","ASTOperator","parent","invokingState","getRuleContext","getToken","listener","enterFile","exitFile","visitor","visitFile","visitChildren","ParserRuleContext","getRuleContexts","tryGetToken","tryGetRuleContext","enterExpression","exitExpression","visitExpression","enterAtom","exitAtom","visitAtom","enterScientific","exitScientific","visitScientific","enterVariable","exitVariable","visitVariable","enterRelop","exitRelop","visitRelop","ASTExpressionNode","ASTSymbolNode","ASTVisitor","aggregate","nextResult","context","parseFloat","AbstractParseTreeVisitor","_tree","_parser","_lexer","_errorListener","inputStream","ANTLRInputStream","tokenStream","CommonTokenStream","addErrorListener","file","toStringTree","visit","tokens","split","store","clearConsoleHistory","parser","getRuleNames","output","err","newTree","getState","check","powerToProduct","lastHash","integratedTree","test","expected","out","testModel","derivativeTree","watchExecuteInput","watchLoadHistory","watchClearHistory","watchSaveHistory","takeEvery","action","all","putResolve","AddToInputHistory","call","inputHandler","put","saveHistoryAction","LoadHistory","consoleCache","watchUpdateTree","AddToHistory","treeCache","treeState","rootSaga","watchSagas","consoleSagas","treeSagas","reducers","rootReducer","combineReducers","fork","loadConsoleHistory","loadTreeHistory","saga","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","run","App","info","stack","componentStack","Fragment","Component","Boolean","window","location","hostname","library","add","faArrowRight","faRedo","faTrashAlt","faUndo","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7eb3c2e3.chunk.js","sourcesContent":["import { Action } from 'redux';\r\nimport { FileContext } from '../../parsing/generated/ExpressionParser';\r\nimport { ASTNode, NodeType } from '../../parsing/nodes/node';\r\nimport State from './state';\r\n\r\nexport enum ActionTypeNames {\r\n    UpdateTree = 'Tree/UpdateTree',\r\n    AddToHistory = 'Tree/AddToHistory',\r\n    Undo = 'Tree/Undo',\r\n    Redo = 'Tree/Redo',\r\n    ClearHistory = 'Tree/ClearHistory',\r\n    LoadHistory = 'Tree/LoadHistory',\r\n    SetHistory = 'Tree/SetHistory',\r\n    SaveHistory = 'Tree/SaveHistory',\r\n}\r\n\r\nexport type UpdateTreeAction = Action<ActionTypeNames.UpdateTree> & {\r\n    tree: NodeType[];\r\n    ruleNames: string[];\r\n};\r\n\r\nexport type AddToHistoryAction = Action<ActionTypeNames.AddToHistory> & {\r\n    tree: NodeType[];\r\n    ruleNames: string[];\r\n};\r\n\r\nexport type UndoAction = Action<ActionTypeNames.Undo>;\r\nexport type RedoAction = Action<ActionTypeNames.Redo>;\r\n\r\nexport type ClearHistoryAction = Action<ActionTypeNames.ClearHistory>;\r\nexport type LoadHistoryAction = Action<ActionTypeNames.LoadHistory>;\r\nexport type SetHistoryAction = Action<ActionTypeNames.SetHistory> & {\r\n    history: State\r\n};\r\nexport type SaveHistoryAction = Action<ActionTypeNames.SaveHistory>;\r\n","import { ASTNode, NodeType } from '../../parsing/nodes/node';\r\nimport {\r\n    ActionTypeNames,\r\n    AddToHistoryAction, ClearHistoryAction,\r\n    LoadHistoryAction, RedoAction, SaveHistoryAction, SetHistoryAction, UndoAction, UpdateTreeAction\r\n} from './actions';\r\nimport State from './state';\r\n\r\nexport function updateTree(tree: NodeType[], ruleNames: string[]): UpdateTreeAction {\r\n    return {\r\n        ruleNames,\r\n        tree,\r\n        type: ActionTypeNames.UpdateTree,\r\n    };\r\n}\r\n\r\nexport function addToHistory(tree: NodeType[], ruleNames: string[]): AddToHistoryAction {\r\n    return {\r\n        ruleNames,\r\n        tree,\r\n        type: ActionTypeNames.AddToHistory,\r\n    };\r\n}\r\n\r\nexport function undo(): UndoAction {\r\n    return {\r\n        type: ActionTypeNames.Undo,\r\n    };\r\n}\r\n\r\nexport function redo(): RedoAction {\r\n    return {\r\n        type: ActionTypeNames.Redo,\r\n    };\r\n}\r\n\r\nexport function clearHistory(): ClearHistoryAction {\r\n    return {\r\n        type: ActionTypeNames.ClearHistory\r\n    };\r\n}\r\n\r\nexport function loadHistory(): LoadHistoryAction {\r\n    return {\r\n        type: ActionTypeNames.LoadHistory\r\n    };\r\n}\r\n\r\nexport function setHistory(state: State): SetHistoryAction {\r\n    return {\r\n        history: state,\r\n        type: ActionTypeNames.SetHistory\r\n    };\r\n}\r\n\r\nexport function saveHistory(): SaveHistoryAction {\r\n    return {\r\n        type: ActionTypeNames.SaveHistory\r\n    };\r\n}","import { RootState } from '../store';\r\n\r\nexport const canUndo = (state: RootState) => state.tree.index > 0;\r\nexport const canRedo = (state: RootState) => (state.tree.index < state.tree.history.length - 1);\r\n\r\nexport const getTree = (state: RootState) => (state.tree.index >= 0 ? \r\n    state.tree.history[state.tree.index] : undefined);\r\n","import { Action } from 'redux';\r\nimport State, { LogLine } from './state';\r\n\r\nexport enum ActionTypeNames {\r\n    AddToLog = 'Console/Log',\r\n    ExecuteInput = 'Console/ExecuteInput',\r\n    AddToInputHistory = 'Console/AddToInputHistory',\r\n    ClearHistory = 'Console/ClearHistory',\r\n    LoadHistory = 'Console/LoadHistory',\r\n    SetHistory = 'Console/SetHistory',\r\n    SaveHistory = 'Console/SaveHistory'\r\n}\r\n\r\nexport type AddToLogAction = Action<ActionTypeNames.AddToLog> & {\r\n    line: LogLine\r\n};\r\n\r\nexport type ExecuteInputAction = Action<ActionTypeNames.ExecuteInput> & {\r\n    input: string\r\n};\r\n\r\nexport type AddToInputHistoryAction = Action<ActionTypeNames.AddToInputHistory> & {\r\n    input: string\r\n};\r\n\r\nexport type ClearHistoryAction = Action<ActionTypeNames.ClearHistory>;\r\nexport type LoadHistoryAction = Action<ActionTypeNames.LoadHistory>;\r\nexport type SetHistoryAction = Action<ActionTypeNames.SetHistory> & {\r\n    history: State\r\n};\r\nexport type SaveHistoryAction = Action<ActionTypeNames.SaveHistory>;\r\n","import { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { Button, ButtonProps, NavItem, UncontrolledTooltip } from 'reactstrap';\r\n\r\ninterface Props extends ButtonProps {\r\n    name: string;\r\n    icon: IconProp;\r\n    id?: string;\r\n    onClickButton?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;\r\n}\r\n\r\nclass TopbarButton extends React.Component<Props> {\r\n\r\n    public render() {\r\n        const { name, id, icon, onClickButton, ...rest} = this.props;\r\n\r\n        return (\r\n            <NavItem>\r\n                <Button\r\n                    {...rest}\r\n                    id={id ? id : `${name.replace(' ', '')}Button`}\r\n                    onClick={onClickButton}\r\n                >\r\n                    <FontAwesomeIcon icon={icon} />\r\n                    <UncontrolledTooltip target={id ? id : `${name.replace(' ', '')}Button`}>\r\n                        {name}\r\n                    </UncontrolledTooltip>\r\n                </Button>\r\n            </NavItem>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TopbarButton;","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Form } from 'reactstrap';\r\nimport { Dispatch } from 'redux';\r\nimport { RootState } from '../../stores/store';\r\nimport { redo, undo } from '../../stores/tree/actionCreators';\r\nimport { canRedo, canUndo } from '../../stores/tree/selectors';\r\nimport TopbarButton from './TopbarButton';\r\n\r\ninterface Props {\r\n    canUndo: boolean;\r\n    canRedo: boolean;\r\n\r\n    undo: () => void;\r\n    redo: () => void;\r\n}\r\n\r\nclass Controls extends React.Component<Props> {\r\n    public render() {\r\n        return (\r\n            <Form inline={true} onSubmit={(e) => e.preventDefault()}>\r\n                <TopbarButton\r\n                    id=\"Undo\"\r\n                    name=\"Undo last action\"\r\n                    icon=\"undo\"\r\n                    color=\"primary\"\r\n                    className=\"mr-sm-2\"\r\n                    disabled={!this.props.canUndo}\r\n                    onClickButton={this.props.undo}\r\n                />\r\n                <TopbarButton\r\n                    id=\"Redo\"\r\n                    name=\"Redo\"\r\n                    icon=\"redo\"\r\n                    color=\"primary\"\r\n                    className=\"mr-sm-2\"\r\n                    disabled={!this.props.canRedo}\r\n                    onClickButton={this.props.redo}\r\n                />\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    canRedo: canRedo(state),\r\n    canUndo: canUndo(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    redo: () => dispatch(redo()),\r\n    undo: () => dispatch(undo()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Controls);","import * as React from 'react';\r\nimport { Nav, Navbar, NavbarBrand } from 'reactstrap';\r\nimport Controls from './Controls';\r\n\r\nclass Topbar extends React.Component {\r\n    public render() {\r\n        return (\r\n            <Navbar color=\"light\" light={true} >\r\n                <NavbarBrand href=\"/\">\r\n                    Formula Handling - Group 8\r\n                </NavbarBrand>\r\n                <Nav navbar={true}>\r\n                    <Controls />\r\n                </Nav>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Topbar;","import {\r\n    ActionTypeNames, AddToInputHistoryAction, AddToLogAction, \r\n    ClearHistoryAction, ExecuteInputAction, LoadHistoryAction,\r\n    SaveHistoryAction, SetHistoryAction\r\n} from './actions';\r\nimport State, { LogLine } from './state';\r\n\r\nexport function addToLog(line: LogLine): AddToLogAction {\r\n    return {\r\n        line,\r\n        type: ActionTypeNames.AddToLog,\r\n    };\r\n}\r\n\r\nexport function executeInput(input: string): ExecuteInputAction {\r\n    return {\r\n        input,\r\n        type: ActionTypeNames.ExecuteInput\r\n    };\r\n}\r\n\r\nexport function addToInputHistory(input: string): AddToInputHistoryAction {\r\n    return {\r\n        input,\r\n        type: ActionTypeNames.AddToInputHistory\r\n    };\r\n}\r\n\r\nexport function clearHistory(): ClearHistoryAction {\r\n    return {\r\n        type: ActionTypeNames.ClearHistory\r\n    };\r\n}\r\n\r\nexport function loadHistory(): LoadHistoryAction {\r\n    return {\r\n        type: ActionTypeNames.LoadHistory\r\n    };\r\n}\r\n\r\nexport function setHistory(state: State): SetHistoryAction {\r\n    return {\r\n        history: state,\r\n        type: ActionTypeNames.SetHistory\r\n    };\r\n}\r\n\r\nexport function saveHistory(): SaveHistoryAction {\r\n    return {\r\n        type: ActionTypeNames.SaveHistory\r\n    };\r\n}","import { RootState } from '../store';\r\n\r\nexport const getLines = (state: RootState) => state.console.lines;\r\nexport const getInputHistory = (state: RootState) => state.console.inputHistory;\r\nexport const canClear = (state: RootState) => state.console.lines.length > 0;","import { ASTExpressionNode } from './expressionNode';\r\nimport { ASTNullNode } from './nullNode';\r\nimport { ASTNumberNode } from './numberNode';\r\nimport { ASTPowerNode } from './powerNode';\r\nimport { ASTProductNode } from './productNode';\r\nimport { ASTSummationNode } from './summationNode';\r\nimport { ASTSymbolNode } from './symbolNode';\r\nimport { ASTVariableNode } from './variableNode';\r\n\r\nexport enum ASTType {\r\n    null = 'null',\r\n    expression = 'expression',\r\n    number = 'number',\r\n    variable = 'variable',\r\n    symbol = 'symbol',\r\n    summation = 'summation',\r\n    product = 'product',\r\n    power = 'power',\r\n}\r\n\r\nexport type NodeType = ASTNullNode | ASTNumberNode | ASTVariableNode | ASTSymbolNode |\r\n    ASTExpressionNode | ASTSummationNode | ASTProductNode | ASTPowerNode ;\r\n\r\nexport abstract class ASTNode {\r\n    public name: string;\r\n    public hash?: string;\r\n\r\n    constructor(type: string) {\r\n        this.name = type;\r\n    }\r\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport $ from 'jquery';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Form, Input } from 'reactstrap';\r\nimport { Dispatch } from 'redux';\r\nimport { executeInput } from '../../stores/console/actionCreators';\r\nimport { getInputHistory } from '../../stores/console/selectors';\r\nimport { RootState } from '../../stores/store';\r\n\r\ninterface Props {\r\n    inputHistory: string[];\r\n\r\n    executeInput: typeof executeInput;\r\n}\r\n\r\ninterface State {\r\n    input: string;\r\n    cycleIndex: number;\r\n    tempInput?: string;\r\n}\r\n\r\nclass ConsoleInput extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            cycleIndex: -1,\r\n            input: '',\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <Form inline={true} onSubmit={(e) => { e.preventDefault(); this.execute(); }}>\r\n                <Input value={this.state.input} onChange={this.handleInputChange} onKeyDown={this.cycle} />\r\n                <Button onClick={this.execute}>\r\n                    <FontAwesomeIcon icon=\"arrow-right\" />\r\n                </Button>\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    public componentDidUpdate() {\r\n        // Scroll to bottom\r\n        const d = $('.LogView');\r\n        d.scrollTop(d.prop('scrollHeight'));\r\n    }\r\n\r\n    public componentDidMount() {\r\n        // Scroll to bottom\r\n        const d = $('.LogView');\r\n        d.scrollTop(d.prop('scrollHeight'));\r\n    }\r\n\r\n    private cycle = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'ArrowUp') {\r\n            if (this.state.cycleIndex === -1) {\r\n                const index = this.props.inputHistory.length - 1;\r\n                if (index > -1) {\r\n                    this.setState({\r\n                        cycleIndex: index,\r\n                        input: this.props.inputHistory[index],\r\n                        tempInput: this.state.input,\r\n                    });\r\n                }\r\n            } else if (this.state.cycleIndex === 0) {\r\n                const index = this.props.inputHistory.length - 1;\r\n                this.setState({\r\n                    cycleIndex: -1,\r\n                    input: this.state.tempInput || '',\r\n                });\r\n            } else {\r\n                const index = this.state.cycleIndex - 1;\r\n                this.setState({\r\n                    cycleIndex: index,\r\n                    input: this.props.inputHistory[index],\r\n                });\r\n            }\r\n        } else if (e.key === 'ArrowDown') {\r\n            if (this.state.cycleIndex === -1) {\r\n                const index = 0;\r\n                if (this.props.inputHistory.length > 0) {\r\n                    this.setState({\r\n                        cycleIndex: index,\r\n                        input: this.props.inputHistory[index],\r\n                        tempInput: this.state.input,\r\n                    });\r\n                }\r\n            } else if (this.state.cycleIndex === this.props.inputHistory.length - 1) {\r\n                this.setState({\r\n                    cycleIndex: -1,\r\n                    input: this.state.tempInput || '',\r\n                });\r\n            } else {\r\n                const index = this.state.cycleIndex + 1;\r\n                this.setState({\r\n                    cycleIndex: index,\r\n                    input: this.props.inputHistory[index],\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private execute = () => {\r\n        this.props.executeInput(this.state.input);\r\n        this.setState({ input: '' });\r\n    }\r\n\r\n    private handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            cycleIndex: -1,\r\n            input: event.target.value,\r\n            tempInput: undefined,\r\n        });\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    inputHistory: getInputHistory(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    executeInput: (input: string) => dispatch(executeInput(input)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConsoleInput);\r\n","import { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { Button, ButtonProps, UncontrolledTooltip } from 'reactstrap';\r\n\r\ninterface Props extends ButtonProps {\r\n    name: string;\r\n    icon: IconProp;\r\n    id?: string;\r\n    onClickButton?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;\r\n}\r\n\r\nclass HeaderButton extends React.Component<Props> {\r\n\r\n    public render() {\r\n        const { name, id, icon, onClickButton, ...rest } = this.props;\r\n\r\n        return (\r\n            <Button\r\n                size={'sm'}\r\n                {...rest}\r\n                id={id ? id : `${name.replace(' ', '')}Button`}\r\n                onClick={onClickButton}\r\n            >\r\n                <FontAwesomeIcon icon={icon} />\r\n                <UncontrolledTooltip target={id ? id : `${name.replace(' ', '')}Button`}>\r\n                    {name}\r\n                </UncontrolledTooltip>\r\n            </Button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HeaderButton;","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { clearHistory } from '../../stores/console/actionCreators';\r\nimport { canClear } from '../../stores/console/selectors';\r\nimport { RootState } from '../../stores/store';\r\nimport HeaderButton from './HeaderButton';\r\n\r\ninterface Props {\r\n    canClear: boolean;\r\n\r\n    clear: () => void;\r\n}\r\n\r\nclass Controls extends React.Component<Props> {\r\n    public render() {\r\n        return (\r\n            <HeaderButton\r\n                id=\"Clear\"\r\n                name=\"Clear\"\r\n                icon=\"trash-alt\"\r\n                color=\"danger\"\r\n                disabled={!this.props.canClear}\r\n                onClickButton={this.props.clear}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    canClear: canClear(state)\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    clear: () => dispatch(clearHistory())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Controls);","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getLines } from '../../stores/console/selectors';\r\nimport { LogLine } from '../../stores/console/state';\r\nimport { RootState } from '../../stores/store';\r\n\r\ninterface Props {\r\n    lines: LogLine[];\r\n}\r\n\r\nclass LogView extends React.Component<Props> {\r\n    public render() {\r\n        return (\r\n            <div className=\"LogView\">\r\n                {this.props.lines.map((line, index) => {\r\n                    if (line.isInput) {\r\n                        return (\r\n                            <p key={index}>\r\n                                <code className=\"input\">\r\n                                    {'> ' + line.line}\r\n                                </code>\r\n                            </p>\r\n                        );\r\n                    } else {\r\n                        if (line.isError) {\r\n                            return (\r\n                                <p key={index}><code className=\"error\">{line.line}</code></p>\r\n                            );\r\n                        } else {\r\n                            return (\r\n                                <p key={index}><code className=\"output\">{line.line}</code></p>\r\n                            );\r\n                        }\r\n                    }\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    lines: getLines(state)\r\n});\r\n\r\nexport default connect(mapStateToProps)(LogView);\r\n","import * as React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport ConsoleInput from './ConsoleInput';\r\nimport './ConsoleView.scss';\r\nimport Controls from './Controls';\r\nimport LogView from './LogView';\r\n\r\nclass ConsoleView extends React.Component {\r\n    public render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"HeaderWrapper\">\r\n                    <Container className=\"ConsoleHeader\">\r\n                        <p className=\"h6\">Console</p>\r\n                        <Controls />\r\n                    </Container>\r\n                </div>\r\n                <Container className=\"ConsoleView\">\r\n\r\n                    <LogView />\r\n                    <ConsoleInput />\r\n                </Container>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConsoleView;\r\n","import { ASTNode, ASTType, NodeType } from '../parsing/nodes/node';\r\nimport { ASTNumberNode } from '../parsing/nodes/numberNode';\r\nimport { ASTVariableNode } from '../parsing/nodes/variableNode';\r\n\r\nexport function prettyPrintNode(node?: NodeType): string {\r\n    if (node) {\r\n        switch (node.type) {\r\n            case ASTType.null:\r\n                return '';\r\n            case ASTType.variable:\r\n                return node.variable;\r\n            case ASTType.number:\r\n                return node.value.toString();\r\n            case ASTType.expression:\r\n                if (node.children) {\r\n                    return '?(' + node.children.map((c) => prettyPrintNode(c)).join(' ') + ')';\r\n                } else {\r\n                    return node.name;\r\n                }\r\n            case ASTType.symbol:\r\n                return node.symbol;\r\n            case ASTType.power:\r\n                if (node.children) {\r\n                    if (checkNodeType(node.children[0])) {\r\n                        if (checkNodeType(node.children[1])) {\r\n                            return prettyPrintNode(node.children[0]) + '^' +\r\n                                prettyPrintNode(node.children[1]);\r\n                        } else {\r\n                            return prettyPrintNode(node.children[0]) + '^(' +\r\n                                prettyPrintNode(node.children[1]) + ')';\r\n                        }\r\n                    } else {\r\n                        if (checkNodeType(node.children[1])) {\r\n                            return '(' + prettyPrintNode(node.children[0]) + ')^' +\r\n                                prettyPrintNode(node.children[1]);\r\n                        } else {\r\n                            return '(' + prettyPrintNode(node.children[0]) + ')^(' +\r\n                                prettyPrintNode(node.children[1]) + ')';\r\n                        }\r\n                    }\r\n                } else {\r\n                    return node.name;\r\n                }\r\n            case ASTType.summation:\r\n                if (node.children) {\r\n                    const child = node.children.slice(1, (node.children.length - 1));\r\n                    let str = prettyPrintNode(node.children[0]);\r\n                    // tslint:disable-next-line:prefer-for-of\r\n                    for (let _i = 0; _i < child.length; _i++) {\r\n                        // tslint:disable-next-line:prefer-conditional-expression\r\n                        if ((child[_i]).type === ASTType.number &&\r\n                            (child[_i] as ASTNumberNode).value < 0) {\r\n                            str = str + prettyPrintNode(child[_i]);\r\n                        } else if ((child[_i]).type === ASTType.variable &&\r\n                            ((child[_i] as ASTVariableNode).variable).substring(0, 1) === '-') {\r\n                            str = str + prettyPrintNode(child[_i]);\r\n                        } else {\r\n                            str = str + '+' + prettyPrintNode(child[_i]);\r\n                        }\r\n                    }\r\n                    // tslint:disable-next-line:prefer-conditional-expression\r\n                    if ((node.children[node.children.length - 1]).type === ASTType.number &&\r\n                        (node.children[node.children.length - 1] as ASTNumberNode).value < 0) {\r\n                        str = str + prettyPrintNode(node.children[node.children.length - 1]);\r\n                    } else if (((node.children[node.children.length - 1]).type\r\n                        === ASTType.variable &&\r\n                        ((node.children[node.children.length - 1] as ASTVariableNode)\r\n                            .variable).substring(0, 1) === '-')) {\r\n                        str = str + prettyPrintNode(node.children[node.children.length - 1]);\r\n                    } else {\r\n                        str = str + '+' + prettyPrintNode(node.children[node.children.length - 1]);\r\n                    }\r\n                    return str;\r\n                } else {\r\n                    return node.name;\r\n                }\r\n\r\n            /* return node.children.map((c) => {\r\n                if ((c).type === ASTType.number && (c as ASTNumberNode).value < 0) {\r\n                    return '(' + prettyPrintNode(c) + ')';\r\n                } else {\r\n                    return prettyPrintNode(c);\r\n                }\r\n            }).join(' + ');\r\n        } else {\r\n            return node.name;\r\n        } */\r\n            case ASTType.product:\r\n                if (node.children) {\r\n                    return node.children.map((c) => {\r\n                        if ((c).type === ASTType.summation) {\r\n                            return '(' + prettyPrintNode(c) + ')';\r\n                        } else {\r\n                            return prettyPrintNode(c);\r\n                        }\r\n                    }).join('*');\r\n                } else {\r\n                    return node.name;\r\n                }\r\n            default:\r\n                return '';\r\n        }\r\n    } else {\r\n        return 'null';\r\n    }\r\n}\r\n\r\nexport function checkNodeType(node: NodeType) {\r\n    if (node.type === ASTType.variable ||\r\n        node.type === ASTType.symbol ||\r\n        (node.type === ASTType.number && node.value >= 0)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function printNode(node?: NodeType): string {\r\n    if (node) {\r\n        switch (node.type) {\r\n            case ASTType.null:\r\n                return '';\r\n            case ASTType.variable:\r\n                return node.variable;\r\n            case ASTType.number:\r\n                return node.value.toString();\r\n            case ASTType.expression:\r\n                if (node.children) {\r\n                    return '?(' + node.children.map((c) => printNode(c)).join(' ') + ')';\r\n                } else {\r\n                    return node.name;\r\n                }\r\n            case ASTType.symbol:\r\n                return node.symbol;\r\n            case ASTType.power:\r\n                if (node.children) {\r\n                    return '(' + printNode(node.children[0]) + '^' +\r\n                        printNode(node.children[1]) + ')';\r\n                } else {\r\n                    return node.name;\r\n                }\r\n            case ASTType.summation:\r\n                if (node.children) {\r\n                    return '(' + node.children.map((c) => printNode(c)).join(' + ') + ')';\r\n                } else {\r\n                    return node.name;\r\n                }\r\n            case ASTType.product:\r\n                if (node.children) {\r\n                    return '(' + node.children.map((c) => printNode(c)).join(' * ') + ')';\r\n                } else {\r\n                    return node.name;\r\n                }\r\n            default:\r\n                return '';\r\n        }\r\n    } else {\r\n        return 'null';\r\n    }\r\n}","import * as d3 from 'd3';\r\nimport { hierarchy } from 'd3-hierarchy';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Container } from 'reactstrap';\r\nimport { prettyPrintNode, printNode } from '../../engine/printing';\r\nimport { FileContext } from '../../parsing/generated/ExpressionParser';\r\nimport { ASTNode, NodeType } from '../../parsing/nodes/node';\r\nimport { RootState } from '../../stores/store';\r\nimport { getTree } from '../../stores/tree/selectors';\r\nimport './TreeView.scss';\r\n\r\ninterface Props {\r\n    tree?: { tree: NodeType[], ruleNames: string[] };\r\n}\r\n\r\nclass TreeView extends React.Component<Props> {\r\n\r\n    /* private tree = (data: ASTNode) => {\r\n        const root = hierarchy(data);\r\n        \r\n        const treeLayout = d3.tree();\r\n        treeLayout.size([400, 200]);\r\n        treeLayout(root);\r\n    } */\r\n\r\n    private svg?: d3.Selection<SVGSVGElement | null, unknown, null, undefined>;\r\n    private width = 1100;\r\n    public render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Container fluid={true} className=\"TreeView\">\r\n                    <svg\r\n                        ref={(element) => this.svg = d3.select(element)}\r\n                        width={'100%'}\r\n                    />\r\n                    {this.props.tree ? (\r\n                        <span className=\"StringView\">\r\n                            {prettyPrintNode(this.props.tree.tree[0])}\r\n                        </span>\r\n                    ) : null}\r\n                </Container>\r\n\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    public componentDidUpdate() {\r\n        if (this.props.tree) {\r\n            this.svg!.select('g').remove();\r\n            this.chart(this.props.tree.tree[0]);\r\n        } else {\r\n            this.svg!.select('g').remove();\r\n        }\r\n    }\r\n\r\n    public componentDidMount() {\r\n        if (this.props.tree) {\r\n            this.svg!.select('g').remove();\r\n            this.chart(this.props.tree.tree[0]);\r\n        } else {\r\n            this.svg!.select('g').remove();\r\n        }\r\n    }\r\n\r\n    private tree = (data: ASTNode & { dx?: number, dy?: number }) => {\r\n        const root = hierarchy(data);\r\n        root.data.dx = 30;\r\n        root.data.dy = this.width / (root.height + 1);\r\n        return d3.tree<ASTNode & { dx?: number, dy?: number }>()\r\n            .nodeSize([root.data.dx, root.data.dy])(root);\r\n    }\r\n\r\n    private chart = (data: ASTNode) => {\r\n        const root = this.tree(data);\r\n\r\n        let x0 = Infinity;\r\n        let x1 = -x0;\r\n        root.each((d) => {\r\n            if (d.x > x1) { x1 = d.x; }\r\n            if (d.x < x0) { x0 = d.x; }\r\n        });\r\n\r\n        this.svg!\r\n            // tslint:disable-next-line:no-any\r\n            .attr('viewBox', [0, 0, this.width, x1 - x0 + root.data.dx! * 2] as any);\r\n\r\n        const g = this.svg!.append('g')\r\n            .attr('font-family', 'sans-serif')\r\n            .attr('font-size', 10)\r\n            .attr('transform', `translate(${root.data.dy! / 3},${root.data.dx! - x0})`);\r\n\r\n        const link = g.append('g')\r\n            .attr('fill', 'none')\r\n            .attr('stroke', '#555')\r\n            .attr('stroke-opacity', 0.4)\r\n            .attr('stroke-width', 1.5)\r\n            .selectAll('path')\r\n            .data(root.links())\r\n            .join('path')\r\n            .attr(\r\n                'd',\r\n                d3.linkHorizontal()\r\n                    // tslint:disable-next-line:no-any\r\n                    .x((d) => (d as any).y)\r\n                    // tslint:disable-next-line:no-any\r\n                    .y((d) => (d as any).x) as any\r\n            );\r\n\r\n        const node = g.append('g')\r\n            .attr('stroke-linejoin', 'round')\r\n            .attr('stroke-width', 1)\r\n            .selectAll('g')\r\n            .data(root.descendants())\r\n            .join('g')\r\n            .attr('transform', (d) => `translate(${d.y},${d.x})`);\r\n\r\n        node.append('rect')\r\n            .attr('fill', (d) => d.children ? '#fff' : '#eee')\r\n            .attr('stroke', '#333')\r\n            .attr('x', -25)\r\n            .attr('y', -10)\r\n            .attr('width', 50)\r\n            .attr('height', 20);\r\n\r\n        node.append('text')\r\n            .style('font-size', '1em')\r\n            .attr('dy', '0.31em')\r\n            .text((d) => d.data.name)\r\n            .attr('text-anchor', 'middle')\r\n            .clone(true).lower()\r\n            .attr('stroke', 'white')\r\n            ;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    tree: getTree(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(TreeView);\r\n","import * as actionCreators from './actionCreators';\r\nimport { ActionTypeNames } from './actions';\r\nimport State from './state';\r\n\r\nconst initialState: State = {\r\n    inputHistory: [],\r\n    lines: [],\r\n};\r\n\r\ntype Actions = ReturnType<typeof actionCreators[keyof typeof actionCreators]>;\r\n\r\nexport default function reducer(state: State = initialState, action: Actions): State {\r\n    switch (action.type) {\r\n        case ActionTypeNames.AddToInputHistory:\r\n            return {\r\n                ...state,\r\n                inputHistory: [...state.inputHistory, action.input]\r\n            };\r\n        case ActionTypeNames.AddToLog:\r\n            return {\r\n                ...state,\r\n                lines: [...state.lines, action.line]\r\n            };\r\n        case ActionTypeNames.SetHistory:\r\n            return {\r\n                ...action.history\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as actionCreators from './actionCreators';\r\nimport { ActionTypeNames } from './actions';\r\nimport State from './state';\r\n\r\nconst initialState: State = {\r\n    history: [],\r\n    index: -1,\r\n};\r\n\r\ntype Actions = ReturnType<typeof actionCreators[keyof typeof actionCreators]>;\r\n\r\nexport default function reducer(state: State = initialState, action: Actions): State {\r\n    switch (action.type) {\r\n        case ActionTypeNames.AddToHistory:\r\n            return {\r\n                history: [...(state.history || []), { tree: action.tree, ruleNames: action.ruleNames }],\r\n                index: state.history.length,\r\n            };\r\n        case ActionTypeNames.SetHistory:\r\n            return {\r\n                ...action.history\r\n            };\r\n        case ActionTypeNames.Undo:\r\n            return {\r\n                ...state,\r\n                index: state.index - 1\r\n            };\r\n        case ActionTypeNames.Redo:\r\n            return {\r\n                ...state,\r\n                index: state.index + 1\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import State from '../stores/console/state';\r\n\r\nexport function saveHistory(history: State) {\r\n    localStorage.setItem('consoleCache', JSON.stringify(history));\r\n}\r\n\r\nexport function loadHistory() {\r\n    const history = localStorage.getItem('consoleCache');\r\n    if (history) {\r\n        return JSON.parse(history);\r\n    } else {\r\n        return { lines: [], inputHistory: [] };\r\n    }\r\n}","import _ from 'lodash';\r\nimport { ASTType, NodeType } from '../parsing/nodes/node';\r\n\r\nexport function applyAssociative(node: NodeType) {\r\n    if (node.type === ASTType.summation || node.type === ASTType.product) {\r\n        // Apply associative rule to all children\r\n        node.children = node.children.map((child) =>\r\n            applyAssociative(child));\r\n\r\n        // Flatten this node and its children\r\n        node.children = _.flatten(node.children.map((child) => {\r\n            if ((child).type === node.type) {\r\n                return (child as typeof node).children;\r\n            } else {\r\n                return [child];\r\n            }\r\n        }));\r\n    }\r\n\r\n    return node;\r\n}","import { ASTNode, ASTType, NodeType } from './node';\r\n\r\nexport class ASTProductNode extends ASTNode {\r\n    public type: ASTType.product = ASTType.product;\r\n    public children: NodeType[];\r\n\r\n    public constructor(children: NodeType[]) {\r\n        super(ASTType.product);\r\n        this.children = children;\r\n        this.name = '*';\r\n    }\r\n\r\n}","import { ASTNode, ASTType, NodeType } from './node';\r\nimport { ASTNumberNode } from './numberNode';\r\n\r\nexport class ASTSummationNode extends ASTNode {\r\n    public type: ASTType.summation = ASTType.summation;\r\n    public children: NodeType[];\r\n\r\n    public constructor(children: NodeType[]) {\r\n        super(ASTType.summation);\r\n        this.children = children;\r\n        this.name = '+';\r\n    }\r\n\r\n}","import { ASTType, NodeType } from '../parsing/nodes/node';\r\nimport { ASTProductNode } from '../parsing/nodes/productNode';\r\nimport { ASTSummationNode } from '../parsing/nodes/summationNode';\r\n\r\nexport function removeBrackets(node: NodeType): NodeType {\r\n    if (node.type === ASTType.summation || node.type === ASTType.product || node.type === ASTType.power) {\r\n        node.children = node.children.map((child) => removeBrackets(child));\r\n    } \r\n    switch (node.type) {\r\n        case ASTType.product:\r\n            return productBrackets(node);\r\n        default:\r\n            return node;\r\n    }\r\n}\r\n\r\nexport function productBrackets(node: ASTProductNode): NodeType {\r\n    const children = node.children;\r\n    if (children.length === 2) {\r\n        for (let i = 0; i < children.length; i++) {\r\n            if ((children[i]).type === ASTType.summation) {\r\n                if (i === 0) {\r\n                    const newChildren = (children[i] as ASTSummationNode).children.map((child) => {\r\n                        return new ASTProductNode([child, children[i + 1]]);\r\n                    });\r\n                    return new ASTSummationNode(newChildren);\r\n                } else {\r\n                    const newChildren = (children[i] as ASTSummationNode).children.map((child) => {\r\n                        return new ASTProductNode([child, children[i - 1]]);\r\n                    });\r\n                    return new ASTSummationNode(newChildren);\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        for (let i = 0; i < children.length; i++) {\r\n            if ((children[i]).type === ASTType.summation) {\r\n                if (i === 0) {\r\n                    const newChildren = (children[i] as ASTSummationNode).children.map((child) => {\r\n                        return new ASTProductNode([child, children[i + 1]]);\r\n                    });\r\n                    return new ASTProductNode([new ASTSummationNode(newChildren), \r\n                        new ASTProductNode(children.slice(2, children.length))]);\r\n                } else {\r\n                    const newChildren = (children[i] as ASTSummationNode).children.map((child) => {\r\n                        return new ASTProductNode([child, children[i - 1]]);\r\n                    });\r\n                    return new ASTProductNode([new ASTSummationNode(newChildren), \r\n                        new ASTProductNode(children.slice(0, i - 1)), \r\n                        new ASTProductNode(children.slice(i + 1, children.length))]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return node;\r\n}","import { ASTNode, ASTType } from './node';\r\n\r\nexport class ASTNumberNode extends ASTNode {\r\n    public value: number;\r\n    public type: ASTType.number = ASTType.number;\r\n    \r\n    constructor(value: number) {\r\n        super(ASTType.variable);\r\n        this.value = value;\r\n        this.name = value.toString();\r\n    }\r\n}","import { ASTNode, ASTType, NodeType } from './node';\r\n\r\nexport class ASTPowerNode extends ASTNode {\r\n    public type: ASTType.power = ASTType.power;\r\n    public children: NodeType[];\r\n\r\n    public constructor(children: NodeType[]) {\r\n        super(ASTType.power);\r\n        this.children = children;\r\n        this.name = '^';\r\n    }\r\n\r\n}","import _ from 'lodash';\r\nimport { ASTType, NodeType } from '../parsing/nodes/node';\r\nimport { ASTNumberNode } from '../parsing/nodes/numberNode';\r\nimport { ASTPowerNode } from '../parsing/nodes/powerNode';\r\nimport { ASTProductNode } from '../parsing/nodes/productNode';\r\nimport { ASTSummationNode } from '../parsing/nodes/summationNode';\r\n\r\nexport function differentiate(node: NodeType): NodeType {\r\n\r\n    // Case of summation\r\n    if (node.type === ASTType.summation) {\r\n        return differentiateSum(node);\r\n    }\r\n\r\n    // Case of product\r\n\r\n    if (node.type === ASTType.product) {\r\n        return differentiateProduct(node);\r\n    }\r\n\r\n    // Case of power\r\n\r\n    if (node.type === ASTType.power) {\r\n        return differentiatePower(node);\r\n    }\r\n\r\n    // Case of variable\r\n\r\n    if (node.type === ASTType.variable && node.variable === 'x') {\r\n        return new ASTNumberNode(1);\r\n    }\r\n\r\n    return new ASTNumberNode(0);\r\n}\r\n\r\nexport function differentiateSum(node: ASTSummationNode) {\r\n    node.children = node.children.map((child) => differentiate(child));\r\n    return node;\r\n}\r\n\r\nexport function differentiateProduct(node: ASTProductNode) {\r\n    const children = _.cloneDeep(node.children);\r\n    return new ASTSummationNode([\r\n        new ASTProductNode([differentiate(children[0]), node.children[1]]),\r\n        new ASTProductNode([node.children[0], differentiate(children[1])])]);\r\n}\r\n\r\nexport function differentiatePower(node: ASTPowerNode) {\r\n    const children = _.cloneDeep(node.children);\r\n    return new ASTProductNode([node.children[1], new ASTProductNode([\r\n        new ASTPowerNode([node.children[0], \r\n        new ASTSummationNode([node.children[1], new ASTNumberNode(-1)])]), \r\n        differentiate(children[0])])]);\r\n}","import { ASTNode, ASTType } from './node';\r\n\r\nexport class ASTVariableNode extends ASTNode {\r\n    public variable: string;\r\n    public type: ASTType.variable = ASTType.variable;\r\n\r\n    constructor(variable: string) {\r\n        super(ASTType.variable);\r\n        this.variable = variable;\r\n        this.name = variable;\r\n    }\r\n}","import _ from 'lodash';\r\nimport { ASTType, NodeType } from '../parsing/nodes/node';\r\nimport { ASTNumberNode } from '../parsing/nodes/numberNode';\r\nimport { ASTPowerNode } from '../parsing/nodes/powerNode';\r\nimport { ASTProductNode } from '../parsing/nodes/productNode';\r\nimport { ASTSummationNode } from '../parsing/nodes/summationNode';\r\nimport { ASTVariableNode } from '../parsing/nodes/variableNode';\r\n\r\nexport function endPrint(node: NodeType) {\r\n    if (node.type === ASTType.summation || node.type === ASTType.product || node.type === ASTType.power) {\r\n        // Apply rule to all children\r\n        node.children = node.children.map((child) =>\r\n            endPrint(child));\r\n\r\n        // case of summation\r\n        if (node.type === ASTType.summation) {\r\n            return endPrintSum(node);\r\n        }\r\n\r\n         // case of product\r\n        if (node.type === ASTType.product) {\r\n            return endPrintProduct(node);\r\n        }\r\n\r\n         /* // case of power\r\n        if (node.type === ASTType.power) {\r\n            return endPrintPower(node);\r\n        }\r\n        */\r\n    }\r\n\r\n    return node;\r\n}\r\n\r\nfunction endPrintSum(node: ASTSummationNode) {\r\n    return node;\r\n}\r\n\r\nfunction endPrintProduct(node: ASTProductNode) {\r\n    if (node.children.length === 2) {\r\n        const child1 = node.children[0];\r\n        const child2 = node.children[1];\r\n\r\n        if ((child1.type === ASTType.number) && (child2.type === ASTType.variable) && \r\n        (child1.value < 0)) {\r\n            return new ASTVariableNode('-' + child2.variable);\r\n        }\r\n    }\r\n    return node;\r\n}\r\n\r\n/*\r\nfunction endPrintPower(node: ASTPowerNode) {\r\n    if (node.children.length === 2) {\r\n        const child2 = node.children[0];\r\n        const child1 = node.children[1];\r\n\r\n        if ((child1.type === ASTType.number) && (child2.type === ASTType.variable) && \r\n        (child1.value < 0)) {\r\n            if (child1.value === -1) {\r\n                const absPower = -child1.value;\r\n                return new ASTVariableNode('1/' + child2.variable);\r\n            } else {\r\n                const absPower = -child1.value;\r\n                return new ASTVariableNode('(1/' + child2.variable + ')^' + absPower);\r\n            }\r\n        }\r\n    }\r\n    return node;\r\n}\r\n*/","import { ASTType, NodeType } from '../parsing/nodes/node';\r\n\r\nexport function hashNode(node?: NodeType) {\r\n    if (node) {\r\n        if (node.type === ASTType.summation || node.type === ASTType.product || node.type === ASTType.power) {\r\n            node.children.forEach((child) => hashNode(child));\r\n        }\r\n        node.hash = generateHash(node);\r\n    }\r\n}\r\n\r\nexport function generateHash(node?: NodeType): string {\r\n    if (node) {\r\n        switch (node.type) {\r\n            case ASTType.null:\r\n                return '';\r\n            case ASTType.variable:\r\n                return node.variable;\r\n            case ASTType.number:\r\n                return node.value.toString();\r\n            case ASTType.expression:\r\n                if (node.children) {\r\n                    return '?(' + node.children.map((c) => generateHash(c)).join(' ') + ')';\r\n                } else {\r\n                    return node.name;\r\n                }\r\n            case ASTType.symbol:\r\n                return node.symbol;\r\n            case ASTType.power:\r\n                if (node.children) {\r\n                    return '(' + generateHash(node.children[0]) + '^' +\r\n                        generateHash(node.children[1]) + ')';\r\n                } else {\r\n                    return node.name;\r\n                }\r\n            case ASTType.summation:\r\n                if (node.children) {\r\n                    return '(' + node.children.map((c) => generateHash(c)).join(' + ') + ')';\r\n                } else {\r\n                    return node.name;\r\n                }\r\n            case ASTType.product:\r\n                if (node.children) {\r\n                    return '(' + node.children.map((c) => generateHash(c)).join(' * ') + ')';\r\n                } else {\r\n                    return node.name;\r\n                }\r\n            default:\r\n                return '';\r\n        }\r\n    } else {\r\n        return 'null';\r\n    }\r\n}","import _ from 'lodash';\r\nimport { ASTType, NodeType } from '../parsing/nodes/node';\r\nimport { ASTNumberNode } from '../parsing/nodes/numberNode';\r\nimport { ASTPowerNode } from '../parsing/nodes/powerNode';\r\nimport { ASTProductNode } from '../parsing/nodes/productNode';\r\nimport { ASTSummationNode } from '../parsing/nodes/summationNode';\r\n\r\nexport function removeIdentities(node: NodeType): NodeType {\r\n    if (node.type === ASTType.summation || node.type === ASTType.product || node.type === ASTType.power) {\r\n        // Remove identities from children\r\n        node.children = node.children.map((child) => removeIdentities(child));\r\n    }\r\n\r\n    // Case of summation\r\n    if (node.type === ASTType.summation) {\r\n        return removeIdentitiesSummation(node);\r\n    }\r\n\r\n    // Case of product\r\n\r\n    if (node.type === ASTType.product) {\r\n        return removeIdentitiesProduct(node);\r\n    }\r\n\r\n    // Case of power\r\n\r\n    if (node.type === ASTType.power) {\r\n        return removeIdentitiesPower(node);\r\n    }\r\n\r\n    // Otherwise\r\n\r\n    return node;\r\n}\r\n\r\nfunction removeIdentitiesSummation(node: ASTSummationNode) {\r\n    node.children = _.compact(node.children.map((child) => {\r\n        // Remove a child if it is a zero value\r\n        if ((child).type === ASTType.number\r\n            && (child as ASTNumberNode).value === 0) {\r\n            return undefined;\r\n        } else {\r\n            return child;\r\n        }\r\n    }));\r\n\r\n    if (node.children.length === 0) {\r\n        return new ASTNumberNode(0);\r\n    } else if (node.children.length === 1) {\r\n        return node.children[0];\r\n    } else {\r\n        return node;\r\n    }\r\n}\r\n\r\nfunction removeIdentitiesProduct(node: ASTProductNode) {\r\n    node.children = _.compact(node.children.map((child) => {\r\n        // Remove a child if it is has value 1\r\n        if ((child).type === ASTType.number\r\n            && (child as ASTNumberNode).value === 1) {\r\n            return undefined;\r\n        } else {\r\n            return child;\r\n        }\r\n    }));\r\n\r\n    const children = node.children;\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let _i = 0; _i < children.length; _i++) {\r\n        if ((children[_i]).type === ASTType.number && (children[_i] as ASTNumberNode).value === 0) {\r\n            return new ASTNumberNode(0);\r\n        }\r\n    }\r\n\r\n    if (node.children.length === 0) {\r\n        return new ASTNumberNode(0);\r\n    } else  if (node.children.length === 1) {\r\n        return node.children[0];\r\n    } else {\r\n        return node;\r\n    }\r\n}\r\n\r\nfunction removeIdentitiesPower(node: ASTPowerNode) {\r\n    const base = node.children[0];\r\n    const exp = node.children[1];\r\n\r\n    // if (base.type === ASTType.number && exp.type === ASTType.number) {\r\n    if (exp.type === ASTType.number) {\r\n        if (exp.value === 0) {\r\n            return new ASTNumberNode(1);\r\n        } else if (exp.value === 1) {\r\n            return base;\r\n        }\r\n    }\r\n\r\n    if (base.type === ASTType.number) {\r\n        if (base.value === 1 || base.value === 0) {\r\n            return base;\r\n        }\r\n    }\r\n    // }\r\n    \r\n    return node;\r\n}","import { ASTType, NodeType } from '../parsing/nodes/node';\r\nimport { ASTNumberNode } from '../parsing/nodes/numberNode';\r\nimport { ASTPowerNode } from '../parsing/nodes/powerNode';\r\nimport { ASTProductNode } from '../parsing/nodes/productNode';\r\nimport { ASTSummationNode } from '../parsing/nodes/summationNode';\r\nimport { ASTVariableNode } from '../parsing/nodes/variableNode';\r\n\r\nexport function integrate(node: NodeType): NodeType {\r\n    if (node.type === ASTType.summation && containX(node)) {\r\n        node.children = node.children.map((child) => {\r\n            if (containX(child)) {\r\n                return integrateProduct(child);\r\n            } else {\r\n                return new ASTProductNode([child, new ASTVariableNode('x')]);\r\n            }\r\n        });\r\n        return new ASTSummationNode(node.children);\r\n    } else if (containX(node)) {\r\n        return integrateProduct(node);\r\n    } else {\r\n        return new ASTProductNode([node, new ASTVariableNode('x')]);\r\n    }\r\n}\r\n\r\nexport function containX(node: NodeType): boolean {\r\n    if (node.type === ASTType.summation || node.type === ASTType.power || node.type === ASTType.product) {\r\n        const result = node.children.map((child) => containX(child));\r\n        // tslint:disable-next-line:prefer-for-of\r\n        for (let i = 0; i < result.length; i++) {\r\n            if (result[i]) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    if (node.type === ASTType.variable && node.variable === 'x') {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function integrateProduct(node: NodeType): NodeType {\r\n    if (node.type === ASTType.power) {\r\n        const base = (node as ASTPowerNode).children[0];\r\n        const exp = (node as ASTPowerNode).children[1];\r\n        if (base.type === ASTType.variable && base.variable === 'x') {\r\n            const int = new ASTProductNode([new ASTPowerNode([new\r\n                ASTSummationNode([new ASTNumberNode(1), exp]), new ASTNumberNode(-1)]),\r\n            new ASTPowerNode([base, new ASTSummationNode([new ASTNumberNode(1), exp])])]);\r\n            return int;\r\n        }\r\n    }\r\n    if (node.type === ASTType.variable && node.variable === 'x') {\r\n        return new ASTProductNode([new ASTNumberNode(0.5),\r\n        new ASTPowerNode([node, new ASTNumberNode(2)])]);\r\n    }\r\n    /*if (! containX(node)) {\r\n        return new ASTProductNode([new ASTVariableNode('x'), node]);\r\n    }*/\r\n    if (node.type === ASTType.product) {\r\n        return new ASTProductNode(node.children.map((child) => integrateProduct(child)));\r\n    }\r\n    return node;\r\n}","import _ from 'lodash';\r\nimport { ASTType, NodeType } from '../parsing/nodes/node';\r\nimport { ASTNumberNode } from '../parsing/nodes/numberNode';\r\nimport { ASTPowerNode } from '../parsing/nodes/powerNode';\r\nimport { ASTProductNode } from '../parsing/nodes/productNode';\r\nimport { ASTSummationNode } from '../parsing/nodes/summationNode';\r\nimport { ASTVariableNode } from '../parsing/nodes/variableNode';\r\n\r\nexport function likeTerms(node: NodeType): NodeType {\r\n    if (node.type === ASTType.summation || node.type === ASTType.product || node.type === ASTType.power) {\r\n        node.children = node.children.map((child) => likeTerms(child));\r\n    } \r\n    if (node.type === ASTType.product) {\r\n        return likeProduct(node);\r\n    }\r\n    if (node.type === ASTType.summation) {\r\n        return likeSum(node);\r\n    }\r\n    return node;\r\n}\r\n\r\nexport function likeProduct(node: ASTProductNode): NodeType {\r\n    const children = node.children;\r\n    for (let i = 1; i < children.length; i++) {\r\n        if ((children[i - 1]).type === ASTType.variable &&\r\n        (children[i]).type === ASTType.variable &&\r\n        (children[i - 1] as ASTVariableNode).variable === (children[i] as ASTVariableNode).variable) {\r\n            const newChildren = _.compact(node.children.map((child, index) => {\r\n                if (index === i - 1) {\r\n                    return new ASTPowerNode([child, new ASTNumberNode(2)]);\r\n                } else if (index === i) {\r\n                    return undefined;\r\n                } else {\r\n                    return child;\r\n                }\r\n            }));\r\n            return new ASTProductNode(newChildren);\r\n        }\r\n        if ((children[i - 1]).type === ASTType.variable &&\r\n        (children[i]).type === ASTType.power &&\r\n        (children[i - 1] as ASTVariableNode).variable === \r\n        ((children[i] as ASTPowerNode).children[0] as ASTVariableNode).variable) {\r\n            const newChildren = _.compact(node.children.map((child, index) => {\r\n                if (index === i - 1) {\r\n                    return new ASTPowerNode([child, new ASTSummationNode([new ASTNumberNode(1),\r\n                        (children[i] as ASTPowerNode).children[1]])]);\r\n                } else if (index === i) {\r\n                    return undefined;\r\n                } else {\r\n                    return child;\r\n                }\r\n            }));\r\n            return new ASTProductNode(newChildren);\r\n        }\r\n        if ((children[i]).type === ASTType.variable &&\r\n        (children[i - 1]).type === ASTType.power &&\r\n        (children[i] as ASTVariableNode).variable === \r\n        ((children[i - 1] as ASTPowerNode).children[0] as ASTVariableNode).variable) {\r\n            const newChildren = _.compact(node.children.map((child, index) => {\r\n                if (index === i) {\r\n                    return new ASTPowerNode([child, new ASTSummationNode([new ASTNumberNode(1),\r\n                        (children[i - 1] as ASTPowerNode).children[1]])]);\r\n                } else if (index === i - 1) {\r\n                    return undefined;\r\n                } else {\r\n                    return child;\r\n                }\r\n            }));\r\n            return new ASTProductNode(newChildren);\r\n        }\r\n    }\r\n    return node;\r\n}\r\n\r\nexport function likeSum(node: ASTSummationNode): NodeType {\r\n    const children = node.children;\r\n    for (let i = 1; i < children.length; i++) {\r\n        if ((children[i - 1]).type === ASTType.variable &&\r\n        (children[i]).type === ASTType.variable &&\r\n        (children[i - 1] as ASTVariableNode).variable === (children[i] as ASTVariableNode).variable) {\r\n            const newChildren = _.compact(node.children.map((child, index) => {\r\n                if (index === i - 1) {\r\n                    return new ASTProductNode([child, new ASTNumberNode(2)]);\r\n                } else if (index === i) {\r\n                    return undefined;\r\n                } else {\r\n                    return child;\r\n                }\r\n            }));\r\n            return new ASTSummationNode(newChildren);\r\n        }\r\n        if ((children[i - 1]).type === ASTType.variable &&\r\n        (children[i]).type === ASTType.product &&\r\n        (children[i - 1] as ASTVariableNode).variable === \r\n        ((children[i] as ASTProductNode).children[0] as ASTVariableNode).variable) {\r\n            const newChildren = _.compact(node.children.map((child, index) => {\r\n                if (index === i - 1) {\r\n                    return new ASTProductNode([child, new ASTSummationNode([new ASTNumberNode(1),\r\n                        (children[i] as ASTProductNode).children[1]])]);\r\n                } else if (index === i) {\r\n                    return undefined;\r\n                } else {\r\n                    return child;\r\n                }\r\n            }));\r\n            return new ASTSummationNode(newChildren);\r\n        }\r\n        if ((children[i]).type === ASTType.variable &&\r\n        (children[i - 1]).type === ASTType.product &&\r\n        (children[i] as ASTVariableNode).variable === \r\n        ((children[i - 1] as ASTProductNode).children[0] as ASTVariableNode).variable) {\r\n            const newChildren = _.compact(node.children.map((child, index) => {\r\n                if (index === i) {\r\n                    return new ASTProductNode([child, new ASTSummationNode([new ASTNumberNode(1),\r\n                        (children[i - 1] as ASTProductNode).children[1]])]);\r\n                } else if (index === i - 1) {\r\n                    return undefined;\r\n                } else {\r\n                    return child;\r\n                }\r\n            }));\r\n            return new ASTSummationNode(newChildren);\r\n        }\r\n    }\r\n    return node;\r\n}","import _ from 'lodash';\r\nimport { ASTType, NodeType } from '../parsing/nodes/node';\r\nimport { ASTNumberNode } from '../parsing/nodes/numberNode';\r\nimport { ASTPowerNode } from '../parsing/nodes/powerNode';\r\nimport { ASTProductNode } from '../parsing/nodes/productNode';\r\nimport { ASTSummationNode } from '../parsing/nodes/summationNode';\r\n\r\nexport function applyNumerical(node: NodeType): NodeType {\r\n    if (node.type === ASTType.summation || node.type === ASTType.product || node.type === ASTType.power) {\r\n        // Apply numerical rule to all children\r\n        node.children = node.children.map((child) => applyNumerical(child));\r\n    }\r\n\r\n    if (node.type === ASTType.summation) {\r\n        return applyNumericalSummation(node);\r\n    }\r\n\r\n    if (node.type === ASTType.product) {\r\n        return applyNumericalProduct(node);\r\n    }\r\n\r\n    if (node.type === ASTType.power) {\r\n        return applyNumericalPower(node);\r\n    }\r\n\r\n    return node;\r\n}\r\n\r\nexport function applyNumericalSummation(node: ASTSummationNode) {\r\n    let sum = 0;\r\n    for (const child of node.children) {\r\n        if ((child).type === ASTType.number) {\r\n            sum += (child as ASTNumberNode).value;\r\n        }\r\n    }\r\n\r\n    // Remove all number nodes\r\n    node.children = _.compact(node.children.map((child) => {\r\n        if ((child).type !== ASTType.number) {\r\n            return child;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }));\r\n\r\n    if (node.children.length === 0) {\r\n        return new ASTNumberNode(sum);\r\n    } else if (node.children.length === 1 && sum === 0) {\r\n        return node.children[0];\r\n    } else if (sum !== 0) {\r\n        // Add constant to end of sum\r\n        node.children.push(new ASTNumberNode(sum));\r\n    }\r\n\r\n    return node;\r\n}\r\n\r\nexport function applyNumericalProduct(node: ASTProductNode) {\r\n    let product = 1;\r\n    for (const child of node.children) {\r\n        if ((child).type === ASTType.number) {\r\n            product *= (child as ASTNumberNode).value;\r\n        }\r\n    }\r\n\r\n    // Remove all number nodes\r\n    node.children = _.compact(node.children.map((child) => {\r\n        if ((child).type !== ASTType.number) {\r\n            return child;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }));\r\n\r\n    if (node.children.length === 0) {\r\n        return new ASTNumberNode(product);\r\n    } else if (node.children.length === 1 && product === 1) {\r\n        return node.children[0];\r\n    } else if (product !== 1) {\r\n        // Add constant to start of product\r\n        node.children.unshift(new ASTNumberNode(product));\r\n    }\r\n    return node;\r\n}\r\n\r\nexport function applyNumericalPower(node: ASTPowerNode) {\r\n    if ((node.children[0]).type === ASTType.number &&\r\n        (node.children[1]).type === ASTType.number) {\r\n        return new ASTNumberNode(Math.pow(\r\n            (node.children[0] as ASTNumberNode).value,\r\n            (node.children[1] as ASTNumberNode).value\r\n        ));\r\n    }\r\n    return node;\r\n}","import { ASTType, NodeType } from '../parsing/nodes/node';\r\nimport { ASTNumberNode } from '../parsing/nodes/numberNode';\r\nimport { ASTPowerNode } from '../parsing/nodes/powerNode';\r\nimport { ASTProductNode } from '../parsing/nodes/productNode';\r\nimport { ASTSummationNode } from '../parsing/nodes/summationNode';\r\nimport { ASTVariableNode } from '../parsing/nodes/variableNode';\r\n\r\nexport function orderNode(node: NodeType): NodeType {\r\n    if (node.type === ASTType.summation || node.type === ASTType.product || node.type === ASTType.power) {\r\n        // Sort children\r\n        node.children = node.children.map((child) => orderNode(child));\r\n\r\n        if (node.type === ASTType.summation || node.type === ASTType.product) {\r\n            node.children = (node.children).sort((a, b) => sortNode(a, b));\r\n        }\r\n    }\r\n\r\n    return node;\r\n}\r\n\r\nfunction sortNode(a: NodeType, b: NodeType) {\r\n    if (a.type === ASTType.number && b.type === ASTType.number) {\r\n        return sortNumerical(a, b);\r\n    }\r\n    if (a.type === ASTType.variable && b.type === ASTType.variable) {\r\n        return sortLexi(a, b);\r\n    }\r\n    if (a.type === ASTType.number) {\r\n        return -1;\r\n    }\r\n    if (b.type === ASTType.number) {\r\n        return 1;\r\n    }\r\n    if (a.type === ASTType.variable) {\r\n        return -1;\r\n    }\r\n    if (b.type === ASTType.variable) {\r\n        return 1;\r\n    }\r\n\r\n    return sortSubTrees(a, b);\r\n}\r\n\r\n// Sort numbers on numerical ordering\r\nfunction sortNumerical(a: ASTNumberNode, b: ASTNumberNode): number {\r\n    return a.value < b.value ? -1 : a.value > b.value ? 1 : 0;\r\n}\r\n\r\n// Sort variables lexicographically\r\nfunction sortLexi(a: ASTVariableNode, b: ASTVariableNode): number {\r\n    return a.variable.localeCompare(b.variable);\r\n}\r\n\r\n// Sort subtree on: power < product < sum\r\nfunction sortSubTrees(a: NodeType, b: NodeType): number {\r\n    if (a.type === ASTType.summation && b.type === ASTType.summation ||\r\n        a.type === ASTType.product && b.type === ASTType.product) {\r\n        return sortOnLast(a, b);\r\n    }\r\n    if (a.type === ASTType.power && b.type === ASTType.power) {\r\n        return sortPowers(a, b);\r\n    }\r\n    if (a.type === ASTType.summation) {\r\n        return 1;\r\n    }\r\n    if (b.type === ASTType.summation) {\r\n        return -1;\r\n    }\r\n    if (a.type === ASTType.product) {\r\n        return sortOnLast(a, new ASTProductNode([b]));\r\n        return 1;\r\n    }\r\n    if (b.type === ASTType.product) {\r\n        return sortOnLast(new ASTProductNode([a]), b);\r\n        /* if (b.children[b.children.length - 1].type === ASTType.power) {\r\n            return sortPowers(a as ASTPowerNode, b.children[b.children.length - 1] as ASTPowerNode);\r\n        } */\r\n        return -1;\r\n    }\r\n    throw new Error('Fault in sorting algorithm');\r\n}\r\n\r\nfunction sortOnLast(a: ASTSummationNode | ASTProductNode, b: ASTSummationNode | ASTProductNode): number {\r\n    let res = sortNode(a.children[a.children.length - 1], b.children[b.children.length - 1]);\r\n    let i = 1;\r\n    while (res === 0) {\r\n        if (i < a.children.length && i < b.children.length) {\r\n            res = sortNode(\r\n                a.children[a.children.length - i],\r\n                b.children[b.children.length - i]\r\n            );\r\n        } else {\r\n            return a.children.length < b.children.length ?\r\n                -1 : a.children.length > b.children.length ? 1 : 0;\r\n        }\r\n        i++;\r\n    }\r\n    return res;\r\n}\r\n\r\nfunction sortPowers(a: ASTPowerNode, b: ASTPowerNode): number {\r\n    const res = sortNode(a.children[0], b.children[0]);\r\n    if (res === 0) {\r\n        return sortNode(a.children[1], b.children[1]);\r\n    } else {\r\n        return res;\r\n    }\r\n}","import _ from 'lodash';\r\nimport { ASTNode, ASTType, NodeType } from '../parsing/nodes/node';\r\nimport { ASTNumberNode } from '../parsing/nodes/numberNode';\r\nimport { ASTPowerNode } from '../parsing/nodes/powerNode';\r\nimport { ASTProductNode } from '../parsing/nodes/productNode';\r\nimport { ASTSummationNode } from '../parsing/nodes/summationNode';\r\nimport { ASTVariableNode } from '../parsing/nodes/variableNode';\r\n\r\nexport function powerSimplify(node: NodeType): NodeType {\r\n    if (node.type === ASTType.power) {\r\n        node.children = node.children.map((child) => powerSimplify(child));\r\n        return transformPower(node as ASTPowerNode);\r\n    }\r\n\r\n    if (node.type === ASTType.product) {\r\n        node.children = node.children.map((child) => powerSimplify(child));\r\n        return transformPowerBase(node as ASTProductNode);\r\n    }\r\n\r\n    if (node.type === ASTType.summation) {\r\n        node.children = node.children.map((child) => powerSimplify(child));\r\n    }\r\n    \r\n    return node;\r\n}\r\nexport function transformPower(node: ASTPowerNode) {\r\n    const children = node.children;\r\n    if ((children[0]).type === ASTType.power) {\r\n        const powerNode = children[0] as ASTPowerNode;\r\n        children[0] = powerNode.children[0];\r\n        children[1] = new ASTProductNode([powerNode.children[1], children[1]]);\r\n    }\r\n\r\n    if ((children[0]).type === ASTType.product) {\r\n        return new ASTProductNode([new ASTPowerNode([(children[0] as ASTProductNode).children[0], children[1]]),\r\n        new ASTPowerNode([(children[0] as ASTProductNode).children[1], children[1]])]);\r\n    }\r\n\r\n    return node;\r\n}\r\n\r\nexport function transformPowerBase(node: ASTProductNode): ASTProductNode |ASTPowerNode {\r\n    const children = node.children;\r\n    for (let i = 1; i < children.length; i++) {\r\n        if ((children[(i - 1)]).type === ASTType.power &&\r\n        (children[i]).type === ASTType.power) {\r\n            const base1 = (children[i - 1] as ASTPowerNode).children;\r\n            const base2 = (children[i] as ASTPowerNode).children;\r\n            if ((base1[0]).type === ASTType.number && \r\n            (base2[0]).type === ASTType.number && \r\n            (base1[0] as ASTNumberNode).value === (base2[0] as ASTNumberNode).value) {\r\n                if (children.length === 2) {\r\n                    return new ASTPowerNode([base1[0], new ASTSummationNode([base1[1], base2[1]])]);\r\n                } else {\r\n                    node.children = _.compact(node.children.map((child, index) => {\r\n                        // Remove a child if it is a zero value\r\n                        if (index === i) {\r\n                            return new ASTPowerNode([base1[0], new ASTSummationNode([base1[1], base2[1]])]);\r\n                        } else if (index === i - 1) {\r\n                            return undefined; \r\n                        } else {\r\n                            return child;\r\n                        }\r\n                    }));\r\n                    return node;\r\n                }\r\n            } else if ((base1[0]).type === ASTType.variable && \r\n            (base2[0]).type === ASTType.variable && \r\n            (base1[0] as ASTVariableNode).variable === (base2[0] as ASTVariableNode).variable) {\r\n                if (children.length === 2) {\r\n                    return new ASTPowerNode([base1[0], new ASTSummationNode([base1[1], base2[1]])]);\r\n                } else {\r\n                    node.children = _.compact(node.children.map((child, index) => {\r\n                        // Remove a child if it is a zero value\r\n                        if (index === i) {\r\n                            return new ASTPowerNode([base1[0], new ASTSummationNode([base1[1], base2[1]])]);\r\n                        } else if (index === i - 1) {\r\n                            return undefined; \r\n                        } else {\r\n                            return child;\r\n                        }\r\n                    }));\r\n                    return node;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return node;\r\n}","import _ from 'lodash';\r\nimport { ASTNode, ASTType, NodeType } from '../parsing/nodes/node';\r\nimport { ASTNumberNode } from '../parsing/nodes/numberNode';\r\nimport { ASTPowerNode } from '../parsing/nodes/powerNode';\r\nimport { ASTProductNode } from '../parsing/nodes/productNode';\r\nimport { ASTSummationNode } from '../parsing/nodes/summationNode';\r\nimport { hashNode } from './hashing';\r\n\r\nexport function removeSingles(node: NodeType): NodeType {\r\n    if (node.type === ASTType.summation || node.type === ASTType.product || node.type === ASTType.power) {\r\n        // simplify children\r\n        node.children = node.children.map((child) => removeSingles(child));\r\n    }\r\n\r\n    switch (node.type) {\r\n        case ASTType.summation:\r\n            return removeSinglesSummation(node);\r\n        case ASTType.product:\r\n            return removeSinglesProduct(node);\r\n        default:\r\n            return node;\r\n    }\r\n}\r\n\r\nfunction removeSinglesSummation(node: ASTSummationNode): NodeType {\r\n    if (node.children.length === 1) {\r\n        return node.children[0];\r\n    }\r\n    return node;\r\n}\r\n\r\nfunction removeSinglesProduct(node: ASTProductNode): NodeType {\r\n    if (node.children.length === 1) {\r\n        return node.children[0];\r\n    }\r\n    return node;\r\n}","import _ from 'lodash';\r\nimport { ASTExpressionNode } from '../parsing/nodes/expressionNode';\r\nimport { ASTType, NodeType } from '../parsing/nodes/node';\r\nimport { ASTNullNode } from '../parsing/nodes/nullNode';\r\nimport { ASTNumberNode } from '../parsing/nodes/numberNode';\r\nimport { ASTPowerNode } from '../parsing/nodes/powerNode';\r\nimport { ASTProductNode } from '../parsing/nodes/productNode';\r\nimport { ASTSummationNode } from '../parsing/nodes/summationNode';\r\nimport { ASTSymbolNode } from '../parsing/nodes/symbolNode';\r\nimport { ASTVariableNode } from '../parsing/nodes/variableNode';\r\n\r\nexport function simplifyInput(node: NodeType): NodeType | undefined {\r\n    switch (node.type) {\r\n        case ASTType.null:\r\n            return simplifyNull(node);\r\n        case ASTType.number:\r\n            return simplifyNumber(node);\r\n        case ASTType.variable:\r\n            return simplifyVariable(node);\r\n        case ASTType.symbol:\r\n            return simplifySymbol(node);\r\n        case ASTType.expression:\r\n            return simplifyExpression(node);\r\n        default:\r\n            return node;\r\n    }\r\n}\r\n\r\nfunction simplifyNull(node: ASTNullNode): NodeType | undefined {\r\n    return undefined;\r\n}\r\n\r\nfunction simplifyNumber(node: ASTNumberNode): NodeType | undefined {\r\n    return node;\r\n}\r\n\r\nfunction simplifyVariable(node: ASTVariableNode): NodeType | undefined {\r\n    return node;\r\n}\r\n\r\nfunction simplifySymbol(node: ASTSymbolNode): NodeType | undefined {\r\n    return undefined;\r\n}\r\n\r\nfunction simplifyExpression(node: ASTExpressionNode): NodeType | undefined {\r\n    const sI = simplifyInput;\r\n\r\n    if (node.children) {\r\n        if (node.children.length === 1) {\r\n            const child: NodeType = node.children[0];\r\n            // Check if expression only contains a variable\r\n            if (child.type === ASTType.variable) {\r\n                return simplifyInput(child);\r\n            }\r\n            // Check if expression only contains a number\r\n            if (child.type === ASTType.number) {\r\n                return simplifyInput(child);\r\n            }\r\n        }\r\n\r\n        if (node.children.length === 2) {\r\n            const children = node.children;\r\n            // Unary Rule\r\n            node.children = _.compact([\r\n                sI(new ASTNumberNode(0)),\r\n                children[0],\r\n                sI(children[1])\r\n            ]);\r\n            return sI(node);\r\n        }\r\n\r\n        if (node.children.length === 3) {\r\n            const children = node.children;\r\n            // Remove brackets\r\n            if (children[0].type === ASTType.symbol) {\r\n                return simplifyInput(children[1]);\r\n            }\r\n\r\n            const operator = children[1];\r\n            if (operator.type === ASTType.symbol) {\r\n                switch (operator.symbol) {\r\n                    case '+':\r\n                        return sI(new ASTSummationNode(_.compact([\r\n                            sI(children[0]),\r\n                            sI(children[2]),\r\n                        ])));\r\n                    case '-': // Difference rule\r\n                        return sI(new ASTSummationNode(_.compact([\r\n                            sI(node.children[0]),\r\n                            sI(new ASTProductNode(_.compact([\r\n                                sI(new ASTNumberNode(-1)),\r\n                                sI(node.children[2])\r\n                            ]))),\r\n                        ])));\r\n                    case '*':\r\n                        return simplifyInput(new ASTProductNode(_.compact([\r\n                            simplifyInput(children[0]),\r\n                            simplifyInput(children[2]),\r\n                        ])));\r\n                    case '/': // Quotient rule\r\n                        return sI(new ASTProductNode(_.compact([\r\n                            sI(node.children[0]),\r\n                            sI(new ASTPowerNode(_.compact([\r\n                                sI(node.children[2]),\r\n                                sI(new ASTNumberNode(-1))\r\n                            ]))),\r\n                        ])));\r\n                    case '^':\r\n                        return sI(new ASTPowerNode(_.compact([\r\n                            sI(node.children[0]),\r\n                            sI(node.children[2]),\r\n                        ])));\r\n                    default:\r\n                        return node;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Simplify children\r\n    if (node.children) {\r\n        node.children = _.compact(node.children.map((child) => {\r\n            return simplifyInput(child);\r\n            // tslint:disable-next-line:no-any\r\n        }));\r\n    }\r\n    return node;\r\n}","import _ from 'lodash';\r\nimport { ASTNode, ASTType, NodeType } from '../parsing/nodes/node';\r\nimport { ASTNumberNode } from '../parsing/nodes/numberNode';\r\nimport { ASTPowerNode } from '../parsing/nodes/powerNode';\r\nimport { ASTProductNode } from '../parsing/nodes/productNode';\r\nimport { ASTSummationNode } from '../parsing/nodes/summationNode';\r\nimport { hashNode } from './hashing';\r\nimport { orderNode } from './ordering';\r\nimport { removeSingles } from './removeSingles';\r\n\r\nexport function smartSimplify(node: NodeType): NodeType {\r\n    node = orderNode(node);\r\n    hashNode(node);\r\n    if (node.type === ASTType.summation || node.type === ASTType.product || node.type === ASTType.power) {\r\n        // simplify children\r\n        node.children = node.children.map((child) => smartSimplify(child));\r\n    }\r\n\r\n    let ret: NodeType;\r\n    switch (node.type) {\r\n        case ASTType.summation:\r\n            ret = smartSimplifySummation(node);\r\n            break;\r\n        case ASTType.product:\r\n            ret = smartSimplifyProduct(node);\r\n            break;\r\n        default:\r\n            ret = node;\r\n            break;\r\n    }\r\n    ret = removeSingles(ret);\r\n    ret = orderNode(ret);\r\n    hashNode(ret);\r\n    return ret;\r\n}\r\n\r\nfunction smartSimplifySummation(node: ASTSummationNode): NodeType {\r\n    const map = new Map<string, { node: NodeType, mul: ASTSummationNode }>();\r\n    for (const x of node.children) {\r\n        let c: NodeType = new ASTNumberNode(1);\r\n        let n: NodeType = _.cloneDeep(x);\r\n        if ((x).type === ASTType.product) {\r\n            c = new ASTProductNode(_.cloneDeep(x.children.slice(0, x.children.length - 1)));\r\n            n = x.children[x.children.length - 1];\r\n            c = removeSingles(c);\r\n            n = removeSingles(n);\r\n            hashNode(c);\r\n            hashNode(n);\r\n\r\n        }\r\n        if (map.has(n.hash!)) {\r\n            const val = map.get(n.hash!);\r\n            val?.mul.children.push(c);\r\n        } else {\r\n            map.set(n.hash!, { node: _.cloneDeep(n), mul: new ASTSummationNode([c]) });\r\n        }\r\n    }\r\n    const children: NodeType[] = [];\r\n    map.forEach((pair) => {\r\n        if (pair.mul.children.length === 1) {\r\n            if ((pair.mul.children[0]).type === ASTType.number &&\r\n                (pair.mul.children[0] as ASTNumberNode).value === 1) {\r\n                children.push(pair.node);\r\n            } else {\r\n                children.push(new ASTProductNode([pair.mul.children[0], pair.node]));\r\n            }\r\n        } else {\r\n            children.push(new ASTProductNode([pair.mul, pair.node]));\r\n        }\r\n    });\r\n    return new ASTSummationNode(children);\r\n}\r\n\r\nfunction smartSimplifyProduct(node: ASTProductNode): NodeType {\r\n    const map = new Map<string, { node: NodeType, exp: ASTSummationNode }>();\r\n    for (const x of node.children) {\r\n        let e: NodeType = new ASTNumberNode(1);\r\n        let n: NodeType = _.cloneDeep(x);\r\n        if ((x).type === ASTType.power) {\r\n            n = _.cloneDeep((x as ASTPowerNode).children[0]);\r\n            e = _.cloneDeep((x as ASTPowerNode).children[1]);\r\n            hashNode(n);\r\n        }\r\n        if (map.has(n.hash!)) {\r\n            const val = map.get(n.hash!);\r\n            val?.exp.children.push(e);\r\n        } else {\r\n            map.set(n.hash!, { node: _.cloneDeep(n), exp: new ASTSummationNode([e]) });\r\n        }\r\n    }\r\n    const children: NodeType[] = [];\r\n    map.forEach((pair) => {\r\n        if (pair.exp.children.length === 1) {\r\n            if ((pair.exp.children[0]).type === ASTType.number &&\r\n                (pair.exp.children[0] as ASTNumberNode).value === 1) {\r\n                children.push(pair.node);\r\n            } else {\r\n                children.push(new ASTPowerNode([pair.node, pair.exp.children[0]]));\r\n            }\r\n        } else {\r\n            children.push(new ASTPowerNode([pair.node, pair.exp]));\r\n        }\r\n    });\r\n    return new ASTProductNode(children);\r\n}","import _ from 'lodash';\r\nimport { ASTType, NodeType } from '../parsing/nodes/node';\r\nimport { ASTPowerNode } from '../parsing/nodes/powerNode';\r\nimport { ASTProductNode } from '../parsing/nodes/productNode';\r\nimport { ASTSummationNode } from '../parsing/nodes/summationNode';\r\nimport { hashNode } from './hashing';\r\nimport { orderNode } from './ordering';\r\nimport { powerToProduct, powerToProduct2 } from './powerToProduct';\r\nimport { smartSimplify } from './smartSimplify';\r\n\r\n// export type PolyType = NodeType & {\r\n//     polyType: 'poly' | 'nonpoly' | 'constant';\r\n// };\r\n\r\n// export function toPolyType(node: NodeType, variable: string): PolyType {\r\n//     switch (node.type) {\r\n//         case ASTType.null:\r\n//             throw new Error('Cannot convert to polynomial');\r\n//         case ASTType.expression:\r\n//             throw new Error('Cannot convert to polynomial');\r\n//         case ASTType.symbol:\r\n//             throw new Error('Cannot convert to polynomial');\r\n//         case ASTType.number:\r\n//             return { ...node, polyType: 'constant' };\r\n//         case ASTType.variable:\r\n//             return node.variable === variable ?\r\n//                 { ...node, polyType: 'poly' } :\r\n//                 { ...node, polyType: 'constant' };\r\n//         case ASTType.summation:\r\n//             const polyTypeChildren = node.children\r\n//                 .map((child) => toPolyType(child, variable));\r\n//             if (polyTypeChildren.every((child) => child.polyType === 'constant')) {\r\n//                 return { ...node, children: polyTypeChildren, polyType: 'constant' };\r\n//             } else if (polyTypeChildren\r\n//                 .every((child) => child.polyType === 'poly' || child.polyType === 'constant')) {\r\n//                 return { ...node, children: polyTypeChildren, polyType: 'poly' };\r\n//             } else {\r\n//                 return { ...node, children: polyTypeChildren, polyType: 'nonpoly' };\r\n//             }\r\n//         case ASTType.power:\r\n//             const base = toPolyType(node.children[0], variable);\r\n//             const exp = toPolyType(node.children[1], variable);\r\n//             if (base.polyType === 'constant' && exp.polyType === 'constant') {\r\n//                 return { ...node, children: [base, exp], polyType: 'constant' };\r\n//             } else if () { }\r\n//         default:\r\n//             throw new Error('Cannot convert to polynomial');\r\n//     }\r\n// }\r\n\r\nexport type PolyFlag = 'constant' | 'nonpoly' | 'poly' | 'term';\r\n\r\nexport function toPolynomial(node: NodeType, variable: string): { node: NodeType, flag: PolyFlag } {\r\n    const childFlags: PolyFlag[] = [];\r\n    if (node.type === ASTType.summation || node.type === ASTType.product || node.type === ASTType.power) {\r\n        node.children = node.children.map((child) => {\r\n            const res = toPolynomial(child, variable);\r\n            childFlags.push(res.flag);\r\n            return res.node;\r\n        });\r\n    }\r\n\r\n    switch (node.type) {\r\n        case ASTType.number:\r\n            return { node, flag: 'constant' };\r\n        case ASTType.variable:\r\n            return { node, flag: node.variable === variable ? 'term' : 'constant' };\r\n        case ASTType.power: {\r\n            if (childFlags[0] === 'constant' && childFlags[1] === 'constant') {\r\n                return { node, flag: 'constant' };\r\n            } else if (childFlags[0] === 'term' && childFlags[1] === 'constant') {\r\n                return { node, flag: 'term' };\r\n            } else if (childFlags[0] === 'poly' && childFlags[1] === 'constant') {\r\n                node = powerToProduct2(node);\r\n                if (node.type === ASTType.product) {\r\n                    return toPolynomial(node, variable);\r\n                } else {\r\n                    return { node, flag: 'nonpoly' };\r\n                }\r\n            } else {\r\n                return { node, flag: 'nonpoly' };\r\n            }\r\n        }\r\n        case ASTType.product: {\r\n            if (childFlags.some((flag, i) => flag === 'nonpoly' ||\r\n                (flag === 'poly' && (node as ASTProductNode).children[i].type !== ASTType.summation))) {\r\n                return { node, flag: 'nonpoly' };\r\n            }\r\n            const constants = node.children.filter((child, i) => childFlags[i] === 'constant');\r\n            const terms = node.children.filter((child, i) => childFlags[i] === 'term');\r\n            let term: NodeType | undefined;\r\n            if (terms.length > 0) {\r\n                term = mergeTerms(terms);\r\n            }\r\n            const sums = node.children.filter((child, i) =>\r\n                child.type === ASTType.summation && childFlags[i] === 'poly') as ASTSummationNode[];\r\n            let sum: ASTSummationNode | undefined;\r\n            if (sums.length > 0) {\r\n                sum = multiplySums([...sums, ...(term ? [new ASTSummationNode([term])] : [])]);\r\n            }\r\n\r\n            if (sum) {\r\n                node = distribute(constants, sum);\r\n                return { node: toPolynomial(node, variable).node, flag: 'poly' };\r\n            } else if (term) {\r\n                node.children = [...constants, term];\r\n                return { node, flag: 'term' };\r\n            } else {\r\n                return { node, flag: 'constant' };\r\n            }\r\n        }\r\n        case ASTType.summation: {\r\n            if (childFlags.some((flag) => flag === 'nonpoly')) {\r\n                return { node, flag: 'nonpoly' };\r\n            }\r\n            if (childFlags.every((flag) => flag === 'constant')) {\r\n                return { node, flag: 'constant' };\r\n            }\r\n            if (childFlags.every((flag) => flag === 'term' || flag === 'constant')) {\r\n                return { node, flag: 'poly' };\r\n            }\r\n            const terms = node.children.filter((child, i) =>\r\n                childFlags[i] === 'constant' || childFlags[i] === 'term');\r\n            const sums = node.children.filter((child, i) =>\r\n                childFlags[i] === 'poly' && child.type === ASTType.summation\r\n            ) as ASTSummationNode[];\r\n            node.children = [...terms, ..._.flatten(sums.map((sum) => sum.children))];\r\n            return { node, flag: 'poly' };\r\n        }\r\n\r\n        default:\r\n            throw new Error('Cannot convert to polynomial');\r\n    }\r\n}\r\n\r\nfunction mergeTerms(terms: NodeType[]): NodeType {\r\n    if (terms.length === 1) {\r\n        return terms[0];\r\n    }\r\n    let node: NodeType = new ASTProductNode(terms);\r\n    node = smartSimplify(node);\r\n    return node;\r\n}\r\n\r\nfunction multiplySums(sums: ASTSummationNode[]): ASTSummationNode {\r\n    // let terms: NodeType[] = [];\r\n    if (sums.length === 1) {\r\n        return sums[0];\r\n    } else {\r\n        return new ASTSummationNode(_.flatten(sums[0].children.map((child0) =>\r\n            multiplySums(sums.slice(1)).children.map((child1) =>\r\n                new ASTProductNode([child0, child1])\r\n            )\r\n        )));\r\n    }\r\n}\r\n\r\nfunction distribute(constants: NodeType[], terms: ASTSummationNode): ASTSummationNode {\r\n    return new ASTSummationNode(terms.children.map((child) => {\r\n        if (child.type === ASTType.product) {\r\n            child.children = [...constants, ...child.children];\r\n            return child;\r\n        } else if (constants.length === 0) {\r\n            return child;\r\n        } else {\r\n            return new ASTProductNode([...constants, child]);\r\n        }\r\n    }));\r\n}","import _ from 'lodash';\r\nimport { ASTNode, ASTType, NodeType } from '../parsing/nodes/node';\r\nimport { ASTNumberNode } from '../parsing/nodes/numberNode';\r\nimport { ASTPowerNode } from '../parsing/nodes/powerNode';\r\nimport { ASTProductNode } from '../parsing/nodes/productNode';\r\nimport { ASTVariableNode } from '../parsing/nodes/variableNode';\r\n\r\nexport function powerToProduct(node: NodeType): NodeType {\r\n    if (node.type === ASTType.summation || node.type === ASTType.product || node.type === ASTType.power) {\r\n        node.children = node.children.map((child) => powerToProduct(child));\r\n    }\r\n    if (node.type === ASTType.power && (node.children[1]).type === ASTType.number &&\r\n        Number.isInteger((node.children[1] as ASTNumberNode).value) &&\r\n        (node.children[1] as ASTNumberNode).value > 1) {\r\n        if ((node.children[0]).type === ASTType.variable &&\r\n            (node.children[0] as ASTVariableNode).variable === 'x') {\r\n            return node;\r\n        }\r\n        const newNode = new ASTProductNode([node.children[0],\r\n        new ASTPowerNode([node.children[0],\r\n        new ASTNumberNode((node.children[1] as ASTNumberNode).value - 1)])]);\r\n        return newNode;\r\n    }\r\n    return node;\r\n}\r\n\r\nexport function powerToProduct2(node: NodeType): NodeType {\r\n    if (node.type === ASTType.summation || node.type === ASTType.product || node.type === ASTType.power) {\r\n        node.children = node.children.map((child) => powerToProduct2(child));\r\n    }\r\n    if (node.type === ASTType.power) {\r\n        const base = node.children[0];\r\n        const exp = node.children[1];\r\n        if (exp.type === ASTType.number &&\r\n            Number.isInteger((exp as ASTNumberNode).value) &&\r\n            exp.value > 1) {\r\n\r\n            const newNode = new ASTProductNode([]);\r\n            for (let i = 0; i < exp.value; i++) {\r\n                newNode.children.push(_.cloneDeep(base));\r\n            }\r\n            return newNode;\r\n        }\r\n    }\r\n    return node;\r\n}","import { ASTNode, ASTType } from './node';\r\n\r\nexport class ASTNullNode extends ASTNode {\r\n    public type: ASTType.null = ASTType.null;\r\n\r\n    constructor() {\r\n        super(ASTType.null);\r\n\r\n    }\r\n}","import { ASTNode, ASTType, NodeType } from '../parsing/nodes/node';\r\nimport { ASTNullNode } from '../parsing/nodes/nullNode';\r\nimport { ASTNumberNode } from '../parsing/nodes/numberNode';\r\nimport { ASTPowerNode } from '../parsing/nodes/powerNode';\r\nimport { ASTProductNode } from '../parsing/nodes/productNode';\r\nimport { ASTSummationNode } from '../parsing/nodes/summationNode';\r\nimport { applyNumerical } from './numerical';\r\n\r\nexport function isUndefined(node: NodeType): NodeType {\r\n    if (node.type === ASTType.summation || node.type === ASTType.product || node.type === ASTType.power) {\r\n        node.children = node.children.map((child) => isUndefined(child));\r\n    }\r\n\r\n    if ((node).type === ASTType.product) {\r\n        return undefinedProduct(node as ASTProductNode);\r\n    }\r\n    if ((node).type === ASTType.power) {\r\n        return undefinedPower(node as ASTPowerNode);\r\n    }\r\n\r\n    if ((node).type === ASTType.summation) {\r\n        return undefinedSum(node as ASTSummationNode);\r\n    }\r\n    \r\n    return node;\r\n}\r\n\r\nexport function undefinedProduct(node: ASTProductNode) {\r\n    for (let i = 0; i < (node.children.length); i++) {\r\n        if ((node.children[i]).type === ASTType.null) {\r\n            return new ASTNullNode();\r\n        }\r\n    } \r\n    return node;\r\n}\r\n\r\nexport function undefinedSum(node: ASTSummationNode) {\r\n    for (let i = 0; i < (node.children.length); i++) {\r\n        if ((node.children[i]).type === ASTType.null) {\r\n            return new ASTNullNode();\r\n        }\r\n    } \r\n    return node;\r\n}\r\n\r\nexport function undefinedPower(node: ASTPowerNode) {\r\n    const child0 = node.children[0];\r\n    const child1 = node.children[1];\r\n    const base = applyNumerical(child0);\r\n    const exponent = applyNumerical(child1);\r\n    if ((base).type === ASTType.number && \r\n    (exponent).type === ASTType.number) {\r\n        if (((base as ASTNumberNode).value === 0) &&\r\n        ((exponent as ASTNumberNode).value < 0)) {\r\n            return new ASTNullNode();\r\n        } else if (((base as ASTNumberNode).value < 0) &&\r\n        ((1 / (exponent as ASTNumberNode).value) % 2 === 0)) {\r\n            return new ASTNullNode();\r\n        }\r\n    }\r\n    for (let i = 0; i < (node.children.length); i++) {\r\n        if ((node.children[i]).type === ASTType.null) {\r\n            return new ASTNullNode();\r\n        }\r\n    } \r\n    return node;\r\n} ","/**\r\n * @license\r\n *\r\n * Copyright (c) 2018, IBM.\r\n *\r\n * This source code is licensed under the Apache License, Version 2.0 found in\r\n * the LICENSE.txt file in the root directory of this source tree.\r\n */\r\n\r\nimport { ANTLRErrorListener, CommonToken, RecognitionException, Recognizer, Token } from 'antlr4ts';\r\n// tslint:disable-next-line:no-submodule-imports\r\nimport { Override } from 'antlr4ts/Decorators';\r\n\r\nexport interface ParserResult {\r\n    // tslint:disable-next-line:no-any\r\n    ast: any;\r\n    errors: ParserError[];\r\n}\r\n\r\nexport interface ParserError {\r\n    line: number;\r\n    start: number;\r\n    end: number;\r\n    message: string;\r\n    level: ParseErrorLevel;\r\n}\r\n\r\nexport enum ParseErrorLevel {\r\n    ERROR,\r\n    WARNING\r\n}\r\n\r\nexport class ErrorListener implements ANTLRErrorListener<CommonToken> {\r\n    public errors: ParserError[] = [];\r\n\r\n    public addError(error: ParserError) {\r\n        this.errors.push(error);\r\n    }\r\n\r\n    public syntaxError<T extends Token>(\r\n        // tslint:disable-next-line:no-any\r\n        _recognizer: Recognizer<T, any>,\r\n        offendingSymbol: T | undefined,\r\n        line: number,\r\n        charPositionInLine: number,\r\n        msg: string,\r\n        _e: RecognitionException | undefined\r\n    ): void {\r\n        // _e contains the first token of the rule that failed\r\n        if (offendingSymbol && offendingSymbol.text) {\r\n            if (offendingSymbol.text === ')') {\r\n                this.errors.push({\r\n                    end: charPositionInLine + offendingSymbol.text.length,\r\n                    level: ParseErrorLevel.ERROR,\r\n                    line: line - 1,\r\n                    message: 'Expecting arguments before symbol )',\r\n                    start: charPositionInLine,\r\n                });\r\n            } else {\r\n                this.errors.push({\r\n                    end: charPositionInLine + offendingSymbol.text.length,\r\n                    level: ParseErrorLevel.ERROR,\r\n                    line: line - 1,\r\n                    message: msg,\r\n                    start: charPositionInLine,\r\n                });\r\n            }\r\n        }\r\n    }\r\n}","// Generated from src/parsing/grammars/Expression.g4 by ANTLR 4.7.3-SNAPSHOT\r\n\r\n\r\nimport { ATN } from \"antlr4ts/atn/ATN\";\r\nimport { ATNDeserializer } from \"antlr4ts/atn/ATNDeserializer\";\r\nimport { CharStream } from \"antlr4ts/CharStream\";\r\nimport { Lexer } from \"antlr4ts/Lexer\";\r\nimport { LexerATNSimulator } from \"antlr4ts/atn/LexerATNSimulator\";\r\nimport { NotNull } from \"antlr4ts/Decorators\";\r\nimport { Override } from \"antlr4ts/Decorators\";\r\nimport { RuleContext } from \"antlr4ts/RuleContext\";\r\nimport { Vocabulary } from \"antlr4ts/Vocabulary\";\r\nimport { VocabularyImpl } from \"antlr4ts/VocabularyImpl\";\r\n\r\nimport * as Utils from \"antlr4ts/misc/Utils\";\r\n\r\n\r\nexport class ExpressionLexer extends Lexer {\r\n\tpublic static readonly VARIABLE = 1;\r\n\tpublic static readonly SCIENTIFIC_NUMBER = 2;\r\n\tpublic static readonly LPAREN = 3;\r\n\tpublic static readonly RPAREN = 4;\r\n\tpublic static readonly PLUS = 5;\r\n\tpublic static readonly MINUS = 6;\r\n\tpublic static readonly TIMES = 7;\r\n\tpublic static readonly DIV = 8;\r\n\tpublic static readonly GT = 9;\r\n\tpublic static readonly LT = 10;\r\n\tpublic static readonly EQ = 11;\r\n\tpublic static readonly POINT = 12;\r\n\tpublic static readonly POW = 13;\r\n\tpublic static readonly WS = 14;\r\n\r\n\t// tslint:disable:no-trailing-whitespace\r\n\tpublic static readonly channelNames: string[] = [\r\n\t\t\"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\",\r\n\t];\r\n\r\n\t// tslint:disable:no-trailing-whitespace\r\n\tpublic static readonly modeNames: string[] = [\r\n\t\t\"DEFAULT_MODE\",\r\n\t];\r\n\r\n\tpublic static readonly ruleNames: string[] = [\r\n\t\t\"VARIABLE\", \"VALID_ID_START\", \"VALID_ID_CHAR\", \"SCIENTIFIC_NUMBER\", \"NUMBER\", \r\n\t\t\"UNSIGNED_INTEGER\", \"E\", \"SIGN\", \"LPAREN\", \"RPAREN\", \"PLUS\", \"MINUS\", \r\n\t\t\"TIMES\", \"DIV\", \"GT\", \"LT\", \"EQ\", \"POINT\", \"POW\", \"WS\",\r\n\t];\r\n\r\n\tprivate static readonly _LITERAL_NAMES: Array<string | undefined> = [\r\n\t\tundefined, undefined, undefined, \"'('\", \"')'\", \"'+'\", \"'-'\", \"'*'\", \"'/'\", \r\n\t\t\"'>'\", \"'<'\", \"'='\", \"'.'\", \"'^'\",\r\n\t];\r\n\tprivate static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [\r\n\t\tundefined, \"VARIABLE\", \"SCIENTIFIC_NUMBER\", \"LPAREN\", \"RPAREN\", \"PLUS\", \r\n\t\t\"MINUS\", \"TIMES\", \"DIV\", \"GT\", \"LT\", \"EQ\", \"POINT\", \"POW\", \"WS\",\r\n\t];\r\n\tpublic static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ExpressionLexer._LITERAL_NAMES, ExpressionLexer._SYMBOLIC_NAMES, []);\r\n\r\n\t// @Override\r\n\t// @NotNull\r\n\tpublic get vocabulary(): Vocabulary {\r\n\t\treturn ExpressionLexer.VOCABULARY;\r\n\t}\r\n\t// tslint:enable:no-trailing-whitespace\r\n\r\n\r\n\tconstructor(input: CharStream) {\r\n\t\tsuper(input);\r\n\t\tthis._interp = new LexerATNSimulator(ExpressionLexer._ATN, this);\r\n\t}\r\n\r\n\t// @Override\r\n\tpublic get grammarFileName(): string { return \"Expression.g4\"; }\r\n\r\n\t// @Override\r\n\tpublic get ruleNames(): string[] { return ExpressionLexer.ruleNames; }\r\n\r\n\t// @Override\r\n\tpublic get serializedATN(): string { return ExpressionLexer._serializedATN; }\r\n\r\n\t// @Override\r\n\tpublic get channelNames(): string[] { return ExpressionLexer.channelNames; }\r\n\r\n\t// @Override\r\n\tpublic get modeNames(): string[] { return ExpressionLexer.modeNames; }\r\n\r\n\tpublic static readonly _serializedATN: string =\r\n\t\t\"\\x03\\uC91D\\uCABA\\u058D\\uAFBA\\u4F53\\u0607\\uEA8B\\uC241\\x02\\x10u\\b\\x01\\x04\" +\r\n\t\t\"\\x02\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\" +\r\n\t\t\"\\x07\\t\\x07\\x04\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\v\\t\\v\\x04\\f\\t\\f\\x04\\r\\t\\r\" +\r\n\t\t\"\\x04\\x0E\\t\\x0E\\x04\\x0F\\t\\x0F\\x04\\x10\\t\\x10\\x04\\x11\\t\\x11\\x04\\x12\\t\\x12\" +\r\n\t\t\"\\x04\\x13\\t\\x13\\x04\\x14\\t\\x14\\x04\\x15\\t\\x15\\x03\\x02\\x03\\x02\\x07\\x02.\\n\" +\r\n\t\t\"\\x02\\f\\x02\\x0E\\x021\\v\\x02\\x03\\x03\\x05\\x034\\n\\x03\\x03\\x04\\x03\\x04\\x05\\x04\" +\r\n\t\t\"8\\n\\x04\\x03\\x05\\x03\\x05\\x03\\x05\\x05\\x05=\\n\\x05\\x03\\x05\\x03\\x05\\x05\\x05\" +\r\n\t\t\"A\\n\\x05\\x03\\x06\\x06\\x06D\\n\\x06\\r\\x06\\x0E\\x06E\\x03\\x06\\x03\\x06\\x06\\x06\" +\r\n\t\t\"J\\n\\x06\\r\\x06\\x0E\\x06K\\x05\\x06N\\n\\x06\\x03\\x07\\x06\\x07Q\\n\\x07\\r\\x07\\x0E\" +\r\n\t\t\"\\x07R\\x03\\b\\x03\\b\\x03\\t\\x03\\t\\x03\\n\\x03\\n\\x03\\v\\x03\\v\\x03\\f\\x03\\f\\x03\" +\r\n\t\t\"\\r\\x03\\r\\x03\\x0E\\x03\\x0E\\x03\\x0F\\x03\\x0F\\x03\\x10\\x03\\x10\\x03\\x11\\x03\\x11\" +\r\n\t\t\"\\x03\\x12\\x03\\x12\\x03\\x13\\x03\\x13\\x03\\x14\\x03\\x14\\x03\\x15\\x06\\x15p\\n\\x15\" +\r\n\t\t\"\\r\\x15\\x0E\\x15q\\x03\\x15\\x03\\x15\\x02\\x02\\x02\\x16\\x03\\x02\\x03\\x05\\x02\\x02\" +\r\n\t\t\"\\x07\\x02\\x02\\t\\x02\\x04\\v\\x02\\x02\\r\\x02\\x02\\x0F\\x02\\x02\\x11\\x02\\x02\\x13\" +\r\n\t\t\"\\x02\\x05\\x15\\x02\\x06\\x17\\x02\\x07\\x19\\x02\\b\\x1B\\x02\\t\\x1D\\x02\\n\\x1F\\x02\" +\r\n\t\t\"\\v!\\x02\\f#\\x02\\r%\\x02\\x0E\\'\\x02\\x0F)\\x02\\x10\\x03\\x02\\x06\\x05\\x02C\\\\aa\" +\r\n\t\t\"c|\\x04\\x02GGgg\\x04\\x02--//\\x05\\x02\\v\\f\\x0F\\x0F\\\"\\\"\\x02w\\x02\\x03\\x03\\x02\" +\r\n\t\t\"\\x02\\x02\\x02\\t\\x03\\x02\\x02\\x02\\x02\\x13\\x03\\x02\\x02\\x02\\x02\\x15\\x03\\x02\" +\r\n\t\t\"\\x02\\x02\\x02\\x17\\x03\\x02\\x02\\x02\\x02\\x19\\x03\\x02\\x02\\x02\\x02\\x1B\\x03\\x02\" +\r\n\t\t\"\\x02\\x02\\x02\\x1D\\x03\\x02\\x02\\x02\\x02\\x1F\\x03\\x02\\x02\\x02\\x02!\\x03\\x02\" +\r\n\t\t\"\\x02\\x02\\x02#\\x03\\x02\\x02\\x02\\x02%\\x03\\x02\\x02\\x02\\x02\\'\\x03\\x02\\x02\\x02\" +\r\n\t\t\"\\x02)\\x03\\x02\\x02\\x02\\x03+\\x03\\x02\\x02\\x02\\x053\\x03\\x02\\x02\\x02\\x077\\x03\" +\r\n\t\t\"\\x02\\x02\\x02\\t9\\x03\\x02\\x02\\x02\\vC\\x03\\x02\\x02\\x02\\rP\\x03\\x02\\x02\\x02\" +\r\n\t\t\"\\x0FT\\x03\\x02\\x02\\x02\\x11V\\x03\\x02\\x02\\x02\\x13X\\x03\\x02\\x02\\x02\\x15Z\\x03\" +\r\n\t\t\"\\x02\\x02\\x02\\x17\\\\\\x03\\x02\\x02\\x02\\x19^\\x03\\x02\\x02\\x02\\x1B`\\x03\\x02\\x02\" +\r\n\t\t\"\\x02\\x1Db\\x03\\x02\\x02\\x02\\x1Fd\\x03\\x02\\x02\\x02!f\\x03\\x02\\x02\\x02#h\\x03\" +\r\n\t\t\"\\x02\\x02\\x02%j\\x03\\x02\\x02\\x02\\'l\\x03\\x02\\x02\\x02)o\\x03\\x02\\x02\\x02+/\" +\r\n\t\t\"\\x05\\x05\\x03\\x02,.\\x05\\x07\\x04\\x02-,\\x03\\x02\\x02\\x02.1\\x03\\x02\\x02\\x02\" +\r\n\t\t\"/-\\x03\\x02\\x02\\x02/0\\x03\\x02\\x02\\x020\\x04\\x03\\x02\\x02\\x021/\\x03\\x02\\x02\" +\r\n\t\t\"\\x0224\\t\\x02\\x02\\x0232\\x03\\x02\\x02\\x024\\x06\\x03\\x02\\x02\\x0258\\x05\\x05\" +\r\n\t\t\"\\x03\\x0268\\x042;\\x0275\\x03\\x02\\x02\\x0276\\x03\\x02\\x02\\x028\\b\\x03\\x02\\x02\" +\r\n\t\t\"\\x029@\\x05\\v\\x06\\x02:<\\x05\\x0F\\b\\x02;=\\x05\\x11\\t\\x02<;\\x03\\x02\\x02\\x02\" +\r\n\t\t\"<=\\x03\\x02\\x02\\x02=>\\x03\\x02\\x02\\x02>?\\x05\\r\\x07\\x02?A\\x03\\x02\\x02\\x02\" +\r\n\t\t\"@:\\x03\\x02\\x02\\x02@A\\x03\\x02\\x02\\x02A\\n\\x03\\x02\\x02\\x02BD\\x042;\\x02CB\" +\r\n\t\t\"\\x03\\x02\\x02\\x02DE\\x03\\x02\\x02\\x02EC\\x03\\x02\\x02\\x02EF\\x03\\x02\\x02\\x02\" +\r\n\t\t\"FM\\x03\\x02\\x02\\x02GI\\x070\\x02\\x02HJ\\x042;\\x02IH\\x03\\x02\\x02\\x02JK\\x03\" +\r\n\t\t\"\\x02\\x02\\x02KI\\x03\\x02\\x02\\x02KL\\x03\\x02\\x02\\x02LN\\x03\\x02\\x02\\x02MG\\x03\" +\r\n\t\t\"\\x02\\x02\\x02MN\\x03\\x02\\x02\\x02N\\f\\x03\\x02\\x02\\x02OQ\\x042;\\x02PO\\x03\\x02\" +\r\n\t\t\"\\x02\\x02QR\\x03\\x02\\x02\\x02RP\\x03\\x02\\x02\\x02RS\\x03\\x02\\x02\\x02S\\x0E\\x03\" +\r\n\t\t\"\\x02\\x02\\x02TU\\t\\x03\\x02\\x02U\\x10\\x03\\x02\\x02\\x02VW\\t\\x04\\x02\\x02W\\x12\" +\r\n\t\t\"\\x03\\x02\\x02\\x02XY\\x07*\\x02\\x02Y\\x14\\x03\\x02\\x02\\x02Z[\\x07+\\x02\\x02[\\x16\" +\r\n\t\t\"\\x03\\x02\\x02\\x02\\\\]\\x07-\\x02\\x02]\\x18\\x03\\x02\\x02\\x02^_\\x07/\\x02\\x02_\" +\r\n\t\t\"\\x1A\\x03\\x02\\x02\\x02`a\\x07,\\x02\\x02a\\x1C\\x03\\x02\\x02\\x02bc\\x071\\x02\\x02\" +\r\n\t\t\"c\\x1E\\x03\\x02\\x02\\x02de\\x07@\\x02\\x02e \\x03\\x02\\x02\\x02fg\\x07>\\x02\\x02\" +\r\n\t\t\"g\\\"\\x03\\x02\\x02\\x02hi\\x07?\\x02\\x02i$\\x03\\x02\\x02\\x02jk\\x070\\x02\\x02k&\" +\r\n\t\t\"\\x03\\x02\\x02\\x02lm\\x07`\\x02\\x02m(\\x03\\x02\\x02\\x02np\\t\\x05\\x02\\x02on\\x03\" +\r\n\t\t\"\\x02\\x02\\x02pq\\x03\\x02\\x02\\x02qo\\x03\\x02\\x02\\x02qr\\x03\\x02\\x02\\x02rs\\x03\" +\r\n\t\t\"\\x02\\x02\\x02st\\b\\x15\\x02\\x02t*\\x03\\x02\\x02\\x02\\r\\x02/37<@EKMRq\\x03\\b\\x02\" +\r\n\t\t\"\\x02\";\r\n\tpublic static __ATN: ATN;\r\n\tpublic static get _ATN(): ATN {\r\n\t\tif (!ExpressionLexer.__ATN) {\r\n\t\t\tExpressionLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ExpressionLexer._serializedATN));\r\n\t\t}\r\n\r\n\t\treturn ExpressionLexer.__ATN;\r\n\t}\r\n\r\n}\r\n\r\n","// Generated from src/parsing/grammars/Expression.g4 by ANTLR 4.7.3-SNAPSHOT\r\n\r\n\r\nimport { ATN } from \"antlr4ts/atn/ATN\";\r\nimport { ATNDeserializer } from \"antlr4ts/atn/ATNDeserializer\";\r\nimport { FailedPredicateException } from \"antlr4ts/FailedPredicateException\";\r\nimport { NotNull } from \"antlr4ts/Decorators\";\r\nimport { NoViableAltException } from \"antlr4ts/NoViableAltException\";\r\nimport { Override } from \"antlr4ts/Decorators\";\r\nimport { Parser } from \"antlr4ts/Parser\";\r\nimport { ParserRuleContext } from \"antlr4ts/ParserRuleContext\";\r\nimport { ParserATNSimulator } from \"antlr4ts/atn/ParserATNSimulator\";\r\nimport { ParseTreeListener } from \"antlr4ts/tree/ParseTreeListener\";\r\nimport { ParseTreeVisitor } from \"antlr4ts/tree/ParseTreeVisitor\";\r\nimport { RecognitionException } from \"antlr4ts/RecognitionException\";\r\nimport { RuleContext } from \"antlr4ts/RuleContext\";\r\n//import { RuleVersion } from \"antlr4ts/RuleVersion\";\r\nimport { TerminalNode } from \"antlr4ts/tree/TerminalNode\";\r\nimport { Token } from \"antlr4ts/Token\";\r\nimport { TokenStream } from \"antlr4ts/TokenStream\";\r\nimport { Vocabulary } from \"antlr4ts/Vocabulary\";\r\nimport { VocabularyImpl } from \"antlr4ts/VocabularyImpl\";\r\n\r\nimport * as Utils from \"antlr4ts/misc/Utils\";\r\n\r\nimport { ExpressionListener } from \"./ExpressionListener\";\r\nimport { ExpressionVisitor } from \"./ExpressionVisitor\";\r\n\r\n\r\nexport class ExpressionParser extends Parser {\r\n\tpublic static readonly VARIABLE = 1;\r\n\tpublic static readonly SCIENTIFIC_NUMBER = 2;\r\n\tpublic static readonly LPAREN = 3;\r\n\tpublic static readonly RPAREN = 4;\r\n\tpublic static readonly PLUS = 5;\r\n\tpublic static readonly MINUS = 6;\r\n\tpublic static readonly TIMES = 7;\r\n\tpublic static readonly DIV = 8;\r\n\tpublic static readonly GT = 9;\r\n\tpublic static readonly LT = 10;\r\n\tpublic static readonly EQ = 11;\r\n\tpublic static readonly POINT = 12;\r\n\tpublic static readonly POW = 13;\r\n\tpublic static readonly WS = 14;\r\n\tpublic static readonly RULE_file = 0;\r\n\tpublic static readonly RULE_expression = 1;\r\n\tpublic static readonly RULE_atom = 2;\r\n\tpublic static readonly RULE_scientific = 3;\r\n\tpublic static readonly RULE_variable = 4;\r\n\tpublic static readonly RULE_relop = 5;\r\n\t// tslint:disable:no-trailing-whitespace\r\n\tpublic static readonly ruleNames: string[] = [\r\n\t\t\"file\", \"expression\", \"atom\", \"scientific\", \"variable\", \"relop\",\r\n\t];\r\n\r\n\tprivate static readonly _LITERAL_NAMES: Array<string | undefined> = [\r\n\t\tundefined, undefined, undefined, \"'('\", \"')'\", \"'+'\", \"'-'\", \"'*'\", \"'/'\", \r\n\t\t\"'>'\", \"'<'\", \"'='\", \"'.'\", \"'^'\",\r\n\t];\r\n\tprivate static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [\r\n\t\tundefined, \"VARIABLE\", \"SCIENTIFIC_NUMBER\", \"LPAREN\", \"RPAREN\", \"PLUS\", \r\n\t\t\"MINUS\", \"TIMES\", \"DIV\", \"GT\", \"LT\", \"EQ\", \"POINT\", \"POW\", \"WS\",\r\n\t];\r\n\tpublic static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ExpressionParser._LITERAL_NAMES, ExpressionParser._SYMBOLIC_NAMES, []);\r\n\r\n\t// @Override\r\n\t// @NotNull\r\n\tpublic get vocabulary(): Vocabulary {\r\n\t\treturn ExpressionParser.VOCABULARY;\r\n\t}\r\n\t// tslint:enable:no-trailing-whitespace\r\n\r\n\t// @Override\r\n\tpublic get grammarFileName(): string { return \"Expression.g4\"; }\r\n\r\n\t// @Override\r\n\tpublic get ruleNames(): string[] { return ExpressionParser.ruleNames; }\r\n\r\n\t// @Override\r\n\tpublic get serializedATN(): string { return ExpressionParser._serializedATN; }\r\n\r\n\tconstructor(input: TokenStream) {\r\n\t\tsuper(input);\r\n\t\tthis._interp = new ParserATNSimulator(ExpressionParser._ATN, this);\r\n\t}\r\n\t// @RuleVersion(0)\r\n\tpublic file(): FileContext {\r\n\t\tlet _localctx: FileContext = new FileContext(this._ctx, this.state);\r\n\t\tthis.enterRule(_localctx, 0, ExpressionParser.RULE_file);\r\n\t\ttry {\r\n\t\t\tthis.enterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tthis.state = 12;\r\n\t\t\tthis.expression(0);\r\n\t\t\tthis.state = 13;\r\n\t\t\tthis.match(ExpressionParser.EOF);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (re) {\r\n\t\t\tif (re instanceof RecognitionException) {\r\n\t\t\t\t_localctx.exception = re;\r\n\t\t\t\tthis._errHandler.reportError(this, re);\r\n\t\t\t\tthis._errHandler.recover(this, re);\r\n\t\t\t} else {\r\n\t\t\t\tthrow re;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tthis.exitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic expression(): ExpressionContext;\r\n\tpublic expression(_p: number): ExpressionContext;\r\n\t// @RuleVersion(0)\r\n\tpublic expression(_p?: number): ExpressionContext {\r\n\t\tif (_p === undefined) {\r\n\t\t\t_p = 0;\r\n\t\t}\r\n\r\n\t\tlet _parentctx: ParserRuleContext = this._ctx;\r\n\t\tlet _parentState: number = this.state;\r\n\t\tlet _localctx: ExpressionContext = new ExpressionContext(this._ctx, _parentState);\r\n\t\tlet _prevctx: ExpressionContext = _localctx;\r\n\t\tlet _startState: number = 2;\r\n\t\tthis.enterRecursionRule(_localctx, 2, ExpressionParser.RULE_expression, _p);\r\n\t\tlet _la: number;\r\n\t\ttry {\r\n\t\t\tlet _alt: number;\r\n\t\t\tthis.enterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tthis.state = 24;\r\n\t\t\tthis._errHandler.sync(this);\r\n\t\t\tswitch (this._input.LA(1)) {\r\n\t\t\tcase ExpressionParser.LPAREN:\r\n\t\t\t\t{\r\n\t\t\t\tthis.state = 16;\r\n\t\t\t\tthis.match(ExpressionParser.LPAREN);\r\n\t\t\t\tthis.state = 17;\r\n\t\t\t\tthis.expression(0);\r\n\t\t\t\tthis.state = 18;\r\n\t\t\t\tthis.match(ExpressionParser.RPAREN);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase ExpressionParser.PLUS:\r\n\t\t\t\t{\r\n\t\t\t\tthis.state = 20;\r\n\t\t\t\tthis.match(ExpressionParser.PLUS);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase ExpressionParser.MINUS:\r\n\t\t\t\t{\r\n\t\t\t\tthis.state = 21;\r\n\t\t\t\tthis.match(ExpressionParser.MINUS);\r\n\t\t\t\tthis.state = 22;\r\n\t\t\t\tthis.atom();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase ExpressionParser.VARIABLE:\r\n\t\t\tcase ExpressionParser.SCIENTIFIC_NUMBER:\r\n\t\t\t\t{\r\n\t\t\t\tthis.state = 23;\r\n\t\t\t\tthis.atom();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new NoViableAltException(this);\r\n\t\t\t}\r\n\t\t\tthis._ctx._stop = this._input.tryLT(-1);\r\n\t\t\tthis.state = 37;\r\n\t\t\tthis._errHandler.sync(this);\r\n\t\t\t_alt = this.interpreter.adaptivePredict(this._input, 2, this._ctx);\r\n\t\t\twhile (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {\r\n\t\t\t\tif (_alt === 1) {\r\n\t\t\t\t\tif (this._parseListeners != null) {\r\n\t\t\t\t\t\tthis.triggerExitRuleEvent();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t_prevctx = _localctx;\r\n\t\t\t\t\t{\r\n\t\t\t\t\tthis.state = 35;\r\n\t\t\t\t\tthis._errHandler.sync(this);\r\n\t\t\t\t\tswitch ( this.interpreter.adaptivePredict(this._input, 1, this._ctx) ) {\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t_localctx = new ExpressionContext(_parentctx, _parentState);\r\n\t\t\t\t\t\tthis.pushNewRecursionContext(_localctx, _startState, ExpressionParser.RULE_expression);\r\n\t\t\t\t\t\tthis.state = 26;\r\n\t\t\t\t\t\tif (!(this.precpred(this._ctx, 7))) {\r\n\t\t\t\t\t\t\tthrow new FailedPredicateException(this, \"this.precpred(this._ctx, 7)\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.state = 27;\r\n\t\t\t\t\t\tthis.match(ExpressionParser.POW);\r\n\t\t\t\t\t\tthis.state = 28;\r\n\t\t\t\t\t\tthis.expression(8);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t_localctx = new ExpressionContext(_parentctx, _parentState);\r\n\t\t\t\t\t\tthis.pushNewRecursionContext(_localctx, _startState, ExpressionParser.RULE_expression);\r\n\t\t\t\t\t\tthis.state = 29;\r\n\t\t\t\t\t\tif (!(this.precpred(this._ctx, 6))) {\r\n\t\t\t\t\t\t\tthrow new FailedPredicateException(this, \"this.precpred(this._ctx, 6)\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.state = 30;\r\n\t\t\t\t\t\t_la = this._input.LA(1);\r\n\t\t\t\t\t\tif (!(_la === ExpressionParser.TIMES || _la === ExpressionParser.DIV)) {\r\n\t\t\t\t\t\tthis._errHandler.recoverInline(this);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif (this._input.LA(1) === Token.EOF) {\r\n\t\t\t\t\t\t\t\tthis.matchedEOF = true;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tthis._errHandler.reportMatch(this);\r\n\t\t\t\t\t\t\tthis.consume();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.state = 31;\r\n\t\t\t\t\t\tthis.expression(7);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t_localctx = new ExpressionContext(_parentctx, _parentState);\r\n\t\t\t\t\t\tthis.pushNewRecursionContext(_localctx, _startState, ExpressionParser.RULE_expression);\r\n\t\t\t\t\t\tthis.state = 32;\r\n\t\t\t\t\t\tif (!(this.precpred(this._ctx, 5))) {\r\n\t\t\t\t\t\t\tthrow new FailedPredicateException(this, \"this.precpred(this._ctx, 5)\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.state = 33;\r\n\t\t\t\t\t\t_la = this._input.LA(1);\r\n\t\t\t\t\t\tif (!(_la === ExpressionParser.PLUS || _la === ExpressionParser.MINUS)) {\r\n\t\t\t\t\t\tthis._errHandler.recoverInline(this);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif (this._input.LA(1) === Token.EOF) {\r\n\t\t\t\t\t\t\t\tthis.matchedEOF = true;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tthis._errHandler.reportMatch(this);\r\n\t\t\t\t\t\t\tthis.consume();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.state = 34;\r\n\t\t\t\t\t\tthis.expression(6);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.state = 39;\r\n\t\t\t\tthis._errHandler.sync(this);\r\n\t\t\t\t_alt = this.interpreter.adaptivePredict(this._input, 2, this._ctx);\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (re) {\r\n\t\t\tif (re instanceof RecognitionException) {\r\n\t\t\t\t_localctx.exception = re;\r\n\t\t\t\tthis._errHandler.reportError(this, re);\r\n\t\t\t\tthis._errHandler.recover(this, re);\r\n\t\t\t} else {\r\n\t\t\t\tthrow re;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tthis.unrollRecursionContexts(_parentctx);\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\t// @RuleVersion(0)\r\n\tpublic atom(): AtomContext {\r\n\t\tlet _localctx: AtomContext = new AtomContext(this._ctx, this.state);\r\n\t\tthis.enterRule(_localctx, 4, ExpressionParser.RULE_atom);\r\n\t\ttry {\r\n\t\t\tthis.state = 42;\r\n\t\t\tthis._errHandler.sync(this);\r\n\t\t\tswitch (this._input.LA(1)) {\r\n\t\t\tcase ExpressionParser.SCIENTIFIC_NUMBER:\r\n\t\t\t\tthis.enterOuterAlt(_localctx, 1);\r\n\t\t\t\t{\r\n\t\t\t\tthis.state = 40;\r\n\t\t\t\tthis.scientific();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase ExpressionParser.VARIABLE:\r\n\t\t\t\tthis.enterOuterAlt(_localctx, 2);\r\n\t\t\t\t{\r\n\t\t\t\tthis.state = 41;\r\n\t\t\t\tthis.variable();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new NoViableAltException(this);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (re) {\r\n\t\t\tif (re instanceof RecognitionException) {\r\n\t\t\t\t_localctx.exception = re;\r\n\t\t\t\tthis._errHandler.reportError(this, re);\r\n\t\t\t\tthis._errHandler.recover(this, re);\r\n\t\t\t} else {\r\n\t\t\t\tthrow re;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tthis.exitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\t// @RuleVersion(0)\r\n\tpublic scientific(): ScientificContext {\r\n\t\tlet _localctx: ScientificContext = new ScientificContext(this._ctx, this.state);\r\n\t\tthis.enterRule(_localctx, 6, ExpressionParser.RULE_scientific);\r\n\t\ttry {\r\n\t\t\tthis.enterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tthis.state = 44;\r\n\t\t\tthis.match(ExpressionParser.SCIENTIFIC_NUMBER);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (re) {\r\n\t\t\tif (re instanceof RecognitionException) {\r\n\t\t\t\t_localctx.exception = re;\r\n\t\t\t\tthis._errHandler.reportError(this, re);\r\n\t\t\t\tthis._errHandler.recover(this, re);\r\n\t\t\t} else {\r\n\t\t\t\tthrow re;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tthis.exitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\t// @RuleVersion(0)\r\n\tpublic variable(): VariableContext {\r\n\t\tlet _localctx: VariableContext = new VariableContext(this._ctx, this.state);\r\n\t\tthis.enterRule(_localctx, 8, ExpressionParser.RULE_variable);\r\n\t\ttry {\r\n\t\t\tthis.enterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tthis.state = 46;\r\n\t\t\tthis.match(ExpressionParser.VARIABLE);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (re) {\r\n\t\t\tif (re instanceof RecognitionException) {\r\n\t\t\t\t_localctx.exception = re;\r\n\t\t\t\tthis._errHandler.reportError(this, re);\r\n\t\t\t\tthis._errHandler.recover(this, re);\r\n\t\t\t} else {\r\n\t\t\t\tthrow re;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tthis.exitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\t// @RuleVersion(0)\r\n\tpublic relop(): RelopContext {\r\n\t\tlet _localctx: RelopContext = new RelopContext(this._ctx, this.state);\r\n\t\tthis.enterRule(_localctx, 10, ExpressionParser.RULE_relop);\r\n\t\tlet _la: number;\r\n\t\ttry {\r\n\t\t\tthis.enterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tthis.state = 48;\r\n\t\t\t_la = this._input.LA(1);\r\n\t\t\tif (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ExpressionParser.GT) | (1 << ExpressionParser.LT) | (1 << ExpressionParser.EQ))) !== 0))) {\r\n\t\t\tthis._errHandler.recoverInline(this);\r\n\t\t\t} else {\r\n\t\t\t\tif (this._input.LA(1) === Token.EOF) {\r\n\t\t\t\t\tthis.matchedEOF = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._errHandler.reportMatch(this);\r\n\t\t\t\tthis.consume();\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (re) {\r\n\t\t\tif (re instanceof RecognitionException) {\r\n\t\t\t\t_localctx.exception = re;\r\n\t\t\t\tthis._errHandler.reportError(this, re);\r\n\t\t\t\tthis._errHandler.recover(this, re);\r\n\t\t\t} else {\r\n\t\t\t\tthrow re;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tthis.exitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {\r\n\t\tswitch (ruleIndex) {\r\n\t\tcase 1:\r\n\t\t\treturn this.expression_sempred(_localctx as ExpressionContext, predIndex);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tprivate expression_sempred(_localctx: ExpressionContext, predIndex: number): boolean {\r\n\t\tswitch (predIndex) {\r\n\t\tcase 0:\r\n\t\t\treturn this.precpred(this._ctx, 7);\r\n\r\n\t\tcase 1:\r\n\t\t\treturn this.precpred(this._ctx, 6);\r\n\r\n\t\tcase 2:\r\n\t\t\treturn this.precpred(this._ctx, 5);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tpublic static readonly _serializedATN: string =\r\n\t\t\"\\x03\\uC91D\\uCABA\\u058D\\uAFBA\\u4F53\\u0607\\uEA8B\\uC241\\x03\\x105\\x04\\x02\" +\r\n\t\t\"\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\\x07\" +\r\n\t\t\"\\t\\x07\\x03\\x02\\x03\\x02\\x03\\x02\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\" +\r\n\t\t\"\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x05\\x03\\x1B\\n\\x03\\x03\\x03\\x03\\x03\\x03\" +\r\n\t\t\"\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x07\\x03&\\n\\x03\\f\" +\r\n\t\t\"\\x03\\x0E\\x03)\\v\\x03\\x03\\x04\\x03\\x04\\x05\\x04-\\n\\x04\\x03\\x05\\x03\\x05\\x03\" +\r\n\t\t\"\\x06\\x03\\x06\\x03\\x07\\x03\\x07\\x03\\x07\\x02\\x02\\x03\\x04\\b\\x02\\x02\\x04\\x02\" +\r\n\t\t\"\\x06\\x02\\b\\x02\\n\\x02\\f\\x02\\x02\\x05\\x03\\x02\\t\\n\\x03\\x02\\x07\\b\\x03\\x02\\v\" +\r\n\t\t\"\\r\\x025\\x02\\x0E\\x03\\x02\\x02\\x02\\x04\\x1A\\x03\\x02\\x02\\x02\\x06,\\x03\\x02\\x02\" +\r\n\t\t\"\\x02\\b.\\x03\\x02\\x02\\x02\\n0\\x03\\x02\\x02\\x02\\f2\\x03\\x02\\x02\\x02\\x0E\\x0F\" +\r\n\t\t\"\\x05\\x04\\x03\\x02\\x0F\\x10\\x07\\x02\\x02\\x03\\x10\\x03\\x03\\x02\\x02\\x02\\x11\\x12\" +\r\n\t\t\"\\b\\x03\\x01\\x02\\x12\\x13\\x07\\x05\\x02\\x02\\x13\\x14\\x05\\x04\\x03\\x02\\x14\\x15\" +\r\n\t\t\"\\x07\\x06\\x02\\x02\\x15\\x1B\\x03\\x02\\x02\\x02\\x16\\x1B\\x07\\x07\\x02\\x02\\x17\\x18\" +\r\n\t\t\"\\x07\\b\\x02\\x02\\x18\\x1B\\x05\\x06\\x04\\x02\\x19\\x1B\\x05\\x06\\x04\\x02\\x1A\\x11\" +\r\n\t\t\"\\x03\\x02\\x02\\x02\\x1A\\x16\\x03\\x02\\x02\\x02\\x1A\\x17\\x03\\x02\\x02\\x02\\x1A\\x19\" +\r\n\t\t\"\\x03\\x02\\x02\\x02\\x1B\\'\\x03\\x02\\x02\\x02\\x1C\\x1D\\f\\t\\x02\\x02\\x1D\\x1E\\x07\" +\r\n\t\t\"\\x0F\\x02\\x02\\x1E&\\x05\\x04\\x03\\n\\x1F \\f\\b\\x02\\x02 !\\t\\x02\\x02\\x02!&\\x05\" +\r\n\t\t\"\\x04\\x03\\t\\\"#\\f\\x07\\x02\\x02#$\\t\\x03\\x02\\x02$&\\x05\\x04\\x03\\b%\\x1C\\x03\\x02\" +\r\n\t\t\"\\x02\\x02%\\x1F\\x03\\x02\\x02\\x02%\\\"\\x03\\x02\\x02\\x02&)\\x03\\x02\\x02\\x02\\'%\" +\r\n\t\t\"\\x03\\x02\\x02\\x02\\'(\\x03\\x02\\x02\\x02(\\x05\\x03\\x02\\x02\\x02)\\'\\x03\\x02\\x02\" +\r\n\t\t\"\\x02*-\\x05\\b\\x05\\x02+-\\x05\\n\\x06\\x02,*\\x03\\x02\\x02\\x02,+\\x03\\x02\\x02\\x02\" +\r\n\t\t\"-\\x07\\x03\\x02\\x02\\x02./\\x07\\x04\\x02\\x02/\\t\\x03\\x02\\x02\\x0201\\x07\\x03\\x02\" +\r\n\t\t\"\\x021\\v\\x03\\x02\\x02\\x0223\\t\\x04\\x02\\x023\\r\\x03\\x02\\x02\\x02\\x06\\x1A%\\'\" +\r\n\t\t\",\";\r\n\tpublic static __ATN: ATN;\r\n\tpublic static get _ATN(): ATN {\r\n\t\tif (!ExpressionParser.__ATN) {\r\n\t\t\tExpressionParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ExpressionParser._serializedATN));\r\n\t\t}\r\n\r\n\t\treturn ExpressionParser.__ATN;\r\n\t}\r\n\r\n}\r\n\r\nexport class FileContext extends ParserRuleContext {\r\n\tpublic expression(): ExpressionContext {\r\n\t\treturn this.getRuleContext(0, ExpressionContext);\r\n\t}\r\n\tpublic EOF(): TerminalNode { return this.getToken(ExpressionParser.EOF, 0); }\r\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\r\n\t\tsuper(parent, invokingState);\r\n\t}\r\n\t// @Override\r\n\tpublic get ruleIndex(): number { return ExpressionParser.RULE_file; }\r\n\t// @Override\r\n\tpublic enterRule(listener: ExpressionListener): void {\r\n\t\tif (listener.enterFile) {\r\n\t\t\tlistener.enterFile(this);\r\n\t\t}\r\n\t}\r\n\t// @Override\r\n\tpublic exitRule(listener: ExpressionListener): void {\r\n\t\tif (listener.exitFile) {\r\n\t\t\tlistener.exitFile(this);\r\n\t\t}\r\n\t}\r\n\t// @Override\r\n\tpublic accept<Result>(visitor: ExpressionVisitor<Result>): Result {\r\n\t\tif (visitor.visitFile) {\r\n\t\t\treturn visitor.visitFile(this);\r\n\t\t} else {\r\n\t\t\treturn visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nexport class ExpressionContext extends ParserRuleContext {\r\n\tpublic expression(): ExpressionContext[];\r\n\tpublic expression(i: number): ExpressionContext;\r\n\tpublic expression(i?: number): ExpressionContext | ExpressionContext[] {\r\n\t\tif (i === undefined) {\r\n\t\t\treturn this.getRuleContexts(ExpressionContext);\r\n\t\t} else {\r\n\t\t\treturn this.getRuleContext(i, ExpressionContext);\r\n\t\t}\r\n\t}\r\n\tpublic POW(): TerminalNode | undefined { return this.tryGetToken(ExpressionParser.POW, 0); }\r\n\tpublic TIMES(): TerminalNode | undefined { return this.tryGetToken(ExpressionParser.TIMES, 0); }\r\n\tpublic DIV(): TerminalNode | undefined { return this.tryGetToken(ExpressionParser.DIV, 0); }\r\n\tpublic PLUS(): TerminalNode | undefined { return this.tryGetToken(ExpressionParser.PLUS, 0); }\r\n\tpublic MINUS(): TerminalNode | undefined { return this.tryGetToken(ExpressionParser.MINUS, 0); }\r\n\tpublic LPAREN(): TerminalNode | undefined { return this.tryGetToken(ExpressionParser.LPAREN, 0); }\r\n\tpublic RPAREN(): TerminalNode | undefined { return this.tryGetToken(ExpressionParser.RPAREN, 0); }\r\n\tpublic atom(): AtomContext | undefined {\r\n\t\treturn this.tryGetRuleContext(0, AtomContext);\r\n\t}\r\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\r\n\t\tsuper(parent, invokingState);\r\n\t}\r\n\t// @Override\r\n\tpublic get ruleIndex(): number { return ExpressionParser.RULE_expression; }\r\n\t// @Override\r\n\tpublic enterRule(listener: ExpressionListener): void {\r\n\t\tif (listener.enterExpression) {\r\n\t\t\tlistener.enterExpression(this);\r\n\t\t}\r\n\t}\r\n\t// @Override\r\n\tpublic exitRule(listener: ExpressionListener): void {\r\n\t\tif (listener.exitExpression) {\r\n\t\t\tlistener.exitExpression(this);\r\n\t\t}\r\n\t}\r\n\t// @Override\r\n\tpublic accept<Result>(visitor: ExpressionVisitor<Result>): Result {\r\n\t\tif (visitor.visitExpression) {\r\n\t\t\treturn visitor.visitExpression(this);\r\n\t\t} else {\r\n\t\t\treturn visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nexport class AtomContext extends ParserRuleContext {\r\n\tpublic scientific(): ScientificContext | undefined {\r\n\t\treturn this.tryGetRuleContext(0, ScientificContext);\r\n\t}\r\n\tpublic variable(): VariableContext | undefined {\r\n\t\treturn this.tryGetRuleContext(0, VariableContext);\r\n\t}\r\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\r\n\t\tsuper(parent, invokingState);\r\n\t}\r\n\t// @Override\r\n\tpublic get ruleIndex(): number { return ExpressionParser.RULE_atom; }\r\n\t// @Override\r\n\tpublic enterRule(listener: ExpressionListener): void {\r\n\t\tif (listener.enterAtom) {\r\n\t\t\tlistener.enterAtom(this);\r\n\t\t}\r\n\t}\r\n\t// @Override\r\n\tpublic exitRule(listener: ExpressionListener): void {\r\n\t\tif (listener.exitAtom) {\r\n\t\t\tlistener.exitAtom(this);\r\n\t\t}\r\n\t}\r\n\t// @Override\r\n\tpublic accept<Result>(visitor: ExpressionVisitor<Result>): Result {\r\n\t\tif (visitor.visitAtom) {\r\n\t\t\treturn visitor.visitAtom(this);\r\n\t\t} else {\r\n\t\t\treturn visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nexport class ScientificContext extends ParserRuleContext {\r\n\tpublic SCIENTIFIC_NUMBER(): TerminalNode { return this.getToken(ExpressionParser.SCIENTIFIC_NUMBER, 0); }\r\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\r\n\t\tsuper(parent, invokingState);\r\n\t}\r\n\t// @Override\r\n\tpublic get ruleIndex(): number { return ExpressionParser.RULE_scientific; }\r\n\t// @Override\r\n\tpublic enterRule(listener: ExpressionListener): void {\r\n\t\tif (listener.enterScientific) {\r\n\t\t\tlistener.enterScientific(this);\r\n\t\t}\r\n\t}\r\n\t// @Override\r\n\tpublic exitRule(listener: ExpressionListener): void {\r\n\t\tif (listener.exitScientific) {\r\n\t\t\tlistener.exitScientific(this);\r\n\t\t}\r\n\t}\r\n\t// @Override\r\n\tpublic accept<Result>(visitor: ExpressionVisitor<Result>): Result {\r\n\t\tif (visitor.visitScientific) {\r\n\t\t\treturn visitor.visitScientific(this);\r\n\t\t} else {\r\n\t\t\treturn visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nexport class VariableContext extends ParserRuleContext {\r\n\tpublic VARIABLE(): TerminalNode { return this.getToken(ExpressionParser.VARIABLE, 0); }\r\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\r\n\t\tsuper(parent, invokingState);\r\n\t}\r\n\t// @Override\r\n\tpublic get ruleIndex(): number { return ExpressionParser.RULE_variable; }\r\n\t// @Override\r\n\tpublic enterRule(listener: ExpressionListener): void {\r\n\t\tif (listener.enterVariable) {\r\n\t\t\tlistener.enterVariable(this);\r\n\t\t}\r\n\t}\r\n\t// @Override\r\n\tpublic exitRule(listener: ExpressionListener): void {\r\n\t\tif (listener.exitVariable) {\r\n\t\t\tlistener.exitVariable(this);\r\n\t\t}\r\n\t}\r\n\t// @Override\r\n\tpublic accept<Result>(visitor: ExpressionVisitor<Result>): Result {\r\n\t\tif (visitor.visitVariable) {\r\n\t\t\treturn visitor.visitVariable(this);\r\n\t\t} else {\r\n\t\t\treturn visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nexport class RelopContext extends ParserRuleContext {\r\n\tpublic EQ(): TerminalNode | undefined { return this.tryGetToken(ExpressionParser.EQ, 0); }\r\n\tpublic GT(): TerminalNode | undefined { return this.tryGetToken(ExpressionParser.GT, 0); }\r\n\tpublic LT(): TerminalNode | undefined { return this.tryGetToken(ExpressionParser.LT, 0); }\r\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\r\n\t\tsuper(parent, invokingState);\r\n\t}\r\n\t// @Override\r\n\tpublic get ruleIndex(): number { return ExpressionParser.RULE_relop; }\r\n\t// @Override\r\n\tpublic enterRule(listener: ExpressionListener): void {\r\n\t\tif (listener.enterRelop) {\r\n\t\t\tlistener.enterRelop(this);\r\n\t\t}\r\n\t}\r\n\t// @Override\r\n\tpublic exitRule(listener: ExpressionListener): void {\r\n\t\tif (listener.exitRelop) {\r\n\t\t\tlistener.exitRelop(this);\r\n\t\t}\r\n\t}\r\n\t// @Override\r\n\tpublic accept<Result>(visitor: ExpressionVisitor<Result>): Result {\r\n\t\tif (visitor.visitRelop) {\r\n\t\t\treturn visitor.visitRelop(this);\r\n\t\t} else {\r\n\t\t\treturn visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n","import { ASTNode, ASTType, NodeType } from './node';\r\n\r\nexport enum ASTOperator {\r\n    id = 'id',\r\n    plus = '+',\r\n    minus = '-',\r\n    mul = '*',\r\n    div = '/',\r\n    pow = '^'\r\n}\r\n\r\nexport class ASTExpressionNode extends ASTNode {\r\n    public operator: ASTOperator;\r\n    public type: ASTType.expression = ASTType.expression;\r\n    public children: NodeType[];\r\n\r\n    public constructor(operator: ASTOperator, children: NodeType[]) {\r\n        super(ASTType.expression);\r\n        this.children = children;\r\n        this.operator = operator;\r\n    }\r\n\r\n}","import { ASTNode, ASTType } from './node';\r\n\r\nexport class ASTSymbolNode extends ASTNode {\r\n    public symbol: string;\r\n    public type: ASTType.symbol = ASTType.symbol;\r\n\r\n    constructor(symbol: string) {\r\n        super(ASTType.symbol);\r\n        this.symbol = symbol;\r\n        this.name = symbol;\r\n    }\r\n}","// tslint:disable-next-line:no-submodule-imports\r\nimport { AbstractParseTreeVisitor } from 'antlr4ts/tree/AbstractParseTreeVisitor';\r\n// tslint:disable-next-line:no-submodule-imports\r\nimport { TerminalNode } from 'antlr4ts/tree/TerminalNode';\r\nimport {\r\n    AtomContext, ExpressionContext,\r\n    FileContext, RelopContext, ScientificContext, VariableContext\r\n} from './generated/ExpressionParser';\r\nimport { ExpressionVisitor } from './generated/ExpressionVisitor';\r\nimport { ASTExpressionNode, ASTOperator } from './nodes/expressionNode';\r\nimport { ASTNode, ASTType, NodeType } from './nodes/node';\r\nimport { ASTNullNode } from './nodes/nullNode';\r\nimport { ASTNumberNode } from './nodes/numberNode';\r\nimport { ASTSymbolNode } from './nodes/symbolNode';\r\nimport { ASTVariableNode } from './nodes/variableNode';\r\n\r\nexport class ASTVisitor\r\n    extends AbstractParseTreeVisitor<NodeType[]>\r\n    implements ExpressionVisitor<NodeType[]> {\r\n\r\n    public defaultResult() {\r\n        return [];\r\n    }\r\n\r\n    public aggregateResult(aggregate: NodeType[], nextResult: NodeType[]) {\r\n        return [...aggregate, ...nextResult];\r\n    }\r\n\r\n    public visitVariable(context: VariableContext): NodeType[] {\r\n        return [new ASTVariableNode(context.text)];\r\n    }\r\n\r\n    public visitScientific(context: ScientificContext): NodeType[] {\r\n        return [new ASTNumberNode(parseFloat(context.text))];\r\n    }\r\n\r\n    public visitAtom(context: AtomContext): NodeType[] {\r\n        return super.visitChildren(context);\r\n    }\r\n\r\n    public visitExpression(context: ExpressionContext): NodeType[] {\r\n        const children = super.visitChildren(context);\r\n\r\n        /* if (context.children) {\r\n            if (children.length === 1 && context.children[0].text === '(') {\r\n                return children;\r\n            }\r\n        } */\r\n        // if (children.length === 1) {\r\n        return [new ASTExpressionNode(ASTOperator.id, children)];\r\n        // } else if (children.length === 2) {\r\n        //     if (children[0].type === ASTType.symbol) {\r\n        //         switch(children[0].type.)\r\n        //     }\r\n        // }\r\n    }\r\n    \r\n    public visitFile(context: FileContext): NodeType[] {\r\n        return super.visitChildren(context);\r\n    }\r\n\r\n    public visitRelop(context: RelopContext): NodeType[] {\r\n        return super.visitChildren(context);\r\n    }\r\n\r\n    public visitTerminal(node: TerminalNode) {\r\n        if (node.symbol.text) {\r\n            return [new ASTSymbolNode(node.symbol.text)];\r\n        }\r\n        return [];\r\n    }\r\n}","import { ANTLRInputStream, CommonToken, CommonTokenStream } from 'antlr4ts';\r\nimport { ErrorListener } from './errorListener';\r\nimport { ExpressionLexer } from './generated/ExpressionLexer';\r\nimport { ExpressionParser, FileContext } from './generated/ExpressionParser';\r\nimport { ASTVisitor } from './visitor';\r\n\r\nexport class Parser {\r\n\r\n    private _tree: FileContext;\r\n    private _parser: ExpressionParser;\r\n    private _lexer: ExpressionLexer;\r\n    private _errorListener: ErrorListener;\r\n\r\n    public constructor(str: string) {\r\n        this._errorListener = new ErrorListener();\r\n        // Create the lexer and parser\r\n        const inputStream = new ANTLRInputStream(str);\r\n        this._lexer = new ExpressionLexer(inputStream);\r\n        const tokenStream = new CommonTokenStream(this._lexer);\r\n        this._parser = new ExpressionParser(tokenStream);\r\n        this._parser.addErrorListener(this._errorListener);\r\n\r\n        // Parse the input, where `compilationUnit` is whatever entry point you defined\r\n        this._tree = this._parser.file();\r\n        if (this._errorListener.errors.length > 0) {\r\n            throw this._errorListener.errors;\r\n        }\r\n    }\r\n\r\n    public toString() {\r\n        return this._tree.toStringTree(this._parser.ruleNames);\r\n    }\r\n\r\n    public getTree() {\r\n        const visitor = new ASTVisitor();\r\n        return visitor.visit(this._tree);\r\n    }\r\n\r\n    public getRuleNames() {\r\n        return this._parser.ruleNames;\r\n    }\r\n}","import _ from 'lodash';\r\nimport { applyAssociative } from '../engine/assocative';\r\nimport { removeBrackets } from '../engine/brackets';\r\nimport { differentiate } from '../engine/differentiate';\r\nimport { endPrint } from '../engine/finalPrint';\r\nimport { hashNode } from '../engine/hashing';\r\nimport { removeIdentities } from '../engine/identity';\r\nimport { integrate } from '../engine/integrate';\r\nimport { likeTerms } from '../engine/likeTerms';\r\nimport { applyNumerical } from '../engine/numerical';\r\nimport { orderNode } from '../engine/ordering';\r\nimport { powerSimplify } from '../engine/power';\r\nimport { powerToProduct } from '../engine/powerToProduct';\r\nimport { prettyPrintNode, printNode } from '../engine/printing';\r\nimport { removeSingles } from '../engine/removeSingles';\r\nimport { simplifyInput } from '../engine/simplification';\r\nimport { smartSimplify } from '../engine/smartSimplify';\r\nimport { toPolynomial } from '../engine/toPolynomial';\r\nimport { isUndefined } from '../engine/undefined';\r\nimport { ParserError } from '../parsing/errorListener';\r\nimport { ASTNode, ASTType, NodeType } from '../parsing/nodes/node';\r\nimport { Parser } from '../parsing/parser';\r\nimport { clearHistory as clearConsoleHistory } from '../stores/console/actionCreators';\r\nimport store from '../stores/store';\r\nimport { clearHistory as clearTreeHistory, updateTree } from '../stores/tree/actionCreators';\r\nimport { getTree } from '../stores/tree/selectors';\r\nimport { testModel } from './testModels';\r\n\r\nexport function execute(input: string): { output: string, error?: string } | undefined {\r\n    const tokens = input.split(' ');\r\n    switch (tokens[0]) {\r\n        case '/clear':\r\n            store.dispatch(clearConsoleHistory());\r\n            store.dispatch(clearTreeHistory());\r\n            return;\r\n        case '/parse':\r\n            try {\r\n                const parser = new Parser(tokens.slice(1).join(' '));\r\n                store.dispatch(updateTree(parser.getTree(), parser.getRuleNames()));\r\n                return { output: 'parsed: ' + parser.toString() };\r\n            } catch (err) {\r\n                return { output: '', error: err.map((e: ParserError) => e.message).join('\\n') };\r\n            }\r\n        case '/p':\r\n            try {\r\n                const parser = new Parser(tokens.slice(1).join(' '));\r\n                const newTree = simplifyInput(parser.getTree()[0]);\r\n                if (newTree) {\r\n                    store.dispatch(updateTree([newTree], parser.getRuleNames()));\r\n                }\r\n                return { output: 'parsed: ' + parser.toString() };\r\n            } catch (err) {\r\n                return { output: '', error: err.map((e: ParserError) => e.message).join('\\n') };\r\n            }\r\n        case '/d': {\r\n            const tree = _.cloneDeep(getTree(store.getState()));\r\n            if (tree) {\r\n                const newTree = differentiate(tree.tree[0]);\r\n                if (newTree) {\r\n                    store.dispatch(updateTree([newTree], tree.ruleNames));\r\n                }\r\n                return { output: 'Result: ' + prettyPrintNode(newTree) };\r\n            } else {\r\n                return { output: '', error: `Nothing to apply rule to` };\r\n            }\r\n        }\r\n        case '/simplify': {\r\n            const tree = _.cloneDeep(getTree(store.getState()));\r\n            if (tree) {\r\n                const newTree = simplifyInput(tree.tree[0]);\r\n                if (newTree) {\r\n                    store.dispatch(updateTree([newTree], tree.ruleNames));\r\n                }\r\n                return { output: 'Simplified to: ' + prettyPrintNode(newTree) };\r\n            } else {\r\n                return { output: '', error: `Nothing to simplify` };\r\n            }\r\n        }\r\n        case '/associative': {\r\n            const tree = _.cloneDeep(getTree(store.getState()));\r\n            if (tree) {\r\n                const newTree = applyAssociative(tree.tree[0]);\r\n                if (newTree) {\r\n                    store.dispatch(updateTree([newTree], tree.ruleNames));\r\n                }\r\n                return { output: 'Result: ' + prettyPrintNode(newTree) };\r\n            } else {\r\n                return { output: '', error: `Nothing to apply rule to` };\r\n            }\r\n        }\r\n        case '/identity': {\r\n            const tree = _.cloneDeep(getTree(store.getState()));\r\n            if (tree) {\r\n                const newTree = removeIdentities(tree.tree[0]);\r\n                if (newTree) {\r\n                    store.dispatch(updateTree([newTree], tree.ruleNames));\r\n                }\r\n                return { output: 'Result: ' + prettyPrintNode(newTree) };\r\n            } else {\r\n                return { output: '', error: `Nothing to apply rule to` };\r\n            }\r\n        }\r\n        case '/power': {\r\n            const tree = _.cloneDeep(getTree(store.getState()));\r\n            if (tree) {\r\n                const newTree = powerSimplify(tree.tree[0]);\r\n                if (newTree) {\r\n                    store.dispatch(updateTree([newTree], tree.ruleNames));\r\n                }\r\n                return { output: 'Result: ' + prettyPrintNode(newTree) };\r\n            } else {\r\n                return { output: '', error: `Nothing to apply rule to` };\r\n            }\r\n        }\r\n        case '/brackets': {\r\n            const tree = _.cloneDeep(getTree(store.getState()));\r\n            if (tree) {\r\n                const newTree = removeBrackets(tree.tree[0]);\r\n                if (newTree) {\r\n                    store.dispatch(updateTree([newTree], tree.ruleNames));\r\n                }\r\n                return { output: 'Result: ' + prettyPrintNode(newTree) };\r\n            } else {\r\n                return { output: '', error: `Nothing to apply rule to` };\r\n            }\r\n        }\r\n        case '/defined': {\r\n            const tree = _.cloneDeep(getTree(store.getState()));\r\n            const check = _.cloneDeep(getTree(store.getState()));\r\n            if (tree && check) {\r\n                if ((isUndefined(check.tree[0])).type === ASTType.null) {\r\n                    return { output: 'Result: the expression is undefined' };\r\n                }\r\n                return { output: 'Result: ' + prettyPrintNode(tree.tree[0]) };\r\n            } else {\r\n                return { output: '', error: `Nothing to apply rule to` };\r\n            }\r\n        }\r\n        case '/numerical': {\r\n            const tree = _.cloneDeep(getTree(store.getState()));\r\n            if (tree) {\r\n                const newTree = applyNumerical(tree.tree[0]);\r\n                if (newTree) {\r\n                    store.dispatch(updateTree([newTree], tree.ruleNames));\r\n                }\r\n                return { output: 'Result: ' + prettyPrintNode(newTree) };\r\n            } else {\r\n                return { output: '', error: `Nothing to apply rule to` };\r\n            }\r\n        }\r\n        case '/order': {\r\n            const tree = _.cloneDeep(getTree(store.getState()));\r\n            if (tree) {\r\n                const newTree = orderNode(tree.tree[0]);\r\n                if (newTree) {\r\n                    store.dispatch(updateTree([newTree], tree.ruleNames));\r\n                }\r\n                return { output: 'Result: ' + prettyPrintNode(newTree) };\r\n            } else {\r\n                return { output: '', error: `Nothing to apply rule to` };\r\n            }\r\n        }\r\n        case '/likeTerms': {\r\n            const tree = _.cloneDeep(getTree(store.getState()));\r\n            if (tree) {\r\n                const newTree = likeTerms(tree.tree[0]);\r\n                if (newTree) {\r\n                    store.dispatch(updateTree([newTree], tree.ruleNames));\r\n                }\r\n                return { output: 'Result: ' + prettyPrintNode(newTree) };\r\n            } else {\r\n                return { output: '', error: `Nothing to apply rule to` };\r\n            }\r\n        }\r\n        case '/powRed': {\r\n            const tree = _.cloneDeep(getTree(store.getState()));\r\n            if (tree) {\r\n                const newTree = powerToProduct(tree.tree[0]);\r\n                if (newTree) {\r\n                    store.dispatch(updateTree([newTree], tree.ruleNames));\r\n                }\r\n                return { output: 'Result: ' + prettyPrintNode(newTree) };\r\n            } else {\r\n                return { output: '', error: `Nothing to apply rule to` };\r\n            }\r\n        }\r\n        case '/int': {\r\n            const tree = _.cloneDeep(getTree(store.getState()));\r\n            if (tree) {\r\n                const newTree = integrate(tree.tree[0]);\r\n                if (newTree) {\r\n                    store.dispatch(updateTree([newTree], tree.ruleNames));\r\n                }\r\n                return { output: 'Result: ' + prettyPrintNode(newTree) };\r\n            } else {\r\n                return { output: '', error: `Nothing to apply rule to` };\r\n            }\r\n        }\r\n        case '/model1': {\r\n            try {\r\n                const parser = new Parser(tokens.slice(1).join(' '));\r\n                store.dispatch(updateTree(parser.getTree(), parser.getRuleNames()));\r\n                const tree = _.cloneDeep(store.dispatch(updateTree(parser.getTree(), parser.getRuleNames())));\r\n                if (tree) {\r\n                    const newTree = simplifyInput(tree.tree[0]);\r\n                    if (newTree) {\r\n                        store.dispatch(updateTree([newTree], tree.ruleNames));\r\n                    }\r\n                    let root = _.cloneDeep(newTree);\r\n                    const check = _.cloneDeep(newTree);\r\n                    for (let i = 0; i < 100; i++) {\r\n                        if (check && (isUndefined(check)).type === ASTType.null) {\r\n                            return { output: 'Result: the expression is undefined' };\r\n                        }\r\n                        if (root) {\r\n                            root = applyAssociative(root);\r\n                            root = removeIdentities(root);\r\n                            root = powerSimplify(root);\r\n                            root = removeBrackets(root);\r\n                            root = likeTerms(root);\r\n                            root = applyNumerical(root);\r\n                        }\r\n                    }\r\n                    return { output: 'Result: ' + prettyPrintNode(root) };\r\n                } else {\r\n                    return { output: '', error: `Nothing to apply rule to` };\r\n                }\r\n            } catch (err) {\r\n                return { output: '', error: err.map((e: ParserError) => e.message).join('\\n') };\r\n            }\r\n        }\r\n        case '/model2': {\r\n            try {\r\n                const parser = new Parser(tokens.slice(1).join(' '));\r\n                let newTree = simplifyInput(parser.getTree()[0]);\r\n                if (newTree) {\r\n                    newTree = orderNode(newTree);\r\n                    hashNode(newTree);\r\n                    let lastHash;\r\n                    // Do smart simplification\r\n                    while (lastHash !== newTree?.hash) {\r\n                        const check = _.cloneDeep(newTree);\r\n                        if (check && isUndefined(check).type === ASTType.null) {\r\n                            return { output: 'Result: the expression is undefined' };\r\n                        }\r\n                        lastHash = newTree?.hash;\r\n                        newTree = applyAssociative(newTree);\r\n                        newTree = removeIdentities(newTree);\r\n                        newTree = applyNumerical(newTree);\r\n                        newTree = powerSimplify(newTree);\r\n                        newTree = smartSimplify(newTree);\r\n                        newTree = removeSingles(newTree);\r\n                        newTree = orderNode(newTree);\r\n                        hashNode(newTree);\r\n                    }\r\n                    lastHash = undefined;\r\n                    newTree = orderNode(newTree);\r\n                    hashNode(newTree);\r\n                    // Do basic simplification\r\n                    while (lastHash !== newTree?.hash) {\r\n                        lastHash = newTree?.hash;\r\n                        newTree = applyAssociative(newTree);\r\n                        newTree = removeIdentities(newTree);\r\n                        newTree = applyNumerical(newTree);\r\n                        newTree = powerSimplify(newTree);\r\n                        newTree = orderNode(newTree);\r\n                        hashNode(newTree);\r\n                    }\r\n\r\n                    if (newTree) {\r\n                        store.dispatch(updateTree([_.cloneDeep(newTree)], parser.getRuleNames()));\r\n                    }\r\n                    return { output: 'Result: ' + prettyPrintNode(newTree) };\r\n                } else {\r\n                    return { output: '', error: `Nothing to apply rule to` };\r\n                }\r\n            } catch (err) {\r\n                return { output: '', error: err.map((e: ParserError) => e.message).join('\\n') };\r\n            }\r\n        }\r\n        case '/model2*': {\r\n            try {\r\n                const variable = tokens[1];\r\n                const parser = new Parser(tokens.slice(2).join(' '));\r\n                let newTree = simplifyInput(parser.getTree()[0]);\r\n                if (newTree) {\r\n                    newTree = orderNode(newTree);\r\n                    hashNode(newTree);\r\n                    let lastHash;\r\n                    // Do smart simplification\r\n                    while (lastHash !== newTree?.hash) {\r\n                        const check = _.cloneDeep(newTree);\r\n                        if (check && isUndefined(check).type === ASTType.null) {\r\n                            return { output: 'Result: the expression is undefined' };\r\n                        }\r\n                        lastHash = newTree?.hash;\r\n                        newTree = applyAssociative(newTree);\r\n                        newTree = removeIdentities(newTree);\r\n                        newTree = applyNumerical(newTree);\r\n                        newTree = powerSimplify(newTree);\r\n                        const res = toPolynomial(newTree, variable);\r\n                        if (res.flag === 'nonpoly') {\r\n                            return { output: '', error: 'Could not convert to polynomial' };\r\n                        }\r\n                        newTree = res.node;\r\n                        newTree = smartSimplify(newTree);\r\n                        newTree = removeSingles(newTree);\r\n                        newTree = orderNode(newTree);\r\n                        hashNode(newTree);\r\n                    }\r\n                    lastHash = undefined;\r\n                    newTree = orderNode(newTree);\r\n                    hashNode(newTree);\r\n                    // Do basic simplification\r\n                    while (lastHash !== newTree?.hash) {\r\n                        lastHash = newTree?.hash;\r\n                        newTree = applyAssociative(newTree);\r\n                        newTree = removeIdentities(newTree);\r\n                        newTree = applyNumerical(newTree);\r\n                        newTree = powerSimplify(newTree);\r\n                        newTree = orderNode(newTree);\r\n                        hashNode(newTree);\r\n                    }\r\n\r\n                    if (newTree) {\r\n                        store.dispatch(updateTree([_.cloneDeep(newTree)], parser.getRuleNames()));\r\n                    }\r\n                    return { output: 'Result: ' + prettyPrintNode(newTree) };\r\n                } else {\r\n                    return { output: '', error: `Nothing to apply rule to` };\r\n                }\r\n            } catch (err) {\r\n                return { output: '', error: err.map((e: ParserError) => e.message).join('\\n') };\r\n            }\r\n        }\r\n        case '/poly': {\r\n            const variable = tokens.slice(1).join(' ');\r\n            const tree = _.cloneDeep(getTree(store.getState()));\r\n            if (tree) {\r\n                const res = toPolynomial(tree.tree[0], variable);\r\n                switch (res.flag) {\r\n                    case 'constant':\r\n                        store.dispatch(updateTree([res.node], tree.ruleNames));\r\n                        return { output: 'Reduced to constant: ' + prettyPrintNode(res.node) };\r\n                    case 'term':\r\n                        store.dispatch(updateTree([res.node], tree.ruleNames));\r\n                        return { output: 'Reduced to single term: ' + prettyPrintNode(res.node) };\r\n                    case 'poly':\r\n                        store.dispatch(updateTree([res.node], tree.ruleNames));\r\n                        return { output: 'Converted to polynomial: ' + prettyPrintNode(res.node) };\r\n                    case 'nonpoly':\r\n                    default:\r\n                        return { output: '', error: 'Could not convert to polynomial' };\r\n                }\r\n            } else {\r\n                return { output: '', error: `Nothing to apply rule to` };\r\n            }\r\n        }\r\n        case '/model4': {\r\n            try {\r\n                const parser = new Parser(tokens.slice(1).join(' '));\r\n                store.dispatch(updateTree(parser.getTree(), parser.getRuleNames()));\r\n                const tree = _.cloneDeep(store.dispatch(updateTree(parser.getTree(), parser.getRuleNames())));\r\n                if (tree) {\r\n                    const newTree = simplifyInput(tree.tree[0]);\r\n                    if (newTree) {\r\n                        const flat = applyAssociative(newTree);\r\n                        const integratedTree = integrate(flat);\r\n                        let root = _.cloneDeep(integratedTree);\r\n                        for (let i = 0; i < 100; i++) {\r\n                            if (root) {\r\n                                root = applyAssociative(root);\r\n                                root = removeIdentities(root);\r\n                                root = powerSimplify(root);\r\n                                root = removeBrackets(root);\r\n                                root = likeTerms(root);\r\n                                root = applyNumerical(root);\r\n\r\n                            }\r\n                        }\r\n                        root = endPrint(root);\r\n                        store.dispatch(updateTree([root], tree.ruleNames));\r\n                        return { output: 'Result: ' + prettyPrintNode(root) };\r\n                    } else {\r\n                        return { output: '', error: `Nothing to apply rule to` };\r\n                    }\r\n                } else {\r\n                    return { output: '', error: `Nothing to apply rule to` };\r\n                }\r\n            } catch (err) {\r\n                return { output: '', error: err.map((e: ParserError) => e.message).join('\\n') };\r\n            }\r\n        }\r\n        case '/smart': {\r\n            const tree = _.cloneDeep(getTree(store.getState()));\r\n            if (tree) {\r\n                const newTree = smartSimplify(tree.tree[0]);\r\n                if (newTree) {\r\n                    store.dispatch(updateTree([newTree], tree.ruleNames));\r\n                }\r\n                return { output: 'Result: ' + prettyPrintNode(newTree) };\r\n            } else {\r\n                return { output: '', error: `Nothing to apply rule to` };\r\n            }\r\n        }\r\n        case '/hash': {\r\n            const tree = _.cloneDeep(getTree(store.getState()));\r\n            if (tree) {\r\n                const newTree = tree.tree[0];\r\n                hashNode(newTree);\r\n                if (newTree) {\r\n                    store.dispatch(updateTree([newTree], tree.ruleNames));\r\n                }\r\n                return { output: 'Result: ' + prettyPrintNode(newTree) };\r\n            } else {\r\n                return { output: '', error: `Nothing to apply hashing to` };\r\n            }\r\n        }\r\n        case '/test': {\r\n            const i = tokens.slice(1).join(' ');\r\n            const tree = _.cloneDeep(getTree(store.getState()));\r\n            testModel(i);\r\n            return { output: 'Tested model ' + i };\r\n        }\r\n        case '/model3': {\r\n            try {\r\n                const parser = new Parser(tokens.slice(1).join(' '));\r\n                store.dispatch(updateTree(parser.getTree(), parser.getRuleNames()));\r\n                const tree = _.cloneDeep(store.dispatch(updateTree(parser.getTree(), parser.getRuleNames())));\r\n                if (tree) {\r\n                    const newTree = simplifyInput(tree.tree[0]);\r\n                    if (newTree) {\r\n                        store.dispatch(updateTree([newTree], tree.ruleNames));\r\n                        const derivativeTree = differentiate(newTree);\r\n                        let root = _.cloneDeep(derivativeTree);\r\n                        const check = _.cloneDeep(derivativeTree);\r\n                        for (let i = 0; i < 100; i++) {\r\n                            if (check && (isUndefined(check)).type === ASTType.null) {\r\n                                return { output: 'Result: the expression is undefined' };\r\n                            }\r\n                            if (root) {\r\n                                root = applyAssociative(root);\r\n                                root = removeIdentities(root);\r\n                                root = powerSimplify(root);\r\n                                root = removeBrackets(root);\r\n                                root = likeTerms(root);\r\n                                root = applyNumerical(root);\r\n\r\n                            }\r\n                        }\r\n                        root = endPrint(root);\r\n                        return { output: 'Result: ' + prettyPrintNode(root) };\r\n                    }\r\n                    return { output: '', error: `Nothing to apply rule to` };\r\n                } else {\r\n                    return { output: '', error: `Nothing to apply rule to` };\r\n                }\r\n            } catch (err) {\r\n                return { output: '', error: err.map((e: ParserError) => e.message).join('\\n') };\r\n            }\r\n        }\r\n        case '/model3*': {\r\n            try {\r\n                const parser = new Parser(tokens.slice(1).join(' '));\r\n                const newTree = simplifyInput(parser.getTree()[0]);\r\n                if (newTree) {\r\n                    let derivativeTree = differentiate(newTree);\r\n                    derivativeTree = orderNode(derivativeTree);\r\n                    hashNode(derivativeTree);\r\n                    let lastHash;\r\n                    // Do smart simplification\r\n                    while (lastHash !== derivativeTree?.hash) {\r\n                        const check = _.cloneDeep(derivativeTree);\r\n                        if (check && isUndefined(check).type === ASTType.null) {\r\n                            return { output: 'Result: the expression is undefined' };\r\n                        }\r\n                        lastHash = derivativeTree?.hash;\r\n                        derivativeTree = applyAssociative(derivativeTree);\r\n                        derivativeTree = removeIdentities(derivativeTree);\r\n                        derivativeTree = applyNumerical(derivativeTree);\r\n                        derivativeTree = powerSimplify(derivativeTree);\r\n                        derivativeTree = smartSimplify(derivativeTree);\r\n                        derivativeTree = removeSingles(derivativeTree);\r\n                        derivativeTree = orderNode(derivativeTree);\r\n                        hashNode(derivativeTree);\r\n                    }\r\n                    lastHash = undefined;\r\n                    derivativeTree = orderNode(derivativeTree);\r\n                    hashNode(derivativeTree);\r\n                    // Do basic simplification\r\n                    while (lastHash !== derivativeTree?.hash) {\r\n                        lastHash = derivativeTree?.hash;\r\n                        derivativeTree = applyAssociative(derivativeTree);\r\n                        derivativeTree = removeIdentities(derivativeTree);\r\n                        derivativeTree = applyNumerical(derivativeTree);\r\n                        derivativeTree = powerSimplify(derivativeTree);\r\n                        derivativeTree = orderNode(derivativeTree);\r\n                        hashNode(derivativeTree);\r\n                    }\r\n\r\n                    if (derivativeTree) {\r\n                        store.dispatch(updateTree([_.cloneDeep(derivativeTree)], parser.getRuleNames()));\r\n                    }\r\n                    return { output: 'Result: ' + prettyPrintNode(derivativeTree) };\r\n                } else {\r\n                    return { output: '', error: `Nothing to apply rule to` };\r\n                }\r\n            } catch (err) {\r\n                return { output: '', error: err.map((e: ParserError) => e.message).join('\\n') };\r\n            }\r\n        }\r\n        default:\r\n            return { output: '', error: `Command '${tokens[0]}' not recognized` };\r\n    }\r\n\r\n}","import { addToLog } from '../stores/console/actionCreators';\r\nimport { LogLine } from '../stores/console/state';\r\nimport store from '../stores/store';\r\nimport { execute } from './inputHandler';\r\n\r\nexport function testModel(i: string) {\r\n    const tests = [\r\n        { test: 'x*(x^2+x+1)', expected: 'x+x^2+x^3' },\r\n        { test: '4*x^2+x+2*x^2+0', expected: 'x+6*x^2' },\r\n        { test: '(x+2)^3', expected: '8+12*x+6*x^2+x^3' },\r\n        { test: 'x/0', expected: 'the expression is undefined' },\r\n        { test: '1/x^2', expected: 'x^(-2)' },\r\n        { test: 'x^2*x^4*1', expected: 'x^6' },\r\n        { test: '(x^2)^2+(5+2)*x', expected: '7*x+x^4' },\r\n        { test: '4*x^3/x', expected: '4*x^2' },\r\n        { test: '(x-x)+x^2*(x-2*x)', expected: '-1*x^3' },\r\n        { test: '(x+1)*(x-1)', expected: '-1+x^2' },\r\n    ];\r\n\r\n    let results: LogLine[] = [];\r\n    results = tests.map((test, index) => {\r\n        const res = execute(`/model${i} ${test.test}`);\r\n        if (res?.error) {\r\n            return { isInput: false, line: `Test ${index + 1}: error (\"${res.error}\")`, isError: true };\r\n        } else {\r\n            const out = res?.output.split('Result: ')[1];\r\n            if (test.expected === out) {\r\n                return {\r\n                    isError: false,\r\n                    isInput: false,\r\n                    line: `Test ${index + 1}: expected \"${test.expected}\", and got \"${out}\"`,\r\n                };\r\n            } else {\r\n                return {\r\n                    isError: true,\r\n                    isInput: false,\r\n                    line: `Test ${index + 1}: expected \"${test.expected}\", but got \"${out}\"`,\r\n                };\r\n            }\r\n        }\r\n    });\r\n    results.forEach((res) => {\r\n        store.dispatch(addToLog(res));\r\n    });\r\n}","// tslint:disable-next-line:no-submodule-imports\r\nimport { all, call, put, putResolve, select, takeEvery } from 'redux-saga/effects';\r\nimport * as consoleCache from '../../cache/consoleCache';\r\nimport * as inputHandler from '../../inputHandling/inputHandler';\r\nimport { addToInputHistory, addToLog, saveHistory as saveHistoryAction, setHistory } from './actionCreators';\r\nimport { ActionTypeNames, ExecuteInputAction } from './actions';\r\nimport { getInputHistory, getLines } from './selectors';\r\n\r\nfunction* watchExecuteInput() {\r\n    yield takeEvery(ActionTypeNames.ExecuteInput, executeInput);\r\n}\r\n\r\nfunction* executeInput(action: ExecuteInputAction) {\r\n    yield all([\r\n        putResolve(addToLog({ isInput: true, line: action.input, isError: false })),\r\n        putResolve(addToInputHistory(action.input))\r\n    ]);\r\n\r\n    const res: { output: string, error?: string } | undefined = yield call(inputHandler.execute, action.input);\r\n\r\n    if (res) {\r\n        const { output, error } = res;\r\n        if (error) {\r\n            yield all(\r\n                error.split('\\n').map(\r\n                    (line) => putResolve(\r\n                        addToLog({ isInput: false, line, isError: true })\r\n                    )\r\n                )\r\n            );\r\n        } else {\r\n            yield all(\r\n                output.split('\\n').map(\r\n                    (line) => putResolve(\r\n                        addToLog({ isInput: false, line, isError: false })\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    yield put(saveHistoryAction());\r\n}\r\n\r\nfunction* watchLoadHistory() {\r\n    yield takeEvery(ActionTypeNames.LoadHistory, loadHistory);\r\n}\r\n\r\nexport function* loadHistory() {\r\n    const state = yield call(consoleCache.loadHistory);\r\n    yield putResolve(setHistory(state));\r\n}\r\n\r\nfunction* watchClearHistory() {\r\n    yield takeEvery(ActionTypeNames.ClearHistory, clearHistory);\r\n}\r\n\r\nfunction* clearHistory() {\r\n    yield putResolve(setHistory({ lines: [], inputHistory: [] }));\r\n    yield put(saveHistoryAction());\r\n}\r\n\r\nfunction* watchSaveHistory() {\r\n    yield takeEvery(ActionTypeNames.SaveHistory, saveHistory);\r\n}\r\n\r\nfunction* saveHistory() {\r\n    const lines = yield select(getLines);\r\n    const inputHistory = yield select(getInputHistory);\r\n\r\n    yield call(consoleCache.saveHistory, { lines, inputHistory });\r\n}\r\n\r\nexport default [watchExecuteInput, watchLoadHistory, watchSaveHistory, watchClearHistory];","import State from '../stores/tree/state';\r\n\r\nexport function saveHistory(history: State) {\r\n    localStorage.setItem('treeCache', JSON.stringify(history));\r\n}\r\n\r\nexport function loadHistory() {\r\n    const history = localStorage.getItem('treeCache');\r\n    if (history) {\r\n        return JSON.parse(history) as State;\r\n    } else {\r\n        return { history: [], index: -1 };\r\n    }\r\n}","// tslint:disable-next-line:no-submodule-imports\r\nimport { all, call, put, putResolve, select, takeEvery } from 'redux-saga/effects';\r\nimport * as treeCache from '../../cache/treeCache';\r\nimport * as inputHandler from '../../inputHandling/inputHandler';\r\nimport { addToHistory, saveHistory as saveHistoryAction, setHistory } from './actionCreators';\r\nimport { ActionTypeNames, UpdateTreeAction } from './actions';\r\n\r\nfunction* watchUpdateTree() {\r\n    yield takeEvery(ActionTypeNames.UpdateTree, updateTree);\r\n}\r\n\r\nfunction* updateTree(action: UpdateTreeAction) {\r\n    yield putResolve(addToHistory(action.tree, action.ruleNames));\r\n    yield put(saveHistoryAction());\r\n}\r\n\r\nfunction* watchLoadHistory() {\r\n    yield takeEvery(ActionTypeNames.LoadHistory, loadHistory);\r\n}\r\n\r\nexport function* loadHistory() {\r\n    const state = yield call(treeCache.loadHistory);\r\n    yield putResolve(setHistory(state));\r\n}\r\n\r\nfunction* watchClearHistory() {\r\n    yield takeEvery(ActionTypeNames.ClearHistory, clearHistory);\r\n}\r\n\r\nfunction* clearHistory() {\r\n    yield putResolve(setHistory({ history: [], index: -1 }));\r\n    yield put(saveHistoryAction());\r\n}\r\n\r\nfunction* watchSaveHistory() {\r\n    yield takeEvery(ActionTypeNames.SaveHistory, saveHistory);\r\n}\r\n\r\nfunction* saveHistory() {\r\n    const treeState = yield select((state) => state.tree);\r\n\r\n    yield call(treeCache.saveHistory, treeState);\r\n}\r\n\r\nexport default [watchUpdateTree, watchLoadHistory, watchSaveHistory, watchClearHistory];","import { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\n// tslint:disable-next-line:no-submodule-imports\r\nimport { all, fork } from 'redux-saga/effects';\r\n\r\nimport consoleReducer from './console/reducer';\r\nimport treeReducer from './tree/reducer';\r\n\r\nimport consoleSagas, { loadHistory as loadConsoleHistory } from './console/sagas';\r\nimport treeSagas, { loadHistory as loadTreeHistory } from './tree/sagas';\r\n\r\n// Import all watching sagas\r\nconst watchSagas = [...consoleSagas, ...treeSagas];\r\n\r\n// Set up root reducer\r\nconst reducers = {\r\n    console: consoleReducer,\r\n    tree: treeReducer,\r\n};\r\n\r\nconst rootReducer = combineReducers(reducers);\r\n\r\nexport type RootState = {\r\n    [P in keyof typeof reducers]: ReturnType<typeof reducers[P]>;\r\n};\r\n\r\nfunction* rootSaga() {\r\n    // initialize data\r\n    yield fork(loadConsoleHistory);\r\n    yield fork(loadTreeHistory);\r\n\r\n    yield all(watchSagas.map((saga) => saga()));\r\n}\r\n\r\n// Create store\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst store = createStore(\r\n    rootReducer, process.env.NODE_ENV === 'development' ?\r\n        composeWithDevTools(applyMiddleware(sagaMiddleware)) :\r\n        applyMiddleware(sagaMiddleware)\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport './App.scss';\r\nimport Topbar from './components/top/Topbar';\r\n\r\nimport ConsoleView from './components/console/ConsoleView';\r\nimport TreeView from './components/tree/TreeView';\r\nimport { addToLog } from './stores/console/actionCreators';\r\nimport store from './stores/store';\r\n\r\nexport default class App extends React.Component {\r\n    public componentDidCatch(error: Error, info: React.ErrorInfo) {\r\n        // tslint:disable-next-line:no-console\r\n        console.error(error, error.stack, info.componentStack);\r\n        store.dispatch(addToLog({\r\n            isError: true,\r\n            isInput: false,\r\n            line: error.message,\r\n        }));\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <Provider store={store}>\r\n                <React.Fragment>\r\n                    <Topbar><h3>Test</h3></Topbar>\r\n                    <TreeView />\r\n                    <ConsoleView />\r\n                </React.Fragment>\r\n            </Provider>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faArrowRight, faRedo, faTrashAlt, faUndo } from '@fortawesome/free-solid-svg-icons';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nlibrary.add({\r\n    faArrowRight,\r\n    faRedo,\r\n    faTrashAlt,\r\n    faUndo,\r\n});\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}