// Generated from src/parsing/grammars/Expression.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class ExpressionLexer extends Lexer {
	public static readonly VARIABLE = 1;
	public static readonly SCIENTIFIC_NUMBER = 2;
	public static readonly LPAREN = 3;
	public static readonly RPAREN = 4;
	public static readonly PLUS = 5;
	public static readonly MINUS = 6;
	public static readonly TIMES = 7;
	public static readonly DIV = 8;
	public static readonly GT = 9;
	public static readonly LT = 10;
	public static readonly EQ = 11;
	public static readonly POINT = 12;
	public static readonly POW = 13;
	public static readonly WS = 14;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"VARIABLE", "VALID_ID_START", "VALID_ID_CHAR", "SCIENTIFIC_NUMBER", "NUMBER", 
		"UNSIGNED_INTEGER", "E", "SIGN", "LPAREN", "RPAREN", "PLUS", "MINUS", 
		"TIMES", "DIV", "GT", "LT", "EQ", "POINT", "POW", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'('", "')'", "'+'", "'-'", "'*'", "'/'", 
		"'>'", "'<'", "'='", "'.'", "'^'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "VARIABLE", "SCIENTIFIC_NUMBER", "LPAREN", "RPAREN", "PLUS", 
		"MINUS", "TIMES", "DIV", "GT", "LT", "EQ", "POINT", "POW", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ExpressionLexer._LITERAL_NAMES, ExpressionLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return ExpressionLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(ExpressionLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Expression.g4"; }

	// @Override
	public get ruleNames(): string[] { return ExpressionLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return ExpressionLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return ExpressionLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return ExpressionLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x10u\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x03\x02\x03\x02\x07\x02.\n" +
		"\x02\f\x02\x0E\x021\v\x02\x03\x03\x05\x034\n\x03\x03\x04\x03\x04\x05\x04" +
		"8\n\x04\x03\x05\x03\x05\x03\x05\x05\x05=\n\x05\x03\x05\x03\x05\x05\x05" +
		"A\n\x05\x03\x06\x06\x06D\n\x06\r\x06\x0E\x06E\x03\x06\x03\x06\x06\x06" +
		"J\n\x06\r\x06\x0E\x06K\x05\x06N\n\x06\x03\x07\x06\x07Q\n\x07\r\x07\x0E" +
		"\x07R\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03" +
		"\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11" +
		"\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x06\x15p\n\x15" +
		"\r\x15\x0E\x15q\x03\x15\x03\x15\x02\x02\x02\x16\x03\x02\x03\x05\x02\x02" +
		"\x07\x02\x02\t\x02\x04\v\x02\x02\r\x02\x02\x0F\x02\x02\x11\x02\x02\x13" +
		"\x02\x05\x15\x02\x06\x17\x02\x07\x19\x02\b\x1B\x02\t\x1D\x02\n\x1F\x02" +
		"\v!\x02\f#\x02\r%\x02\x0E\'\x02\x0F)\x02\x10\x03\x02\x06\x05\x02C\\aa" +
		"c|\x04\x02GGgg\x04\x02--//\x05\x02\v\f\x0F\x0F\"\"\x02w\x02\x03\x03\x02" +
		"\x02\x02\x02\t\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02" +
		"\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02" +
		"\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02" +
		"\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02" +
		"\x02)\x03\x02\x02\x02\x03+\x03\x02\x02\x02\x053\x03\x02\x02\x02\x077\x03" +
		"\x02\x02\x02\t9\x03\x02\x02\x02\vC\x03\x02\x02\x02\rP\x03\x02\x02\x02" +
		"\x0FT\x03\x02\x02\x02\x11V\x03\x02\x02\x02\x13X\x03\x02\x02\x02\x15Z\x03" +
		"\x02\x02\x02\x17\\\x03\x02\x02\x02\x19^\x03\x02\x02\x02\x1B`\x03\x02\x02" +
		"\x02\x1Db\x03\x02\x02\x02\x1Fd\x03\x02\x02\x02!f\x03\x02\x02\x02#h\x03" +
		"\x02\x02\x02%j\x03\x02\x02\x02\'l\x03\x02\x02\x02)o\x03\x02\x02\x02+/" +
		"\x05\x05\x03\x02,.\x05\x07\x04\x02-,\x03\x02\x02\x02.1\x03\x02\x02\x02" +
		"/-\x03\x02\x02\x02/0\x03\x02\x02\x020\x04\x03\x02\x02\x021/\x03\x02\x02" +
		"\x0224\t\x02\x02\x0232\x03\x02\x02\x024\x06\x03\x02\x02\x0258\x05\x05" +
		"\x03\x0268\x042;\x0275\x03\x02\x02\x0276\x03\x02\x02\x028\b\x03\x02\x02" +
		"\x029@\x05\v\x06\x02:<\x05\x0F\b\x02;=\x05\x11\t\x02<;\x03\x02\x02\x02" +
		"<=\x03\x02\x02\x02=>\x03\x02\x02\x02>?\x05\r\x07\x02?A\x03\x02\x02\x02" +
		"@:\x03\x02\x02\x02@A\x03\x02\x02\x02A\n\x03\x02\x02\x02BD\x042;\x02CB" +
		"\x03\x02\x02\x02DE\x03\x02\x02\x02EC\x03\x02\x02\x02EF\x03\x02\x02\x02" +
		"FM\x03\x02\x02\x02GI\x070\x02\x02HJ\x042;\x02IH\x03\x02\x02\x02JK\x03" +
		"\x02\x02\x02KI\x03\x02\x02\x02KL\x03\x02\x02\x02LN\x03\x02\x02\x02MG\x03" +
		"\x02\x02\x02MN\x03\x02\x02\x02N\f\x03\x02\x02\x02OQ\x042;\x02PO\x03\x02" +
		"\x02\x02QR\x03\x02\x02\x02RP\x03\x02\x02\x02RS\x03\x02\x02\x02S\x0E\x03" +
		"\x02\x02\x02TU\t\x03\x02\x02U\x10\x03\x02\x02\x02VW\t\x04\x02\x02W\x12" +
		"\x03\x02\x02\x02XY\x07*\x02\x02Y\x14\x03\x02\x02\x02Z[\x07+\x02\x02[\x16" +
		"\x03\x02\x02\x02\\]\x07-\x02\x02]\x18\x03\x02\x02\x02^_\x07/\x02\x02_" +
		"\x1A\x03\x02\x02\x02`a\x07,\x02\x02a\x1C\x03\x02\x02\x02bc\x071\x02\x02" +
		"c\x1E\x03\x02\x02\x02de\x07@\x02\x02e \x03\x02\x02\x02fg\x07>\x02\x02" +
		"g\"\x03\x02\x02\x02hi\x07?\x02\x02i$\x03\x02\x02\x02jk\x070\x02\x02k&" +
		"\x03\x02\x02\x02lm\x07`\x02\x02m(\x03\x02\x02\x02np\t\x05\x02\x02on\x03" +
		"\x02\x02\x02pq\x03\x02\x02\x02qo\x03\x02\x02\x02qr\x03\x02\x02\x02rs\x03" +
		"\x02\x02\x02st\b\x15\x02\x02t*\x03\x02\x02\x02\r\x02/37<@EKMRq\x03\b\x02" +
		"\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ExpressionLexer.__ATN) {
			ExpressionLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ExpressionLexer._serializedATN));
		}

		return ExpressionLexer.__ATN;
	}

}

